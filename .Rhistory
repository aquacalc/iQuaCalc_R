my_units
# split on space(s)
all_units <- str_split(trimws(my_units, 'both'), ' ')[[1]]
all_units
# number of elements -- want 1st (FROM units) & last (TO units)
num_unit_elements <- length(all_units)
num_unit_elements
from_units <- all_units[1]
to_units   <- all_units[num_unit_elements]
cat('from ', from_units, ' to ', to_units, '\n')
# test non-numeric part...
test_input <- '5.73 ft² to  m²   '
test_input
# extract non-numeric part(s), i.e., the units
my_units <- str_extract_all(test_input, '([^\\d\\.\\+\\-])+')[[1]]
my_units
# split on space(s)
all_units <- str_split(trimws(my_units, 'both'), ' ')[[1]]
all_units
# number of elements -- want 1st (FROM units) & last (TO units)
num_unit_elements <- length(all_units)
num_unit_elements
from_units <- all_units[1]
to_units   <- all_units[num_unit_elements]
cat('from ', from_units, ' to ', to_units, '\n')
shiny::runApp()
# Idea for better unit conversions
# iQuaCalc Unit Conversion Scratchpad
# menu of types of conversions, text-completion, echo entry
# et...voi-effing-là !
library(stringr)
library(dplyr)
# m.constant = Float.parseFloat(match(   "([-+]?[\\d\\.]+)[A-Za-z]?"   , lastMember, 1));
# m.variable = match(                    "[\\d\\.]+([A-Za-z]?)"        , lastMember, 1);
# or... "([^\\d\\.\\+\\-])+"
# my_eqn <- "4 * x + 72   * y"
# my_coefficients <- str_extract_all(my_eqn, "([-+]?[\\d\\.]+)[A-Za-z]?")[[1]]
# my_variables    <- str_extract_all(my_eqn, '([^\\d\\.\\+\\-])+')[[1]]
# scratchpad converter function ----
get_coefficient_and_units_all <- function(my_str, type) {
# my_value <- str_extract_all(my_qty_to_convert, "([-+]?[\\d\\.]+)[A-Za-z]?")[[1]]
my_value <- str_extract_all(my_str, "([-+]?[\\d\\.]+)")[[1]]   # allows '5.73 ft' and '5.73ft
my_units <- str_extract_all(my_str, '([^\\d\\.\\+\\-])+')[[1]]
coef  <- as.numeric(my_value)
units <- trimws(my_units)
# see: https://stackoverflow.com/questions/9057006/getting-strings-recognized-as-variable-names-in-r
type_data <- eval(as.name(paste0(type, '.data')))
cat('Convert ', coef, ' ', units, '\n')
all_df <- convertAll(coef, units, type_data)
return(all_df)
}
# CASE: User selects LENGTH radio button and types in '5.73 meters'...
rb_conversion <- 'area'
my_qty_to_convert <- '5.73 ft² ha'
# my_qty_to_convert <- '5.73 m²'
term_to_convert <- get_coefficient_and_units_all(my_qty_to_convert, rb_conversion)
print(term_to_convert)
# --------------------------------------------------------------
# "5.73 ft² to m²" or "5.73 ft², m²" or "5.73 ft² m²"
# test non-numeric part...
test_input <- '5.73 ft² to  m²   '
test_input
# extract non-numeric part(s), i.e., the units
my_units <- str_extract_all(test_input, '([^\\d\\.\\+\\-])+')[[1]]
my_units
# split on space(s)
all_units <- str_split(trimws(my_units, 'both'), ' ')[[1]]
all_units
# number of elements -- want 1st (FROM units) & last (TO units)
num_unit_elements <- length(all_units)
num_unit_elements
from_units <- all_units[1]
to_units   <- all_units[num_unit_elements]
cat('from ', from_units, ' to ', to_units, '\n')
# --------------------------------------------------------------
my_qty_to_convert <- '5.73 ft²'
term_to_convert <- get_coefficient_and_units_all(my_qty_to_convert, rb_conversion)
print(term_to_convert)
get_coefficient_and_units <- function(my_str, type) {
# my_value <- str_extract_all(my_qty_to_convert, "([-+]?[\\d\\.]+)[A-Za-z]?")[[1]]
my_value <- str_extract_all(my_str, "([-+]?[\\d\\.]+)")[[1]]   # allows '5.73 ft' and '5.73ft
my_units <- str_extract_all(my_str, '([^\\d\\.\\+\\-])+')[[1]]
coef  <- as.numeric(my_value)
# split on space(s)
all_units <- str_split(trimws(my_units, 'both'), ' ')[[1]]
all_units
# number of elements -- want 1st (FROM units) & last (TO units)
num_unit_elements <- length(all_units)
num_unit_elements
from_units <- all_units[1]
to_units   <- all_units[num_unit_elements]
# see: https://stackoverflow.com/questions/9057006/getting-strings-recognized-as-variable-names-in-r
type_data <- eval(as.name(paste0(type, '.data')))
ans <- convert(coef, from_units, to_units, type_data)
cat('Convert: ', coef, ' ', from_units, ' -> ', ans, ' ', to_units, '\n')
return(ans)
}
# CASE: User selects LENGTH radio button and types in '5.73 meters'...
rb_conversion <- 'area'
test_input <- '5.73 ft² to  m²   '
test_input
my_conversion <- get_coefficient_and_units(test_input, rb_conversion)
my_conversion
test_input <- '7.5acre to ha'         # ans: 18.532904 ha
test_input
my_conversion <- get_coefficient_and_units(test_input, rb_conversion)
my_conversion
test_input <- '7.5 ha to acre'         # ans: 18.532904 acre
test_input
my_conversion <- get_coefficient_and_units(test_input, rb_conversion)
my_conversion
test_input <- '7.5ha to acre'         # ans: 18.532904 acre
my_conversion <- get_coefficient_and_units(test_input, rb_conversion)
my_conversion
test_input <- '7.5      ha  to  acre   '         # ans: 18.532904 acre
my_conversion <- get_coefficient_and_units(test_input, rb_conversion)
my_conversion
test_input <- '7.5 ha  acre   '         # ans: 18.532904 acre
my_conversion <- get_coefficient_and_units(test_input, rb_conversion)
my_conversion
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
str_split('ft m', '\\n')
str_split('ft m \n ha acre', '\\n')
str_split('ft m \n ha acre', '\\n')[-1]
str_split('ft m \n ha acre', '\\n')[[1]]
str_split('ft m \n ha acre', '\\n')[[1]][-1]
str_extract_all('ft m \n ha acre', '\\n')[[1]][-1]
str_extract_all('ft m \n ha acre', '\\n')[[1]]
str_extract_all('ft m \n ha acre', '\\n')[[1]][-1]
str_split('ft m \n ha acre', '\\n')[[1]][-1]
str_split('ft m', '\\n')[[1]][-1]
str_split('ft m\nha acre', '\\n')[[1]][-1]
str_split('ft m\nha acre\nmoe larry', '\\n')[[1]][-1]
str_split('ft m\nha acre\nmoe larry', '\\n')[[1]]
length(str_split('ft m\nha acre\nmoe larry', '\\n')[[1]])
runApp()
runApp( list(ui = bootstrapPage(
verbatimTextOutput("results"),
tags$script('
$(document).on("keypress", function (e) {
Shiny.onInputChange("mydata", e.which);
});
')
)
, server = function(input, output, session) {
output$results = renderPrint({
input$mydata
})
}
))
runApp( list(ui = bootstrapPage(
verbatimTextOutput("results"),
tags$script('
$(document).on("keypress", function (e) {
Shiny.onInputChange("mydata", e.which);
});
')
)
, server = function(input, output, session) {
output$results = renderPrint({
input$mydata
})
}
))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
# cat('Convert: ', coef, ' ', from_units, ' -> ', ans, ' ', to_units, '\n')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
str_match('5 ft m', '\\n')
str_match('5 ft m \n', '\\n')
str_match_all('5 ft m \n', '\\n')
str_match_all('5 ft m \n', '\\n')[[1]]
str_match_all('5 ft m \n 6.4 ha acre', '\\n')
str_match_all('5 ft m \n 6.4 ha acre\n', '\\n')
length(str_match_all('5 ft m \n 6.4 ha acre\n', '\\n'))
length(str_match_all('5 ft m \n 6.4 ha acre\n', '\\n'))[[1]]
length(str_match_all('5 ft m \n 6.4 ha acre\n', '\\n'))
nrow(str_match_all('5 ft m \n 6.4 ha acre\n', '\\n'))
nrow(str_match_all('5 ft m \n 6.4 ha acre\n', '\\n')[[1]])
runApp()
runApp()
s <- '5.4 ft m'
word(s)
str_split(s)
str_extract_all(s, '([^\\d\\.\\+\\-])+')[[1]]
str_extract_all(s, "([-+]?[\\d\\.]+)")[[1]]
t <- s + 'yadda'
t <- paste0(s, '\n', '34 acre ha')
str_extract_all(t, '([^\\d\\.\\+\\-])+')[[1]]
str_extract_all(t, "([-+]?[\\d\\.]+)")[[1]]
str_extract_all(t, '([^\\d\\.\\+\\-])+')[[1]][2]
str_extract_all(t, "([-+]?[\\d\\.]+)")[[1]][2]
runApp()
runApp()
runApp()
install.packages(c("miniCRAN", "sigr"))
shiny::runApp()
runApp()
runApp()
convert(54321, 'cm', 'm', length.data)
convert(54321, 'cm', 'cm', length.data)
convert(54321, 'cm', 'yd', length.data)
convert(54321, 'cm', 'yards', length.data)
area.data
length.data
convert(54321, 'cm', 'in', length.data)
convert(2, '2.54m', 'in', length.data)
convert(2.54, 'cm', 'in', length.data)
convert(2.54, 'in', 'in', length.data)
convert(2.54, 'in', 'cm', length.data)
convert(1.0, 'cm', 'in', length.data)
convert(1.0, 'cm', 'm', length.data)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
my_str <- '5 cm m\n34.5 ft to m'
my_str
str_locate_all(my_str, '\\n')
my_str <- '5 cm m\n34.5 ft to m\n12m cm'
str_locate_all(my_str, '\\n')
str_locate_all(my_str, '\\n')[[1]]
str_locate_all(my_str, '\\n')[[1]][1]
str_locate_all(my_str, '\\n')[[1]][2]
str_locate_all(my_str, '\\n')[[1]][3]
str_locate_all(my_str, '\\n')[[1]][5]
str_locate_all(my_str, '\\n')[[1]][2, 1]
str_locate_all(my_str, '\\n')[[1]][2, ]
nrow(str_locate_all(my_str, '\\n')[[1]])
r <- nrow(str_locate_all(my_str, '\\n')[[1]])
str_locate_all(my_str, '\\n')[[1]][r]
runApp()
runApp()
install.packages(c("AzureML", "checkmate", "mice"))
shiny::runApp()
hr_sin <- sin(0:24 * 2 * p)
pi
hr_sin <- sin(0:24 * 2 * pi / 24)
hr_cos <- cos(0:24 * 2 * pi / 24)
plot(hr_sin)
plot(hr_cos)
plot(hr_cos, hr_sin)
plot(hr_cos, hr_sin, type = 'l')
hr_sin <- sin(0:48 * 2 * pi / 48)
hr_cos <- cos(0:48 * 2 * pi / 48)
plot(hr_cos, hr_sin, type = 'l')
plot(hr_sin, type = 'l')
abline(v = 0)
abline(h = 0)
combn(3, 1:3)
combn(3, 1)
combn(3, 3)
x <- c(1:3)
x
combn(x, 1)
factorial(24) / (factorial(24 - 4) * factorial(4))
choose(24, 4)
choose(3, 3)
combn(1:3, 3, F)
combn
combn(1:3, 3, simplify = F)
combn(1:3, 3, simplify = T)
choose(4, 1:4)
sum(choose(4, 1:4))
install.packages("RtutoR")
install.packages("questionr")
install.packages(c("data.table", "dunn.test", "epitools", "FSA", "gapminder", "glue", "lazyeval", "lubridate", "quantreg", "replyr", "robustbase", "withr"))
if (!require(devtools))
install.packages("devtools")
source_gist("gist.github.com/skranz/fad6062e5462c9d0efe4")
install.rtutor(update.github=TRUE)
devtools::install_github("mwentz93/RTutorWallStreet", upgrade_dependencies=FALSE)
shiny::runApp()
runApp()
calcRho(25 + 273.15, 30)
runApp()
calcRho(25 + 273.15, 30)
calcRho(25 + 273.15, 30)
calcRho(25 + 273.15, 0)
install.packages(c("cdata", "CHNOSZ", "devtools", "geosphere", "L1pack", "later", "lubridate", "multcomp", "openssl", "pool", "R.utils", "raster", "replyr", "rlang", "rmarkdown", "tidyselect", "tidyverse"))
install.packages(c("learnr", "Matrix", "rmarkdown", "timeDate"))
install.packages(c("broom", "car", "hms", "pracma", "Rcpp", "RcppEigen", "recipes", "seplyr", "stringi", "wrapr"))
install.packages("Rttf2pt1")
shiny::runApp()
shiny::runApp()
install.packages(c("cdata", "chron", "dbplyr", "DRR", "git2r", "Hmisc", "htmlTable", "irlba", "knitr", "MASS", "officer", "RCurl", "recipes", "ReporteRs", "ReporteRsjars", "rms", "rpart", "rprojroot", "RtutoR", "RWeka", "RWekajars", "seplyr", "shinyjs", "sp", "stargazer", "tibble", "viridis", "visNetwork", "wrapr", "zoo"))
install.packages(c("ReporteRs", "ReporteRsjars", "RtutoR", "RWeka", "RWekajars"))
install.packages(c("bookdown", "callr", "cdata", "crul", "ddalpha", "digest", "dplR", "DT", "haven", "hexbin", "hms", "htmlTable", "htmlwidgets", "knitr", "lava", "lubridate", "matrixStats", "mgcv", "miniCRAN", "mvtnorm", "oce", "openssl", "pillar", "pracma", "quantreg", "Rcpp", "RcppEigen", "replyr", "ReporteRs", "ReporteRsjars", "reprex", "RtutoR", "RWeka", "RWekajars", "seacarb", "seplyr", "shape", "sigr", "sp", "tibble", "tidyr", "tseries", "TTR", "tufte", "urltools", "viridis", "viridisLite", "wrapr", "WVPlots", "xml2"))
ui <- fluidPage(
downloadLink("downloadData", "Download")
)
server <- function(input, output) {
output$downloadData <- downloadHandler(
filename = "your-pdf-name.pdf",
content = function(file) {
file.copy("www/teste.pdf", file)
}
)
}
shinyApp(ui, server)
library("shiny", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
ui <- fluidPage(
downloadLink("downloadData", "Download")
)
server <- function(input, output) {
output$downloadData <- downloadHandler(
filename = "your-pdf-name.pdf",
content = function(file) {
file.copy("www/teste.pdf", file)
}
)
}
shinyApp(ui, server)
library(shiny)
ui <- shinyUI(fluidPage(
titlePanel("Old Faithful Geyser Data"),
sidebarLayout(
sidebarPanel(
actionButton("generate", "Generate PDF")
),
mainPanel(
uiOutput("pdfview")
)
)
))
server <- shinyServer(function(input, output) {
observeEvent(input$generate, {
output$pdfview <- renderUI({
pdf("www/myreport.pdf")
hist(rnorm(100))
dev.off()
tags$iframe(style="height:600px; width:100%", src="myreport.pdf")
})
})
})
shinyApp(ui = ui, server = server)
shiny::runApp()
install.packages("shinydashboard")
runApp()
install.packages("shinyjs")
runApp()
install.packages("V8")
runApp()
library(devtools)
install_github("trestletech/shinyStore")
install.packages("devtools")
library(devtools)
install_github("trestletech/shinyStore")
runApp()
install.packages("DT")
runApp()
install.packages("tidyverse")
runApp()
runApp()
runApp()
devtools::install_github('rstudio/DT')
runApp()
replaceData(proxy_dt_data, dummy(), rownames = F, resetPaging = FALSE)
# datatable( isolate(df_tgp()$df),
datatable( df_tgp()$df,
rownames = F,
options = list(dom = 't',
'bSort' = F,
'bInfo' = F,
pageLength = 3,
# columnDefs = list(list(targets = 2, visible = F)),
columnDefs = list(list(className = 'dt-right', targets = 0:5)),
initComplete = JS(
"function(settings, json) {",
"$(this.api().table().header()).css({'background-color': 'lightblue', 'color': '#000'});",
"}")
)
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages(c("MASS", "pillar", "yaml"))
shiny::runApp()
install.packages(c("DBI", "httpuv", "later", "stringi"))
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
whole
0.52345273
-0.000268981
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages(c("httpuv", "modelr", "psych", "stringr"))
shiny::runApp('~/Documents/Documents/R Projects/Tz current web app 2')
install.packages("dygraphs")
runApp('~/Documents/Documents/R Projects/Tz current web app 2')
install.packages("shinybootstrap2")
runApp('~/Documents/Documents/R Projects/Tz current web app 2')
runApp('~/Documents/Documents/R Projects/Tzachi Data')
install.packages("bootstrap")
runApp('~/Documents/Documents/R Projects/Tzachi Data')
tz.2012.1 <- readRDS("~/Documents/Documents/R Projects/Tzachi Data/data/tz.2012.1.rds")
tz.2012.1
runApp('~/Documents/Documents/R Projects/Tzachi Data')
install.packages(c("callr", "dplyr", "Rcpp", "shiny", "tidyr"))
install.packages(c("pillar", "purrr", "rlang", "utf8"))
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
0.082 * 355 / 2.5
0.082 * (273.15 + 30) / (735 / 760)
31.998 / 25.70382
n <- convertGasFromTo('O2', 7.24, 'mg/L', 'mL/L', 273.15 + 30, 0)
n
5.0665 * 760 / 735
runApp()
calcRho(30.3, 0)
calcRho(30.3 + 273.15, 0)
calcRho(30.3 + 273.15, 0) * 236.05
calcRho(30.3 + 273.15, 0) * 236.05 / 1000
convertGasFromTo('O2', 235.002, 'μmol/L', c('mg/L', 'mL/L'), 30.3 + 273.15, 0)
0.99510224 * 236.05
convertGasFromTo('O2', 234.8939, 'μmol/L', c('mg/L', 'mL/L'), 30.3 + 273.15, 0)
5.85164 / 0.022392
0.082 * 303.15
MW_O2 / (0.082 * 303.15)
7.54 / (MW_O2 / (0.082 * 303.15))
0.0831432 * 303.15
7.54 / (MW_O2 * (0.0831432 * 303.15))
7.54 / (MW_O2 / (0.0831432 * 303.15))
7.52 / (MW_O2 / (0.0831432 * 273.15 + 30.3))
7.52 / (MW_O2 / (0.0831432 * (273.15 + 30.3)))
0.995560 * 22.4 * 236.05
0.995560 * 22.4 * 236.05 * 0.001
0.995560 * 22.392 * 236.05 * 0.001
0.99510224 * 22.392 * 236.05 * 0.001
0.995560 * 22.413996 * 236.05 * 0.001
0.082057463 * (273.15 + 30)
0.082 * 303.15
0.082 * 273.15
0.995560 * (0.082057463 * (273.15 + 30.3)) * 236.05 * 0.001
0.995560 * (0.082057463 * (273.15 + 30.3)) * 236.05 * 0.001 / (735 / 760)
