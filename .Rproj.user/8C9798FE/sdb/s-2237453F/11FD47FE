{
    "collab_server" : "",
    "contents" : "# dashboardBody HTML\n\n\n# ---- home tab ----\n\nhomeStuff <- {\n  \n  div( \n    class = 'home',\n    style = \"height: 800px; width: 1200px; background-color: #3366CC; background-size: cover; \n    background-image: url('MirnaProzor.jpg');\",\n    # style = \"background-color: #3366CC; background-image: url('CIMG0092.jpg');\",\n    h1('Insert some intro stuff')\n    # img(src = 'Buza.jpg', height=500, width=500)\n  )\n}\n\n\n# ---- TANK Dimensions ----\n\ntankStuff <- {\n  \n  div(\n    \n    id = 'tankDimensions',\n    \n    fluidRow(\n      \n      column(\n        width = 3,\n        selectInput('tankUnits', 'From units', c('millimeters (mm)'='mm', 'centimeters (cm)'='cm',\n                                                 'meters (m)'='m', 'yd, ft, & in' = 'yards'),\n                    selected = 'm'),\n        # use uiOutput + renderUI to change 'Length' to 'Meters', 'Feet', etc.\n        # uiOutput('metersTankUI'),\n        \n        numericInput('metersOrYards', 'm', 1.0, 0, 500, 0.01),\n        \n        conditionalPanel(\n          condition = \"input.tankUnits == 'yards'\",\n          numericInput('feetConvertTank', 'feet', 1, 0, 11, 1),\n          numericInput('inchConvertTank', 'inches', 0, 0, 11, 1),\n          selectInput('fractionalInchesTank', 'fractional inches', c('0', '1/16', '1/8', '3/16', '1/4',\n                                                                     '5/16', '3/8', '7/16', '1/2',\n                                                                     '9/16', '5/8', '11/16', '3/4',\n                                                                     '13/16', '7/8', '15/16'))\n        )       # end conditionalPanel\n      ),        # end column(), width = 3\n      \n      column(\n        width = 9,\n        tabsetPanel(\n          id = 'tankPanels',\n          # tabPanel( title = 'Samocha RW Tank',\n          #   h3('Rectangular, half-hexagonal ends'),\n          #   radioButtons('samocha', 'Choose a measurement to enter...', \n          #                c('length', 'width', 'shallow-end depth', 'deep-end depth'), inline = T),\n          #   h4(textOutput('whatTimesWhat_samocha')),\n          #   # numericInput('slopeSamocha', 'slope to drain (%)', 1, 0, 45, 0.1),\n          #   wellPanel(\n          #     div(DT::dataTableOutput('tankSamochaConversionTable'), style = 'font-size:135%')\n          #   )\n          # ),\n          tabPanel( title = 'Rectangular Tank',\n            h3('Rectangular, square ends'),\n            radioButtons('rectangular', 'Choose a measurement to enter...', \n                         c('length', 'width', 'shallow-end depth', 'deep-end depth'), inline = T),\n            h4(textOutput('whatTimesWhat_rectangular')),\n            # numericInput('slopeRectangular', 'slope to drain (%)', 1, 0, 45, 0.1),\n            wellPanel(\n              div(DT::dataTableOutput('tankRectangularConversionTable'), style = 'font-size:135%')\n            )\n          ),\n          tabPanel( title = 'Circular Tank',\n            # h3('Circular'),\n            radioButtons('circular', 'Choose a measurement to enter...', \n                         c('radius', 'diameter', 'depth'), inline = T),\n            h4(textOutput('whatTimesWhat_circular')),\n            # numericInput('slopeCircular', 'slope to drain (%)', 1, 0, 45, 0.1),\n            wellPanel(\n              div(DT::dataTableOutput('tankCircularConversionTable'), style = 'font-size:135%')\n            )\n          )\n        )       # end tabsetPanel()\n        \n      )         # end column(), width = 9 (tabsetPanel)\n      # )           # end column(), width = 3\n    )             # end fluidRow()\n  )               # end div()\n}                 # end tankStuff\n\n\n# ---- FLOW RATE CONVERSION UI ----\n\nflowRateConversionStuff <- {\n  \n  fluidRow(\n    column(\n      width = 3,\n      selectInput('flowRateConvertUnits', 'Units', choices = flowUnits),\n      numericInput('flowRateConvert', '--', 28, 5, 45, 0.01)\n      \n    ),\n    #     column(\n    #       width = 3,\n    #       selectInput('flowRateConvertUnits', 'Units',\n    #                   choices = flowUnits)\n    #     ),\n    column(\n      width = 9,\n      wellPanel(\n        # see: http://stackoverflow.com/questions/25069224/rstudio-shiny-renderdatatable-font-size\n        div(DT::dataTableOutput('flowRateConversionTable'), style = 'font-size:135%')\n      )\n    )\n  )\n}\n\n\n# flowRateConversionResults <- {\n#   \n#   fluidRow(\n#     column(\n#       width = 10, offset = 1,\n#       wellPanel(\n#         # h3('Conversion Results...'),\n#         # see: http://stackoverflow.com/questions/25069224/rstudio-shiny-renderdatatable-font-size\n#         div(DT::dataTableOutput('flowRateConversionTable'), style = 'font-size:135%')\n#       )\n#     )\n#   )\n# }\n\n\n# ---- BIOMASS CONVERSION UI ----\n\nbiomassConversionStuff <- {\n  fluidRow(\n    column(\n      width = 3,\n      numericInput('biomassConvert', 'Biomass', 28, 5, 45, 0.01)\n      \n    ),\n    column(\n      width = 3,\n      selectInput('biomassConvertUnits', 'Units',\n                  choices = biomassUnits)\n    ),\n    column(\n      width = 6,\n      column(\n        width = 6,\n        numericInput('depthConvert', 'Depth', 1, 0, 5000, 0.01)\n      ),\n      column(\n        width = 6,\n        selectInput('depthConvertUnits', 'Depth Units',\n                    choices = c('m', 'cm', 'ft & in'))\n      )\n    )\n  )\n}\n\n\nbiomassConversionResults <- {\n  \n  fluidRow(\n    column(\n      width = 10, offset = 1,\n      wellPanel(\n        # h3('Conversion Results...'),\n        # see: http://stackoverflow.com/questions/25069224/rstudio-shiny-renderdatatable-font-size\n        div(DT::dataTableOutput('biomassConversionTable'), style = 'font-size:135%')\n      )\n    )\n  )\n}\n\n\n# ---- SAL CONVERSION ----\n\n\n# see: http://stackoverflow.com/questions/20637248/shiny-4-small-textinput-boxes-side-by-side\ntextInput3 <- function (inputId, label, value = \"\",...) \n{\n  div(style=\"display:inline-block\",\n      tags$label(label, `for` = inputId), \n      tags$input(id = inputId, type = \"text\", value = value,...))\n}\n\nsalConversionStuff <- {\n  \n  bootstrapPage(\n    textInput3(inputId=\"xlimitsmin\", label=\"x-min\", value = 0.0, class=\"input-small\"),\n    \n    textInput3(inputId=\"xlimitsmax\", label=\"x-max\", value = 0.5, class=\"input-small\")\n  )\n  \n}\n\n\n# ---- TEMP CONVERSION ----\n\n\ntempConversionStuff <- {\n  \n  fluidRow(\n    \n    column( width = 4,\n            \n            fluidRow(\n                column( width = 6,\n                        selectInput('tempConvertUnits', 'Temperature Units', choices = tempUnitsList)\n                )\n              ),\n            \n            fluidRow(\n                column( width = 11,\n                sliderInput('tempSlider_convert', 'Temperature', \n                            min = 4, max = 42, value = 28, step = 0.1, animate = F)\n                )\n              ),\n            \n            fluidRow(\n              column( width = 11,\n                      div(DT::dataTableOutput('dt_temp_conv'), style = 'font-size:140%')\n              )\n            )\n    ),\n    \n    column( width = 4,\n            \n            fluidRow(\n              column( width = 6,\n                      selectInput('salConvertUnits', 'Salinity Units', \n                                  choices=list(salUnitsList_short[1], \n                                               Conductivity=salUnitsList_short[2:5], \n                                               Hydrometry=salUnitsList_short[6:9]))\n              ),\n              column( width = 6,\n                      checkboxInput('tc', 'T correct', value = F)\n              )\n            ),\n            \n            fluidRow(\n              column( width = 11,\n                      sliderInput('salSlider_convert', 'Salinity', \n                                  min = 0, max = 45, value = 33, step = 0.1, animate = F)\n              )\n            ),\n            \n            fluidRow(\n              column( width = 11,\n                      div(DT::dataTableOutput('dt_sal_conv'), style = 'font-size:140%')\n              )\n            )\n    ),\n    \n    column( width = 4,\n            \n            fluidRow(\n              \n              column( width = 6,\n                      selectInput('rhoConvertUnits', 'Density Units', c('kg/m3', 'g/L'))\n              )\n            ),\n              \n              fluidRow(\n                column( width = 11\n              )\n            ),\n            \n            fluidRow(\n              column( width = 11,\n                      h3('RHO conversion DT'),\n                      verbatimTextOutput(\"temp_sal_output\"),\n                      div(DT::dataTableOutput('dt_rho_conv'), style = 'font-size:140%')\n              )\n            )\n    )\n  )\n}\n\n\n# ---- LENGTH CONVERSION ----\n\nlengthConversionStuff_2 <- {\n  \n  div( id = 'lengthConversion_2',\n    \n    fluidRow(\n\n# column with length data input\n      column(\n        width = 3,\n        \n        selectInput('lengthUnits_2', \n                    'From units', \n                    c('millimeters (mm)'='mm',\n                      'centimeters (cm)'='cm',\n                      'meters (m)'='m',\n                      'yd, ft, in' = 'yards'),\n                    selected = 'm'),\n        # numericInput('lengthInput_2', 'Enter...', 1, 0, 100, 0.1),\n        \n        # use uiOutput + renderUI to change 'Length' to 'Meters', 'Feet', etc.\n        uiOutput('lengthConvert_2'),\n        \n        conditionalPanel(\n          condition = \"input.lengthUnits_2 == 'yards'\",\n          numericInput('feetConvert_2', 'feet', 1, 0, 11, 1),\n          numericInput('inchConvert_2', 'inches', 0, 0, 11, 1),\n          selectInput('fractionalInchConvertUnits_2',\n                      'fractional inches',\n                      fractionalInches)\n        )         # end conditionalPanel\n      ),          # end column (width = 3)\n      \n# column with length input display over results table\n      column(\n        width = 9, \n          \n          fluidRow(\n            # use uiOutput + renderUI to add white space to 'Yds', 'Ft', 'In' display\n            column(12, uiOutput('echoLengthInput'), align = 'center')\n          \n          ), # end fluidRow\n        \n        wellPanel(\n          \n          # see: http://stackoverflow.com/questions/25069224/rstudio-shiny-renderdatatable-font-size\n          div(DT::dataTableOutput('lengthTable_2'), style = 'font-size:150%')\n          \n        )   # end wellPanel\n      )     # end column(width = 9)\n    )       # end fluidRow\n  )         # end div\n}           # end lengthConversionStuff_2\n\n\n\n# ---- LENGTH (horizontal) ----\n\nlengthConversionHoriz <- {\n  \n  div( id = 'lengthConversion',\n       \n       fluidRow(\n         # col[ unit selector ], col[ conditional{numeric input, label} ]\n         column( width = 2, class = 'conversion-rb', \n                 radioButtons('radLengthH', '', c('Length 1', 'Length 2'))),\n         \n         column( width = 10, class = 'conversion-input',\n                 # NB: put these columns all in one 'conversion-input' div...?\n                 column( width = 2,\n                         \n                         selectInput('lengthUnitsH', 'input units', \n                                     lengthUnitsChoices,\n                                     selected = 'm')\n                         \n                 ),          # end column( width = 2)\n                 \n                 column( width = 2,\n                         \n                         # use uiOutput + renderUI to change 'Length' to 'Meters', 'Feet', etc.\n                         uiOutput('lengthConvertH')\n                         \n                 ),            # end column( width = 2),\n                 \n                 column( width = 8,\n                         \n                         conditionalPanel(\n                           \n                           condition = \"input.lengthUnitsH == 'yards'\",\n                           column( width = 4,\n                                   numericInput('feetConvertH', 'feet', 1, 0, 11, 1)\n                           ),\n                           column( width = 4,\n                                   numericInput('inchConvertH', 'inches', 0, 0, 11, 1)\n                           ),\n                           column( width = 4,\n                                   selectInput('fractionalInchConvertUnitsH',\n                                               'fractional inch',\n                                               fractionalInches)\n                           )\n                           \n                         )  # end conditionalPanel()\n                 )          # end column( width = 8)\n           \n         )                  # end column( width = 11)\n       ),           # end fluidRow()\n       \n       fluidRow(\n         \n         # wellPanel(\n           \n           column( width = 12,\n                   \n# see: http://stackoverflow.com/questions/25069224/rstudio-shiny-renderdatatable-font-size\n                   div(DT::dataTableOutput('lengthTableH'), style = 'font-size:150%')\n           ) # end column(width = 7)\n\n#            column( width = 1, h2('+') ),\n# \n#            column( width = 3,\n#              \n#                    div(DT::dataTableOutput('lengthTableH_2'), style = 'font-size:150%')\n#            ),\n# \n#            column( width = 1, h1('=')),\n# \n#            column( width = 2, h2('results'))\n\n         # )   # end wellPanel\n         \n       )     # end fluidRow()\n       \n  )                 # end div()\n}\n\n\n\n# ---- AREA CONVERSION [TEST] ----\n\nareaConversionStuff <- {\n  div( id = 'areaConversion',\n    \n    fluidRow(\n      \n      # column with area data input\n      column(\n        width = 3,\n        \n        selectInput('areaConvertUnits', 'Units',\n                    choices = areaUnits),\n        \n        numericInput('areaInput', 'Enter...', 1, 0, 100, 0.1)\n        \n        # use uiOutput + renderUI to change 'Length' to 'Meters', 'Feet', etc.\n#         uiOutput('areaConvert'),\n#         \n#         conditionalPanel(\n#           condition = \"input.lengthUnits_2 == 'yards'\",\n#           numericInput('feetConvert_2', 'feet', 1, 0, 11, 1),\n#           numericInput('inchConvert_2', 'inches', 0, 0, 11, 1),\n#           selectInput('fractionalInchConvertUnits_2',\n#                       'fractional inches',\n#                       fractionalInches)\n#           \n#         )         # end conditionalPanel\n        \n      ),          # end column (width = 3)\n      \n      # column with area input display over results table\n      column(\n        width = 9, \n        \n        fluidRow(\n          # use uiOutput + renderUI display\n          column(12, uiOutput('echoAreaInput'), align = 'center')\n          \n        ), # end fluidRow\n        \n        wellPanel(\n          \n          # see: http://stackoverflow.com/questions/25069224/rstudio-shiny-renderdatatable-font-size\n          div(DT::dataTableOutput('areaTable'), style = 'font-size:150%')\n          \n        )   # end wellPanel\n      )     # end column(width = 9)\n    )       # end fluidRow\n  )         # end div\n}           # end areaConversionStuff\n\n\n# ---- AREA CONVERSION UI ----\n\n# areaConversionStuff <- {\n#   fluidRow(\n#     column(\n#       width = 3,\n#       numericInput('areaConvert', '--', 28, 5, 45, 0.01)\n#       \n#     ),\n#     column(\n#       width = 3,\n#       selectInput('areaConvertUnits', 'Units',\n#                   choices = areaUnits)\n#     ),\n#     column(\n#       width = 6\n#     )\n#   )\n# }\n\n\n# areaConversionResults <- {\n#   \n#   fluidRow(\n#     column(\n#       width = 10, offset = 1,\n#       wellPanel(\n#         # h3('Conversion Results...'),\n#         div(DT::dataTableOutput('areaConversionTable'), style = 'font-size:135%')\n#       )\n#     )\n#   )\n# }\n\n\n\n# ---- VOLUME (horizontal) ----\n\nvolConversionHoriz <- {\n  \n  div( id = 'volConversion',\n       \n       tabsetPanel( id = 'volTabSet',\n                    \n                    tabPanel( title = 'Volume to Volume',\n                              \n                              fluidRow(\n                                \n                                # col[ unit selector ], col[ conditional{numeric input, label} ]\n                                column( width = 2, class = 'conversion-rb', \n                                        radioButtons('radVolumeH', '', c('Volume 1', 'Volume 2'))),\n                                \n                                column( width = 10, class = 'conversion-input',\n                                        # NB: put these columns all in one 'conversion-input' div...?\n                                        column( width = 3,\n                                                \n                                                selectInput('volumeUnitsH', 'units', \n                                                            vol.data$units,\n                                                            selected = 'liters (L)')\n                                                \n                                        ),          # end column( width = 3)\n                                        \n                                        column( width = 3,\n                                                \n                                                # uiOutput + renderUI to change 'Length' to 'Meters', 'Feet', etc.\n                                                uiOutput('volumeConvertH')\n                                                \n                                        ),           # end column( width = 3),\n                                        \n                                        column( width = 6,\n                                                h5('')\n                                        )\n                                        \n                                )                  # end column( width = 10)\n                              ),           # end fluidRow()\n                              \n                              fluidRow(\n                                \n                                column( width = 12,\n                                        \n                                        # see: http://stackoverflow.com/questions/25069224/rstudio-shiny-renderdatatable-font-size\n                                        div(DT::dataTableOutput('volumeTableH'), style = 'font-size:150%')\n                                )   # end column(width = 7)\n                                \n                              )     # end fluidRow()\n                      \n                    ),     # end tabPanel 'Volume to Volume'\n                    \n                    tabPanel( title = 'Area x Depth = Volume',\n                              \n                              fluidRow(\n                                \n                                column( width = 2, class = 'conversion-rb', \n                                        radioButtons('volumeRadAxD', '', c('Area', 'Depth'))\n                                ),\n                                \n                                column( width = 10, class = 'conversion-input',\n                                        \n                                        column( width = 2,\n                                                selectInput('volumeSelectAxD', 'Area-Depth', areaOrDepthUnitsChoices[[1]]$units)\n                                                \n                                        ),\n                                        \n                                        column( width = 3,\n                                                numericInput('volumeInputAxD', 'A or D', value = 1, min = 0)\n                                                \n                                        ),\n                                        \n                                        column( width = 7,\n                                                \n                                                conditionalPanel(\n                                                  \n                                                  condition = \"input.volumeSelectAxD == 'yards'\",\n                                                  column( width = 4,\n                                                          numericInput('feetConvertAxD', 'feet', 0, 0, 11, 1)\n                                                  ),\n                                                  column( width = 4,\n                                                          numericInput('inchConvertAxD', 'inches', 0, 0, 11, 1)\n                                                  ),\n                                                  column( width = 4,\n                                                          selectInput('fractionalInchConvertUnitsAxD',\n                                                                      'fractional inch',\n                                                                      fractionalInches)\n                                                  )\n                                                  \n                                                )  # end conditionalPanel()\n                                        )          # end column width = 7\n                                )                  # end column width = 10\n                                \n                              ),  # end fluidRow() in tabPanel for 'Area x Depth = Volume'\n                              \n                              fluidRow(\n                                column( width = 12,\n                                  div( class = 'formula',\n                                          verbatimTextOutput('formulaAxD') \n                                    # tags$strong(h4('...Area x Depth = Volume...'))\n                                  )\n                                )\n                              ),\n                              \n                              fluidRow(\n                                \n                                column( width = 12,\n                                        \n                                        # see: http://stackoverflow.com/questions/25069224/rstudio-shiny-renderdatatable-font-size\n                                        div(DT::dataTableOutput('volumeTableAxD'), style = 'font-size:150%')\n                                ) # end column(width = 12\n                                \n                              )     # end fluidRow()\n                      \n                    ),     # end tabPanel 'A x D = Volume'\n                    \n                    tabPanel( title = 'Length x Width x Depth = Volume'\n                      \n                    ),    # end tabPanel 'L x W x D = Volume'\n                    \n                    tabPanel( title = 'Radius (Diameter) x Depth = Volume'\n                              \n                              \n                    )     # end tabPanel 'Radius (or Diameter) x Depth = Volume'\n                    \n       )                  # end tabsetPanel 'volTabSet'\n       \n  )                       # end div()\n}\n\n\n\n# ---- UN-IONIZED AMMONIA UI ----\n\nammoniaStuff <- {\n  \n  fluidRow(\n    \n  # TEMPORARILY DIS-able salinity selectInput (see Serverr.ui)\n    useShinyjs(),\n    \n    \n    column( width = 5,\n      \n      infoBoxOutput(\n        'unIonAmmValBox',\n        width = NULL\n      ),\n      \n      box(\n        width = NULL,\n        # title = \"Critical Levels\",\n        title = textOutput('critTitleText'),\n        solidHeader = T,\n        status = 'warning',\n        # htmlOutput('crit_data')\n        div(DT::dataTableOutput('crit_data'), style = 'font-size:140%')\n      ),\n      \n      box(\n        width = NULL,\n        # title = HTML('% UIA <em>vs</em> pH'),\n        title = textOutput('uiaTitleText'),\n        solidHeader = T,\n        status = 'warning',\n        \n        plotOutput('testPlot', height = 250)\n      )\n    ),\n    \n    column( width = 7,\n            \n      tabBox(\n        \n        height = \"600px\",\n        title = 'Data Entry & Info',\n        id = 'tb_ammonia',\n        width = NULL,\n        \n        tabPanel( title = 'Inputs',\n          box(\n            width = '400px',\n            solidHeader = T,\n            status = 'primary',\n            \n            fluidRow(\n              column( width = 7,\n                      numericInput('tanVal', 'Total Ammonia Nitrogen', 1, 0, 30, step = 0.01)\n              ),\n              \n              column( width = 5,\n                      selectInput('tanUnits', 'TAN Units:',\n                                  c('mg/L'='mgL', 'mg/kg'='mgKg', 'mol/L'='molL', 'mol/kg'='molKg'))\n              )\n            ),\n            \n            hr(),\n            \n            sliderInput(\"phSlider\", 'pH (NBS Scale)', 6, 10, 7.2, 0.01),\n            \n            # hr(),\n            \n            selectInput('tempUnits', 'Temperature Units', tempUnitsList),\n            # sliderInput('tempSlider', 'Temperature', \n            #             min = 4, max = 42, value = 28, step = 0.1, animate = F),\n            uiOutput('tempSliderUI'),\n            \n            # hr(),\n            \n            # selectInput('salUnits', 'Salinity Units', \n            #             choices=list(salUnitsList_short[1], \n            #                          Conductivity=salUnitsList_short[2:5], \n            #                          Hydrometry=salUnitsList_short[6:9])),\n            # checkboxInput('tc', 'T correct', value = F),\n            # sliderInput('salSlider', 'Salinity', \n            #             min = 0, max = 45, value = 33, step = 0.1, animate = F)\n            selectInput('salUnits', 'Salinity Units', salUnitsList),\n            uiOutput('salSlider')\n          )\n        ),\n        \n        tabPanel( title = 'Crit UIA',\n          box(\n            width = '400px',\n            solidHeader = T,\n            status = 'primary',\n            \n            fluidRow(\n              column(width = 7,\n                     numericInput('critTanVal',  'Critical TAN', 0.025, 0, 10, step = 0.001)\n                     ),\n              column(width = 5,\n                     selectInput('critTanUnits', 'Critical TAN Units', critUiaUnitsList, selected = 'mg/L')\n              )\n            ),\n            \n            hr(),\n            \n            tags$li(h3(' ** LOWER UIA is always better **')),\n            tags$li(h3('varies for species, size, DO, calcium, stress')),\n            tags$li(h3('0.025  mg UIA/L -- potentially toxic for sensitive species')),\n            tags$li(h3('0.050  mg UIA/L -- may be harmful with long exposure')),\n            tags$li(h3('0.088  mg UIA/L -- no effect over 96 h (Tomasso, 1994)')),\n            tags$li(h3('0.131  mg UIA/L -- no effect over 24 h (Tomasso, 1994)')),\n            tags$li(h3('2.0    mg UIA/L -- fish begin to die')),\n            tags$li(h3('(NB: This is UIA, not the TAN that you measure)'))\n            \n          )\n        ),\n        \n        tabPanel( title = 'UIA Info',\n          box(\n            width = '400px',\n            solidHeader = T,\n            status = 'primary',\n            background = 'light-blue',\n            \n            tags$li(h3('ammonia comes from feed protein')),\n            tags$li(h3('it peaks ~45 - 90 minutes after feeding')),\n            tags$li(h3('ammonia has ionized & un-ionized forms')),\n            tags$li(h3('TAN (Total Ammonia Nitrogen) is N in both')),\n            tags$li(h3('UIA (Un-Ionized Ammonia) is the more toxic')),\n            tags$li(h3('% UIA depends on pH, temp, & salinity')),\n            tags$li(h3('pH is -- by far -- the most important')),\n            tags$li(h3('HIGHER pH means a HIGHER % UIA')),\n            tags$li(h3('[% UIA] x [TAN] = [UIA]'))\n            \n          )\n        )\n      )\n    )\n  )\n}\n\n\n# ---- DISINFECTION poSto to ppm UI ----\n\npoStoToPpmStuff <- {\n  \n  fluidPage( \n  \n  fluidRow(\n    \n    column( width = 4,\n            \n            # valueBoxOutput(\n            #   \n            #   'poStoToPpmVal',\n            #   width = NULL\n            # ),    # end valueBoxOutput\n            \n            selectInput(inputId = 'disinfectUnitsTot', label = 'Volume Units to Disinfect',\n                        choices = vol.data$units, selected = 'cubic meters (m\\U00B3)'),\n            numericInput(inputId = 'totVolToDisinfect', label = 'Total Volume to Disinfect',\n                         value = 40, min = 0, max = 1000, step = 0.5),\n            hr(),\n            \n            selectInput(inputId = 'disinfectUnitsToAdd', label = 'Volume Units to Add',\n                        choices = vol.data$units, selected = 'liters (L)')\n            \n            # wellPanel(\n            #   textOutput('result')\n            # )\n            \n    ),    # end column(4)\n    \n    column( width = 8,\n            \n            box(\n              width = NULL,\n              title = 'Disinfectant Solutions',\n              solidHeader = T,\n              status = 'primary',\n              sliderInput(\"poStoSlider\", 'Stock Solution (%) -- concentration of stored solution', 1, 75, 35, 0.1),\n              hr(),\n              sliderInput(\"ppmSlider\", 'Working Solution (ppm) -- desired final concentration', 0, 500, 10, 0.5)\n              \n            )    # ---- end box\n    )    # ---- end column(8)\n  )    # ---- end fluidRow\n  \n  , fluidRow(\n    \n      box(\n        width = NULL,\n        title = \"Disinfectant \\'Recipe\\'\",\n        solidHeader = T,\n        status = 'primary',\n        htmlOutput('result'),\n        background = 'light-blue'\n      )\n    )\n  \n  \n  )    # ---- end fluidPage\n}    # ---- end poStoToPpmStuff\n",
    "created" : 1472504567113.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4240291119",
    "id" : "11FD47FE",
    "lastKnownWriteTime" : 1472575604,
    "last_content_update" : 1472575604395,
    "path" : "~/R Projects/WQ iQuaCalc Lite/bodyHTML.R",
    "project_path" : "bodyHTML.R",
    "properties" : {
        "docOutlineVisible" : "0"
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}