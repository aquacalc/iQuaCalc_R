{
    "collab_server" : "",
    "contents" : "# [Alk] module functions for\n# \"iQuaCalc (Lite) salinity module.R\"\n\n# NB: Split Layout to conform with WQ Map UI for init & target waypoints\n\n\ncaNumericModuleInput <- function(id) {\n  \n  ns <- NS(id)\n  \n  tagList(\n    \n    splitLayout(cellWidths = c('25%', '50%', '25%'),\n                \n                # numericInput(ns('ca_numeric_input'), HTML(paste0('Ca', tags$sup('++'))), \n                numericInput(ns('ca_numeric_input'), 'Ca++', \n                             min = 0, max = 600, value = 412, step = 0.1),\n                \n                selectInput(ns('caConvertUnits'), 'Ca++ Units', \n                            choices = caUnitsList),\n                \n                checkboxInput(ns('tc_show_omega_zone'), 'Show', value = F)\n                \n    )\n    \n  )\n}\n\n\n\ncaNumericModule <- function(input, output, session, \n                            icTemp, icSal, st) {\n  \n  # \"*_init\" flags when app is (re-)launched\n  rv <- reactiveValues(select_init = -1,\n                       ca_units_default = 'mg/kg',\n                       ca_sl_init = -1,\n                       ca_default = caSet\n  )\n  \n  \n  # # see: http://stackoverflow.com/questions/17227294/removing-html-tags-from-a-string-in-r\n  # #      (Scott Ritchie)\n  # # to strip HTML from icSal()\n  # cleanFun <- function(htmlString) {\n  #   return(gsub(\"<.*?>\", \"\", htmlString))\n  # }\n  \n  \n  # ---- Calcium ----\n  \n  \n  # Observe SELECT_INPUT input, store when changed\n  observeEvent(input$caConvertUnits, priority = 50, {\n    \n    if(rv$select_init < 0)  {\n      \n      x <- session$ns('caConvertUnits')\n      \n      rv$select_init <- 1\n      \n      ca_units_init <- st()[[x]]\n      \n      if(length(ca_units_init) == 0)\n        ca_units_init <- rv$ca_units_default\n      \n      # user (re-)opened app. Is store$select empty?\n      updateSelectInput(session, 'caConvertUnits', 'Ca++ Units',\n                        # choices=caUnitsList,\n                        choices  = caUnitsList,\n                        selected = ca_units_init)\n    }\n    \n    updateStore(session, session$ns(\"caConvertUnits\"), input$caConvertUnits)\n    \n    idx <- which(input$caConvertUnits == caUnitsList)\n    \n    y <- paste0(session$ns('sl_'), input$caConvertUnits)\n    \n    my_ca_value <- st()[[y]]\n    \n    if(length(my_ca_value) == 0)\n      my_ca_value <- rv$ca_default[idx]\n    \n    # updateNumericInput(session, \"ca_numeric_input\", label = caUnitsList[idx],\n    updateNumericInput(session, \"ca_numeric_input\", label = caUnitsList[idx],\n                      value = my_ca_value,\n                      min = caMin[idx], max = caMax[idx], step = caStep[idx])\n    \n    freezeReactiveValue(input, \"ca_numeric_input\")\n    \n    # update slider value for current units ???\n    updateStore(session, paste0(session$ns('sl_'), input$caConvertUnits), my_ca_value)\n    \n  })\n  \n  \n  \n  # Observe SLIDER_INPUT input, store when changed\n  observeEvent(input$ca_numeric_input, {\n    \n    if(rv$ca_sl_init < 0) {\n      \n      rv$ca_sl_init <- 1\n      \n      return()\n    }\n    \n    idx <- which(input$caConvertUnits == caUnitsList)\n    \n    y <- paste0(session$ns('sl_'), input$caConvertUnits)\n    \n    my_ca_value <- st()[[y]]\n    \n    \n    if(length(my_ca_value) == 0)\n      my_ca_value <- rv$ca_default[idx]\n    else\n      my_ca_value <- input$ca_numeric_input\n    \n    \n    # update slider value for current units\n    updateStore(session, paste0(session$ns('sl_'), input$caConvertUnits), my_ca_value)\n    \n  })\n  \n  \n  \n  df_ca <- reactive({\n    \n    idx <- which(input$caConvertUnits == caUnitsList)\n    \n    validate(\n      \n      need(try(\n        \n        input$ca_numeric_input >= caMin[idx] && \n          input$ca_numeric_input <= caMax[idx]\n      ),\n      \n      paste0('Please enter a Calcium value between ', caMin[idx], ' and ', caMax[idx]))\n    )\n    \n    req(\n      icTemp(),\n      icSal(),\n      cancelOutput = T\n    )\n    \n    my_icTemp <- icTemp()$ic\n    my_icSal  <- icSal()$ic\n    \n    \n    # @my_rho in IC Units, g/L\n    # convert to mg/L\n    my_rho <- calcRho(my_icTemp, my_icSal)      # [g/L]\n    \n    my_input_units <- input$caConvertUnits\n    my_input_val   <- input$ca_numeric_input\n    \n    \n    MW_CA <- 40.078   # [mg/mmol]\n    \n    \n    if('mg/kg' == my_input_units) {\n      my_input_val <- (my_input_val / MW_CA)\n    }\n    \n    if('mg/L' == my_input_units) {\n      my_input_val <- (my_input_val / MW_CA) / (0.001 * my_rho)\n    }\n    \n    if('mmol/kg' == my_input_units) {\n      my_input_val <- my_input_val\n    }\n    \n    if('mmol/L' == my_input_units) {\n      my_input_val <- my_input_val / (0.001 * my_rho)\n    }\n    \n    # NB: CHANGE my_input_val from mmol/L to mol/L\n    my_input_val <- my_input_val / 1000.0\n\n    # if(!is.null(my_icSal) && my_icSal != '' &&\n    #    !is.null(my_icTemp) && my_icTemp != '') {\n    #   \n    #   idx_ca <- which(input$caConvertUnits == caUnitsList)\n    #   \n    #   ic_rho <- calcRho(my_icTemp, my_icSal)\n    #   \n    #   my_rho <- ic_rho / 1000.0   # in kg/L\n    #   \n    #   icAlk <- alkToIcUnits(input$ca_numeric_input, input$caConvertUnits, my_rho)\n    #   \n    #   hidden.col <- c(rep(0, 5))\n    #   hidden.col[idx_ca] <- 1\n    #   \n    #   df <- alkToAllUnits(icAlk, my_rho)\n    #   \n    #   df <- cbind(df, h = hidden.col)\n    #   \n    #   # as in \"salinity_module.R,\" not just \"as.data.frame(df)\"\n    #   alk_list <- list(df    = df, \n    #                    ic    = icAlk,\n    #                    val   = input$ca_numeric_input,\n    #                    units = input$caConvertUnits,\n    #                    \n    #                    label        = alk_units_sec_label(),\n    #                    scale_factor = alk_units_scale_factor()\n    #                    )\n    #   \n    #   alk_list\n    # }\n    \n    # Just a test to send the state of the checkbox...\n    \n    input$tc_show_omega_zone\n    icCa <- input$ca_numeric_input\n    input$caConvertUnits\n    \n    ca_list <- list(ic                  = my_input_val,\n                    val                 = input$ca_numeric_input,\n                    units               = input$caConvertUnits,\n                    \n                    show_omega_ca_zone  = input$tc_show_omega_zone)\n  })\n  \n  \n  return(df_ca)\n  \n}",
    "created" : 1507679082405.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "335853498",
    "id" : "E6F91E63",
    "lastKnownWriteTime" : 1507650261,
    "last_content_update" : 1507650261,
    "path" : "~/Documents/Documents/R Projects/WQ_iQuaCalc_Lite_0.3/modules/ca_numeric_input_module.R",
    "project_path" : "modules/ca_numeric_input_module.R",
    "properties" : {
    },
    "relative_order" : 10,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}