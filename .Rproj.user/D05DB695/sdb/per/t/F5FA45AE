{
    "collab_server" : "",
    "contents" : "# global header for iQuacalc (Lite)\n\nsuppressMessages(library(shiny))\nsuppressMessages(library(shinydashboard))\n\nsuppressMessages(library(shinyjs))\nsuppressMessages(library(V8))      # support extendShinyjs() of shinyjs see: http://deanattali.com/2015/05/31/shinyjs-extend/\n\nsuppressMessages(library(shinyStore))\n\nsuppressMessages(library(DT))\n\n# suppressMessages(library(highcharter))  # interactive chart -- probably use ggvis instead\n# library(plotly)\n\n# library(FSA)           # for logbtcf() to correct allometric back-transformation\n\n# suppressMessages(library(car))           # for bootCase() in lw_upload_and_analyze's non-linear prediction limits\n# suppressMessages(library(propagate))     # predictNLS() in lw_upload_and_analyze's non-linear prediction limits\n\n\n# NB: dplyr's 'select()' masked by MASS loaded with propagate, \n#     so qualify as dplyr::select in converter_gasses.R\n#     UNLESS...load *after* MASS is loaded...?\nsuppressMessages(library(tidyverse))\nsuppressMessages(library(stringr))\n# library(stringi)\n# library(dplyr)         # NB: Is this installed on {shiny} server?\n# library(tidyr)         # NB: Is this installed on {shiny} server?\n# library(purrr)         # use map_df() to facilitate ggplot-ing the WQ Map family of pH isopleths\n\n\n\nsource('CarbCalc.R')\n\nsource('converters/converter.R')\nsource('converters/converter_gasses.R')\nsource('converters/validator_for_iquacalc.R')\n\nsource('modules/conversion_display_module.R')  # display conversion result of clicked table cell\n\nsource('modules/wq_map_module.R')\n\nsource('adjustReagents.R')\nsource('modal_dlgs/modal_dlg_feed.R')\n# source('www/cbToggleAntics.js')\n\nsource('modules/volume_numeric_input_module.R')\n\nsource('modules/temperature_module.R')\nsource('modules/temperature_numeric_input_module.R')\n\nsource('modules/salinity_module.R')\nsource('modules/salinity_numeric_input_module.R')\n\nsource('modules/ph_module.R')\nsource('modules/ph_numeric_input_module.R')\n\nsource('modules/alk_module.R')\nsource('modules/alk_initial_waypoint_module.R')\nsource('modules/alk_target_waypoint_module.R')\nsource('modules/alk_green_zone_module.R')\n\nsource('modules/ca_numeric_input_module.R')\n\nsource('modules/length_module_js.R')\nsource('modules/length_module_js_uioutput.R')\nsource('modules/length_module_js_uioutput_TWO.R')\n\nsource('modules/depth_module.R')\n\nsource('modules/area_module.R')\nsource('modules/volume_module.R')\n\nsource('modules/biomass_module.R')\nsource('modules/abundance_module.R')\n\nsource('modules/flow_rate_module.R')\n\nsource('modules/hydraulic_load_module.R')\n\nsource('modules/gas_sat_module_WITH_MODULES.R')\nsource('modules/barometric_module.R')\nsource('modules/barometric_numeric_module.R')\n\nsource('modules/gas_module.R')       # for O2, N2, Ar\nsource('modules/co2_gas_module.R')\nsource('modules/co2_gas_atm_module.R')\n\nsource('modules/gas_tgp_module.R')   # stand-alone TGP calc [deprecate tgp_module_WITH_MODULES.R]\nsource('modules/gas_sat_module.R')   # display O2, N2, Ar, CO2 saturation\nsource('modules/o2_duration_module.R')\n\nsource('modules/gas_conversion_module.R')\n\nsource('modules/uia_module_HC_2.R')\nsource('modules/tan_module.R')\nsource('modules/tan_conversion_module.R')\n\nsource('modules/tan_numeric_input_module.R')\nsource('modules/uia_numeric_input_module.R')\n\nsource('modules/co2_dissolved_numeric_input_module.R')  # for WQ Map\nsource('modules/co2_measured_numeric_input_module.R')   # for TGP\n\nsource('modules/disinfection_module.R')\n\nsource('modules/upload_and_analyze_lw.R')\nsource('modules/upload_and_analyze_cor.R')\n\nsource('modules/data_table_module.R')\nsource('modules/data_table_HORIZ_module.R')\nsource('modules/data_table_SPLIT_module.R')\n\nsource('modules/multiplier_module.R')\n\n\n# trying to pack conversion info for each unit conversion into a map with\n# key = string & value = list of two lists: c(xUnits, xFactors)\n# (no luck yet)\n\n# from: http://r.789695.n4.nabble.com/how-to-convert-string-to-object-td2999281.html\n# text <- 'xFactors' \n# parse(text=text) \n# f <- eval(parse(text=text))\n# f[idx]\n\n# ---- list of lists ----\n# from: http://stackoverflow.com/questions/10776742/r-how-make-list-of-lists-in-r\n# > l.1 <- list(1, 2, 3)\n# > l.2 <- list('a', 'b', 'c')\n# > L <- list(a = l.1, b = l.2)\n# > L$a\n# > L$a[2]\n\n# So...\n# vector of ordered conversion types:\n#         conversionTypes <- c('length', 'area', 'volume', 'temperatue', ... )\n# list of units and factors for each conversion type:\n#         vol = list(volUnits, volFactors)\n# conversionData <- list(length = list(lenUnits, lenFactors),\n#                        area = list(areaUnits, areaFactors), ... )\n#\n# then call conversion function with (fromVal, fromUnits, toUnits, type)\n#     where type = 'length', 'volume', etc.\n#\n# ...or...\n#\n# each conversion type (e.g., 'vol', 'temp', ...) is a list of two vectors,\n# e.g., vol <- c(volUnits, volFactors) and temp <- c(tempUnits, tempFactors)\n# then, this type (e.g., 'vol') is sent to the converter as a param, within which it is unpacked...\n#   * fromIdx <- which(fromUnits == type$units)\n#   * toIdx <- which(toUnits == type$units)\n#   * icFromVal <-  fromVal / type#factors[fromIdx]\n#   * return(icFromVal * type#factors[toIdx])\n\n\n# ---- Adjustment REAGENTS ----\n\n# define the df that relates slopes (meq/mmol) to reagents ----\n# reagents  <- c('nahco3',  'na2co3',   'naoh', \n#                'caco3',   'caoh2',    'cao', \n#                'plusCo2', 'minusCo2', 'hcl')\n# \n# cmpds     <- c('NaHCO\\u2083', 'Na\\u2082CO\\u2083', 'NaOH', \n#                'CaCO\\u2083',  'Ca(OH)\\u2082',     'CaO', \n#                '+CO\\u2082',   '-CO\\u2082',        'HCl')\n# \n# slopes    <- c(1, 2, 1000000, 2, 1000000, 1000000, 0, 0, 1000000)\n# radSlopes <- c(pi / 4, atan(2), pi / 2, atan(2), pi / 2, pi / 2, 0, pi, 3 * pi / 2)    # used to capture direction\n# sinTheta  <- round(cos(radSlopes), 6)\n# cosTheta  <- round(sin(radSlopes), 6)\n# \n# reagent.df<-data.frame(name = as.character(reagents),\n#                        cmpd = cmpds,\n#                        m    = slopes,\n#                        mRad = radSlopes,\n#                        sin  = sinTheta,\n#                        cos  = cosTheta,\n#                        \n#                        stringsAsFactors = F)\n\n# *****************\n\nnames <- c('nahco3',      'na2co3',           'naoh', 'caco3',      'caoh2',        'cao', 'plusCo2',   'minusCo2',  'hcl')\ncmpds <- c('NaHCO\\u2083', 'Na\\u2082CO\\u2083', 'NaOH', 'CaCO\\u2083', 'Ca(OH)\\u2082', 'CaO', '+CO\\u2082', '-CO\\u2082', 'HCl')\nmws   <- c(84.00661, 105.98844, 39.99711, 100.0869, 74.09268, 56.0774, 44.0096, 44.0096, 36.46094)\nmeq_mmol  <- c(1, 2, 1, 2, 2, 2, 0, 0, 1)\nslopes    <- c(1, 2, 1000000, 2, 1000000, 1000000, 0, 0, 1000000)  # NB: m for HCl *not* negative\nradSlopes <- c(pi / 4, atan(2), pi / 2, atan(2), pi / 2, pi / 2, 0, pi, 3 * pi / 2)\nsinTheta  <- round(cos(radSlopes), 6)\ncosTheta  <- round(sin(radSlopes), 6)\n\n\nreagent_data <- tibble(name      = names,\n                       cmpd      = cmpds,\n                       mw        = mws,\n                       meq_mmol  = meq_mmol,\n                       m         = slopes,\n                       mRad      = radSlopes,\n                       sin       = sinTheta,\n                       cos       = cosTheta\n)\n\n\n\n# ---- LENGTH ----\n\n# NB: for selectInput choices in 'new' (i.e., horizontal input) Length conversion\n#     user has 4 entry-units options, but 8 result units ('lengthUnits')\n# lengthUnitsChoices <- c('m', 'cm', 'mm', 'yd, ft, in')\n# lengthUnitsChoices <- c('m', 'cm', 'mm', 'yards')\n\n# lengthUnitsChoices <- c('meters', 'centimeters', 'millimeters', 'yd, ft, in' = 'yards')\n# lengthUnitsChoices <- c('m', 'cm', 'mm', 'yd, ft, in' = 'yards')\nlengthUnitsChoices <- c('m', 'cm', 'mm', 'yards')\n\n# NB: to LABEL length numericInput labels \nlengthUnitsChoices_Short <- c('meters', 'centimeters', 'millimeters', 'yards')\n\nlengthUnits <- c(\"m\", \"cm\", \"mm\",\n                 \"yd, ft, & in\",\n                 \"ft & in\",\n                 \"in\",\n                 \"yd (decimal)\", \"ft (decimal)\", \"in (decimal)\")\n\n# NB: 777.777 & 888.888 are dummy flags for a loop in converter.R/convertAll()\nlengthFactors <- c(1.0, 100.0, 1000.0,\n                   888.888,             # [KLUDGE] to tag 'yd, ft, in' units\n                   777.777,             # [KLUDGE] to tag 'ft, in' units\n                   787.878,             # [KLUDGE] to tag 'in' units\n                   1.0936133, 3.280839895, 39.37007874)\n\n# HOW ... modify for \"yd, ft, & in\" ?\nlengthMin  <- c(rep(0, 7))\nlengthMax  <- c(rep(1000, 5), 5000, 10000)\nlengthStep <- c(rep(0.1, 7))\nlengthSet  <- c(rep(1, 7))\n\nfractionalInches <- c('0', '1/16', '1/8', '3/16', '1/4',\n                      '5/16', '3/8', '7/16', '1/2',\n                      '9/16', '5/8', '11/16', '3/4',\n                      '13/16', '7/8', '15/16')\n\n# NB: Using 'lengthUnits instead of 'lengthUnitsChoices' here\n#     the former with 8 entry units for calculation & datatable display, \n#     the latter used for 4 unit choices in selectInput\nlength.data <- list(units = lengthUnits, factors = lengthFactors, icUnits = 'm')\n\n\n# ---- AREA ----\n\n# areaUnitsChoices <- c(\"ha\", \"m²\", \"cm²\", \"mm²\", \"acre\", \"ft & in\", \"yd²\", \"ft²\", \"in²\")\nareaUnitsChoices <- c(\"ha\", \"m²\", \"cm²\", \"mm²\", \"acre\", 'yd²', \"ft²\")\n\nareaUnits <- c(\"ha\",\"m²\",\"cm²\",\"mm²\",\n               \"acre\",\"yd²\",\"ft²\",\"in²\")\n               # \"acre\",\"ft & in\",\"yd²\",\"ft²\",\"in²\")\nareaFactors <- c(1.0,10000.0,100000000.0,10000000000.0,\n                 2.4710538147,11959.900463,107639.10417,15500031.0)\n                 # 2.4710538147,1.0,11959.900463,107639.10417,15500031.0)\n\nareaMin  <- c(rep(0, 7))\nareaMax  <- c(rep(1000, 5), 5000, 10000)\nareaStep <- c(rep(0.1, 7))\nareaSet  <- c(rep(1, 7))\n\narea.data <- list(units = areaUnits, factors = areaFactors, icUnits = 'ha')\n\n\n# ---- VOLUME ----\n\nvolumeUnitsChoices <- c('milliliters (ml)', 'liters (L)', 'cubic meters (m\\U00B3)',\n                        'gallons (US)', 'gallons (UK)', 'cubic feet (ft\\U00B3)', 'acre-ft')\n\nvolumeUnitsChoices_short <- c('ml', 'L', 'm\\U00B3',\n                              'gal (US)', 'gal (UK)', \n                              'ft\\U00B3', \n                              'ac-ft')\n\n# when ic volume units are LITERS, then toLiterFactors vector is...\n# toLitersFactors <- c(0.001, 1.0, 1000.0, 3.785412, 4.54609)\ntoLitersFactors <- c(1000.0, 1.0, 0.001, 0.2641720, 0.2199692, 0.035314667, 0.0000008107)\n\nvolumeUnits <- c('milliliters (ml)', 'liters (L)', 'cubic meters (m\\U00B3)',\n              'gallons (US)', 'gallons (UK)', 'cubic feet (ft\\U00B3)', 'acre-ft')\nvolumeFactors <- c(1000.0, 1.0, 0.001, 0.2641720, 0.2199692, 0.035314667, 0.0000008107)\n\nvolumeMin  <- c(rep(0, 7))\nvolumeMax  <- c(rep(10000, 7))\nvolumeStep <- c(rep(0.1, 7))\nvolumeSet  <- c(1000, 1000, 100, 3500, 3500, 500, 1)\n\nvolume.data <- list(units = volumeUnits, factors = volumeFactors, icUnits = 'liters (L)')\n\n# *** *** *** for AREA x DEPTH = VOLUME *** *** ***\n# used to switch selectInput choices conditioned on 'Area' or 'Depth' radio button\nareaOrDepthUnitsChoices <- list(Area = area.data, Depth = length.data)\n\n\n# ---- Biomass ----\n\n# added: kg/ha, kg/acre, lb/ha, lb/acre ... kg/acre-ft, lb/acre-ft\nbiomassUnits <- c('kg/m²', 'g/m²', 'lb/m²', 'lb/ft²',\n                  'kg/ha', 'kg/acre', 'lb/ha', 'lb/acre',\n                  'kg/m³', 'g/L', 'lb/gal (US)', 'lb/gal (UK)', 'lb/ft³',\n                  'kg/acre-ft', 'lb/acre-ft')\n\nbiomassFactors <- c(1.0, 1000.0, 2.2046226218, 0.20481614,\n                    10000.0, 4046.8564, 22046.226218, 8921.791,\n                    1.0, 1.0, 0.0083454044, 0.010022413, 0.062427961,\n                    1233.48, 2719.358)\n\nbiomass.data <- list(units = biomassUnits, factors = biomassFactors, icUnits = 'kg/m²')\n\n\n# ---- Abundance ----\n\nabundanceUnits <- c('ind/m²', 'ind/ft²', 'ind/ha', 'ind/acre',\n                    'ind/m³', 'ind/L', 'ind/gal (US)', 'ind/gal (UK)', \n                    'ind/ft³', 'ind/acre-ft')\n\nabundanceFactors <- c(1.0, 0.09290313, 10000, 4046.781,\n                      1.0, 0.001, 0.003785441, 0.004546074, \n                      0.02831682, 1233.502)\n\nabundance.data <- list(units = abundanceUnits, factors = abundanceFactors, icUnits = 'ind/m²')\n\n\n# ---- FLOW RATE ----\nflowRateUnitsList <- c(\"m³/d\", \"liter/d\", \"gal/d (US)\", \"gal/d (UK)\", \"ft³/d\", \"acre-ft/d\",\n                       \"m³/hr\", \"liter/hr\", \"gal/hr (US)\", \"gal/hr (UK)\", \"ft³/hr\", \"acre-ft/hr\", \n                       \"m³/min\", \"liter/min\", \"gal/min (US)\", \"gal/min (UK)\", \"ft³/min\", \"acre-ft/min\", \n                       \"m³/sec\", \"liter/sec\", \"gal/sec (US)\", \"gal/sec (UK)\", \"ft³/sec\", \"acre-ft/sec\")\n\n# (m³/day) / (m³/day), (liter/d) / (m³/day),  ...\n# toCubicMetersPerDayFactors <- c(1.0, 1000.0, 264.17205236, 219.9692483, 35.314666213, 0.00081071319218,\n#                                 0.041666666666, 41.666666666, 11.007168849, 9.1653853456, 1.4714444255, 0.000033779716341, \n#                                 0.00069444444443, 0.69444444443, 0.18345281414, 0.15275642243, 0.024524073759, 0.00000056299527233)\n\ntoCubicMetersPerDayFactors <- c(1.0,           1000.0,         264.17205236,  219.9692483,    35.314666213,    0.00081071319218, \n                                0.041666666666,  41.666666666,  11.007168849,   9.1653853456,  1.4714444255,   0.000033779716341, \n                                0.00069444444443, 0.69444444443, 0.18345281414, 0.15275642243, 0.024524073759, 0.00000056299527233,\n                                0.00001157407,    0.01157407,    0.003057547,   0.002545940,   0.0004087346,   0.000000009383255)\n\nflowUnits <- c(\"m³/d\",   \"liter/d\",   \"gal/d (US)\",   \"gal/d (UK)\",   \"ft³/d\",   \"acre-ft/d\",\n               \"m³/hr\",  \"liter/hr\",  \"gal/hr (US)\",  \"gal/hr (UK)\",  \"ft³/hr\",  \"acre-ft/hr\", \n               \"m³/min\", \"liter/min\", \"gal/min (US)\", \"gal/min (UK)\", \"ft³/min\", \"acre-ft/min\", \n               \"m³/sec\", \"liter/sec\", \"gal/sec (US)\", \"gal/sec (UK)\", \"ft³/sec\", \"acre-ft/sec\")\n\nflowFactors <- c(1.0,           1000.0,         264.17205236,  219.9692483,    35.314666213,    0.00081071319218, \n                 0.041666666666,  41.666666666,  11.007168849,   9.1653853456,  1.4714444255,   0.000033779716341, \n                 0.00069444444443, 0.69444444443, 0.18345281414, 0.15275642243, 0.024524073759, 0.00000056299527233,\n                 0.00001157407,    0.01157407,    0.003057547,   0.002545940,   0.0004087346,   0.000000009383255)\n\nflow_rate.data <- list(units = flowUnits, factors = flowFactors, icUnits = 'm³/d')\n\n\n\n# ---- HYDRAULIC LOADING ----\n\n# *** I.C. Units, #11,   1.000000 (m³/d) / m²\n\nhydraulicUnits <- c('(m³/s) / m²',   '(L/s) / m²',   '(gal (US)/s) / ft²',   '(gal (UK)/s) / ft²',   '(ft³/s) / ft²',\n                    '(m³/min) / m²', '(L/min) / m²', '(gal (US)/min) / ft²', '(gal (UK)/min) / ft²', '(ft³/min) / ft²',\n                    '(m³/hr) / m²',  '(L/hr) / m²',  '(gal (US)/hr / ft²',   '(gal (UK)/hr) / ft²',  '(ft³/hr) / ft²',\n                    '(m³/d) / m²',   '(L/d) / m²',   '(gal (US)/d) / ft²',   '(gal (UK)/d) / ft²',   '(ft³/d) / ft²')\n\nhydraulicFactors <- c(0.00001157407, 0.01157407, 0.0002840557, 0.0002365258, 0.00003797272,\n                      0.0006944444,  0.6944444,  0.01704334,   0.01419155,   0.002278363, \n                      0.04166667,   41.66667,    1.022600,     0.8514930,    0.1367018, \n                      1.0,          10.00000,   24.54241,     20.43583,      3.280843)\n\n\nhydraulic.data <- list(units = hydraulicUnits, factors = hydraulicFactors, icUnits = '(m³/d) / m²')\n\n\n\n# ---- RHO ----\n\n# rhoUnitsChoices <- c('rho_kg/L', 'g/L', 'MT/m\\U00B3', \n#                      'lb/gal (US)', 'lb/gal (UK)')\n\nrhoUnits <- c('kg/L', 'g/L', 'kg/m\\U00B3', 'MT/m\\U00B3', \n              'lb/gal (US)', 'lb/gal (UK)')\n# \"acre\",\"ft & in\",\"yd²\",\"ft²\",\"in²\")\nrhoFactors <- c(0.001, 1.0, 1.0, 0.001, \n                0.00834541126, 0.010022421)\n\nrho.data <- list(units = rhoUnits, factors = rhoFactors, icUnits = 'g/L')\n\n\n\n\n# ---- TEMPERATURE ----\n\ntempUnitsList <- c('Celcius (C)', 'Fahrenheit (F)', 'Kelvin (K)')\ntempUnitsList_short <- c('C', 'F', 'K')\n\ntempMin  <- c(    4,    39.2,  277.15)\ntempMax  <- c(   40,   105,    315)\ntempStep <- c(    0.1,   0.1,    0.01)\ntempSet  <- c(   28,    82,    301)\n\n\n\n# ---- SALINITY ----\n\nsalUnitsList <- c('parts per thousand (‰)',\n                  'conductivity: μS/cm (μmho/cm)','conductivity: S/m','conductivity: S/cm',\n                  'conductivity: mS/cm (dS/m)',\n                  # 'conductivity: mS/cm','conductivity: dS/m',\n                  # 'hydrometer: 15C/4C','hydrometer: 20C/20C',\n                  'hydrometer: 60F/60F',\n                  'hydrometer: 20C/20C','hydrometer: 77F/77F')\nsalUnitsList_short <- c('‰ (ppt)',\n                        # 'μS/cm','S/m', 'S/cm',\n                        'μS/cm (μmho/cm)','S/m', 'S/cm',\n                        # 'mS/cm',\n                        'mS/cm (dS/m)',\n                        # 'mS/cm','dS/m',\n                        # '15C/4C','20C/20C',\n                        '60F/60F',\n                        '20C/20C',\n                        '77F/77F')\n# for numeric input label in WQ Map....\nsalUnitsList_short_est <- c('‰ (ppt)',\n                            'μS/cm','S/m', 'S/cm',\n                            # 'μS/cm (μmho/cm)','S/m', 'S/cm',\n                            'mS/cm',\n                            # 'mS/cm (dS/m)',\n                            # 'mS/cm','dS/m',\n                            # '15C/4C','20C/20C',\n                            '60F/60F',\n                            '20C/20C',\n                            '77F/77F')\n\n# below: removed 15C/4C and added S/cm\n# salMin<-c(    0,      0,    0,      0,     0,  0.9900,   0.9900,   0.9900,  0.9900)\n# salMax<-c(   45,  60000,    6,     60,    60,  1.0399,   1.0399,   1.0399,  1.0399)\n# elements 6 - 9: hydrometer max w/OUT temp correction; 10 - 13, WITH temp correction;\n# salMax<-c(   45,  60000,    6,     60,    60,  1.0235,   1.0235,   1.0235,  1.0260, 1.0170, 1.0170, 1.0170, 1.0200)\n# salStep<-c( 0.1,    100, 0.01,    0.1,   0.1,  0.0001,   0.0001,   0.0001,  0.0001)\n# salSet<-c(   30,  45000,  4.5,     45,    45,  1.0100,   1.0100,   1.0100,  1.0100)\n\nsalMin<-c(     0,   5000, 0.50,   0.0050,   5.0,     0.9990,  0.9990,  0.9990)\nsalMax<-c(    40,  60000,  6.5,    0.065,    65,     1.0360,  1.0340,  1.0380)\nsalStep<-c(    0.01, 100,  0.01,   0.001,     0.1,   0.0001,  0.0001,  0.0001)\n# salStep<-c(    0.01, 100,  0.01,   0.001,     0.1,   0.0001,  0.0001,  0.0001)\nsalSet<-c(    30,  45000,  4.5,    0.045,    45,     1.0100,  1.0100,  1.0100)\n\n\n# ---- [Alk] ----\n\n# alkUnitsList <- c('meq/kg (mmol/kg)', 'meq/L (mmol/L)', \n#                   'ppm-m CaCO3 (mg/kg)', 'ppm-v CaCO3 (mg/L)', \n#                   'dKH')\n\nalkUnitsList <- c('meq/kg (mmol/kg)', 'meq/L (mmol/L)', \n                  'mg/kg CaCO3', 'mg/L CaCO3', \n                  'dKH')\n\nalkUnitsList_short <- c('meq/kg', 'meq/L',\n                        'mg/kg CaCO3', 'mg/L CaCO3',\n                        'dKH')\n\nalkMin  <- c(    0,    0,        0,       0,    0)\nalkMax  <- c(    8,    8,      450,     450,   25)\nalkStep <- c(    0.01, 0.01,     0.1,     0.1,  0.1)\nalkSet  <- c(    2.4,  2.4,    120,     120,    8.0)\n\n\n\n# ---- TAN - UIA ----\n\n# Nitrogen Constants\nNH3  <- 17.031     # g NH3/mole\nNH4  <- 18.038     # g NH4/mole\nHNO3 <- 47.01344   # g HNO3/mole\nNO3  <- 62.0049    # g NO3/mole\nHNO2 <- 47.01344   # g HNO2/mole\nNO2  <- 46.0055    # g NO2/mole\nN    <- 14.00674   # g N/mole\n\nH    <-  1.00794   # g H/mole\nO    <- 15.9994    # g O/mole\n\n\n# ammoniaUnitsList <- c('Celcius (C)', 'Fahrenheit (F)', 'Kelvin (K)')\n# ammoniaUnitsList_short <- c('C', 'F', 'K')\n\ncritUiaUnitsList <- c('μg/L', 'μg/kg', 'mg/L', 'mg/kg', \n                      'μmol/L', 'μmol/kg', 'mmol/L', 'mmol/kg')\ncritUiaMin  <- c(    0,    0,    0,      0,      0,    0,    0,      0)\ncritUiaMax  <- c(   10,   10,    0.001,  0.001,  5,    5,    5,      5)\ncritUiaStep <- c(    0.01, 0.01, 0.001,  0.001,  0.01, 0.01, 0.01,   0.01)\ncritUiaSet  <- c(    0.02, 0.02, 0.025,  0.025,  0.02, 0.02, 0.025,  0.025)\n\ntanUiaMin  <- c(rep(0, 36))\ntanUiaMax  <- c(   10,   10,    100,  100,  150,    150, 5,      5)\ntanUiaStep <- c(    0.01, 0.01, 0.001,  0.001,  0.01, 0.01, 0.01,   0.01)\ntanUiaSet  <- c(    0.02, 0.02, 0.025,  0.025,  0.02, 0.02, 0.025,  0.025)\n\n\n# IC Units: 'mg/L TA-N'\ntanUnitsList <- c('mg/L TA-N',   'mg/kg TA-N',\n                  'mmol/L TA-N', 'mmol/kg TA-N',\n                  'μg/L TA-N',   'μg/kg TA-N',\n                  'μmol/L TA-N', 'μmol/kg TA-N',\n                  \n                  'mg/L UIA-N',   'mg/kg UIA-N',\n                  'mmol/L UIA-N', 'mmol/kg UIA-N',\n                  'μg/L UIA-N',   'μg/kg UIA-N',\n                  'μmol/L UIA-N', 'μmol/kg UIA-N',\n                  # 'mg/L IA-N', 'mg/kg IA-N',\n                  # 'μg/L IA-N', 'μg/kg IA-N',\n                  # 'mmol/L IA-N', 'mmol/kg IA-N'\n                  \n                  'mg/L TA',   'mg/kg TA',\n                  'mmol/L TA', 'mmol/kg TA',\n                  'μg/L TA',   'μg/kg TA',\n                  'μmol/L TA', 'μmol/kg TA',\n                  \n                  'mg/L UIA',   'mg/kg UIA',\n                  'mmol/L UIA', 'mmol/kg UIA',\n                  'μg/L UIA',   'μg/kg UIA',\n                  'μmol/L UIA', 'μmol/kg UIA'\n                  # 'mg/L IA', 'mg/kg IA',\n                  # 'μg/L IA', 'μg/kg IA',\n                  # 'mmol/L IA', 'mmol/kg IA'\n                  )\n\ntanUnitsMin  <- c(rep(0, 32))\ntanUnitsMax  <- c(5, 5, 0.35, 0.35,  150,  150,  5.0,  5.0,    \n                  3, 3, 0.20, 0.20,   40,   40,  2.0,  2.0,    \n                  # 3, 3,  80,  80, 0.20, 0.20,\n                  \n                  6, 6, 0.40, 0.40,  160, 160, 4.0,  4.0,    \n                  3, 3, 0.20, 0.20,   40,  40, 3.0,  3.0    \n                  # 3, 3,  80,  80, 0.20, 0.20\n                  )\ntanUnitsStep <- c(0.01, 0.01, 0.001, 0.001, 0.1, 0.1, 0.01, 0.01, \n                  0.01, 0.01, 0.001, 0.001, 0.1, 0.1, 0.01, 0.01,\n                  # 0.001, 0.001, 0.1, 0.1, 0.01, 0.01,\n                  \n                  0.01,  0.01, 0.001, 0.001,  0.1, 0.1, 0.01, 0.01,\n                  0.01,  0.01, 0.001, 0.001,  0.1, 0.1, 0.01, 0.01\n                  # 0.001, 0.001, 0.1, 0.1, 0.01, 0.01\n                  )\ntanUnitsSet  <- c(0.25, 0.25, 0.2, 0.2, 120, 120, 1.5, 1.5,\n                  0.25, 0.25, 0.1, 0.1, 12, 12, 2.0, 2.0,\n                  # 1, 1, 10, 10, 0.1, 0.1,\n                  \n                  0.25, 0.25, 0.2, 0.2, 100, 100, 1.5, 1.5,\n                  0.25, 0.25, 0.1, 0.1, 12, 12, 2.0, 2.0\n                  # 1, 1, 10, 10, 0.1, 0.1\n                  )\n\n# following used in uia_numeric_input_module.R to support wq_map_module.R\n\nuiaUnitsList <- c('mg/L UIA-N',   'mg/kg UIA-N',\n                  'mmol/L UIA-N', 'mmol/kg UIA-N',\n                  'μg/L UIA-N',   'μg/kg UIA-N',\n                  'μmol/L UIA-N', 'μmol/kg UIA-N',\n                  \n                  'mg/L UIA',   'mg/kg UIA',\n                  'mmol/L UIA', 'mmol/kg UIA',\n                  'μg/L UIA',   'μg/kg UIA',\n                  'μmol/L UIA', 'μmol/kg UIA'\n)\n\nuiaUnitsMin  <- c(rep(0, 16))\nuiaUnitsMax  <- c(3, 3, 0.20, 0.20,   40,   40,  2.0,  2.0,    \n                  3, 3, 0.20, 0.20,   40,   40,  3.0,  3.0 \n)\nuiaUnitsStep <- c(0.01, 0.01, 0.001, 0.001, 0.1, 0.1, 0.01, 0.01,\n                  0.01, 0.01, 0.001, 0.001,  0.1, 0.1, 0.01, 0.01\n)\nuiaUnitsSet  <- c(0.25, 0.25, 0.1, 0.1, 15, 15, 2.0, 2.0,\n                  0.25, 0.25, 0.1, 0.1, 12, 12, 2.0, 2.0\n)\n\n\n# Ca++ ----\n# see: http://www.advancedaquarist.com/2002/3/chemistry\n\n# typical SW...\n# 10.3 mM, 0.412 g/kg\n\ncaUnitsList <- c('mg/kg', 'mg/L', 'mmol/kg', 'mmol/L')\n\ncaMin  <- c(rep(0, 4))\ncaMax  <- c(600, 600, 15, 15)\ncaStep <- c(rep(0.1, 4))\ncaSet  <- c(412, 412, 10.3, 10.3)\n\n\n\n# ---- CHOICES to populate wq_state_module.R ----\n\n# c('rho-kg/L', 'g/L', 'MT/m\\U00B3', 'lb/gal (US)', 'lb/gal (UK)')\nwqStateChoices_rho <- rhoUnits\nwqStateChoices_ionic_strength <- c('mol/kg-H2O (molal)')\nwqStateChoices_uia_posto <- c('%')\nwqStateChoices_borate <- c('borate-kg/L', 'g/L', 'g/kg', 'lb/gal (US)')\n\n\n\n# ---- BAROMETRIC Pressure ----\n\nbarometricUnitsList <- c('atm', 'mm Hg (torr)', 'mbar', 'kPa',\n                         'km', 'm', 'ft')\n\nbarometricUnitsList_short <- c('atm', 'mm Hg', 'mbar', 'kPa',\n                               'km', 'm', 'ft')\n\nbarometricChoices <- list(Pressure=barometricUnitsList[1:4],\n                          'by Altitude'=barometricUnitsList[5:7])\n\n\n# Barometric pressure range (see: https://water.usgs.gov/software/DOTABLES/)\n# 380-836 mm Hg, 14.97-32.91 in Hg, 507-1114 mbar, 51-112 kPa, or 0.5-1.1 atm\n\n\n# barometricMin<-c(1, 760, 1015, 102,\n#                  0, 0, 0)\n# barometricMax<-c(0.8, 600, 800, 80,\n#                  1.8, 1800, 6000)\nbarometricMin<-c(0.5, 380, 510, 50,\n                 0, 0, 0)\nbarometricMax<-c(1.1, 830, 1115, 115,\n                 4.0, 4000, 13000)\nbarometricStep<-c(0.01, 1, 1, 0.1,\n                  0.1, 1, 1)\nbarometricSet<-c(1, 760, 1013.25, 101.325,\n                 0, 0, 0)\n\n\n# ---- GAS Calc Data ----\n\n# MAX Values...\n# > calcGasAllUnits('O2', 2080, 'μmol/kg', 273.15 + 40, 0)\n# O2 :  31.9988  &  22.3924 \n# vals        units\n# 1     65.002        mg/kg\n# 2     66.040         mg/L\n# 3    2080.00      μmol/kg\n# 4    2063.82       μmol/L\n# 5       2.08      mmol/kg\n# 6       2.06       mmol/L\n# 7    46.2139         mL/L\n# 8     2.0009          atm\n# 9  1520.6740 mm Hg (torr)\n# 10 2027.3986         mbar\n# 11   29.4050          psi\n# 12   59.8691        in Hg\n# 13  813.9748       in H2O\n\ngasUnitsListPref <- c('atm', 'mm Hg (torr)', 'mg/L', 'mL/L', \"μmol/kg\", \n                      'mg/kg', 'mL/kg',\n                      'mbar', 'psi', 'in Hg', 'in H2O',\n                      \"μmol/L\", \"mmol/kg\", \"mmol/L\")\n\ngasUnitsListPref_short <- c('atm', 'mm Hg', 'mg/L', 'mL/L', \"μmol/kg\", \n                            'mg/kg', 'mL/kg',\n                            'mbar', 'psi', 'in Hg', 'in H2O',\n                            \"μmol/L\", \"mmol/kg\", \"mmol/L\")\n\n\ngasChoices <- list(Preferred=gasUnitsListPref[1:5],\n                   'Mass & Volume'=gasUnitsListPref[6:7],\n                   Pressure=gasUnitsListPref[8:11],\n                   Moles=gasUnitsListPref[12:14])\n\n\ngasMin <- c(     0, 0, 0, 0, 0, 0,  \n                 0, 0, \n                 0, 0,\n                 0, 0, 0, 0)\ngasMax <- c(    0.3, 240.0, 12.0, 8.0, 360.0,\n                12.0, 8.0,\n                300.0, 4.0,\n                10.0, 120.0, 360.0, 0.4, 0.4)\n# gasMax <- c(    1.5, 1200, 60, 40, 1800,  # for PURE O2\n#               60, 40, \n#               1500, 20, 50, 600,\n#               1800, 2, 2)\ngasStep <- c(    0.01, 0.1, 0.01, 0.01, 0.1, \n                 0.01, 0.01, \n                 0.1, 0.01, 0.01, 0.1, \n                 0.1, 0.01, 0.01)\ngasSet <- c(    0.20, 150, 7.5, 5.25, 230,  \n                7.5, 5.25, \n                200, 3, 6, 80,\n                230, 0.23, 0.23)\n\n\n# ** all gas constants at STP\nMW_CO2  <- 44.0095             # g/mol\nMV_CO2  <- 22.26289            # L/mol\n# RHO_CO2 <- 1.976810            # g/L\nRHO_CO2 <- 1.97678             # g/L\nMFV_CO2 <- 0.000400            # atmospheric mole fraction by volume (unitless)\n\nMW_O2  <- 31.998               # g/mol, mg/mol\nMV_O2  <- 22.392               # or 22.3916 L/mol, mL/mmol (\"real\", not \"ideal\")\n# RHO_O2 <- 1.42900269734374     # g/L\nRHO_O2 <- 1.42899              # g/L\nMFV_O2 <- 0.20946              # atmospheric mole fraction by volume (unitless)\n\nMW_N2  <- 28.014               # g/mol\nMV_N2  <- 22.404               # L/mol (\"real\", not \"ideal\") from Hamme & Emerson (2004), p. 1526\n# RHO_N2 <- 1.25037493304767     # g/L\nRHO_N2 <- 1.25040              # g/L\nMFV_N2 <- 0.78084              # atmospheric mole fraction by volume (unitless)\n\nMW_AR  <- 39.948               # g/mol\nMV_AR  <- 22.393               # L/mol (\"real\", not \"ideal\")\n# RHO_AR <- 1.78395034162461     # g/L\nRHO_AR <- 1.78395              # g/L\nMFV_AR <- 0.00934              # atmospheric mole fraction by volume (unitless)\n\n\nreal_gas_vals <- data.frame(code = c('mw', 'mv', 'rho', 'χ atm'), \n                            CO2 = c(MW_CO2, MV_CO2, RHO_CO2, MFV_CO2), \n                            O2 = c(MW_O2, MV_O2, RHO_O2, MFV_O2),\n                            N2 = c(MW_N2, MV_N2, RHO_N2, MFV_N2), \n                            Ar = c(MW_AR, MV_AR, RHO_AR, MFV_AR), \n                            # CO2 = c(44.0095, 22.26289, 1.976810, 0.000400), \n                            # O2 = c(31.9988, 22.3924, 1.42900269734374, 0.209476),\n                            # N2 = c(28.0134, 22.404, 1.25037493304767, 0.78084), \n                            # Ar = c(39.948, 22.393, 1.78395034162461, 0.00934),  \n                            units = c('g/mol', 'L/mol', 'g/L', '-'), \n                            \n                            stringsAsFactors = F)\n\n# Garcia & Gordon (2004), L&O 37: 1307\nsat_coefs <- data.frame(code = c(rep('a', 6), rep('b', 4), 'c'), \n                        O2 = c(5.80871, 3.20291, 4.17887, 5.10006, -0.0986643, 3.80369, -0.00701577, 0.00770028, -0.0113864, -0.00951519, -2.75915), \n                        N2 = c(6.42931, 2.92704, 4.32531, 4.69149,  0.0,       0.0,     -0.00744129, 0.00802566, -0.0146775,  0.0,         0.0), \n                        Ar = c(2.79150, 3.17609, 4.13116, 4.90379,  0.0,       0.0,     -0.00696233, 0.00766670, -0.0116888,  0.0,         0.0), \n                        \n                        stringsAsFactors = F)\n\n\n# ---- TGP Calc Data ----\n\ntgpUnitsList <- c(    '%',\n                  'Δ atm', 'Δ mm Hg (torr)', 'Δ mbar',\n                    'atm',   'mm Hg (torr)',   'mbar')\n\ntgpUnitsList_short <- c(    '%',\n                        'Δ atm', 'Δ mm Hg', 'Δ mbar',\n                          'atm',   'mm Hg',   'mbar')\n\n\ntgpChoices <- list(                  tgpUnitsList[1],\n                   'Δ Pressure'    = tgpUnitsList[2:4],\n                   'Total Pressure'= tgpUnitsList[5:7])\n\n\ntgpMin<-c(0, \n          -1, -600, 0,\n          0, 0, 0)\ntgpMax<-c(150,  \n          1, 700, 2,\n          1.5, 1200, 60)\ntgpStep<-c(0.1, \n           0.1, 0.1, 0.1,\n           0.1, 0.1, 0.1)\ntgpSet<-c(100, \n          7.5, 5.25, 0.23,\n          0.20, 150, 7.5)\n\n\n\n# # --- O2 Tank Duration ----\n\n# • D Tank = 0.16   (4\" x 16\")\n# • E Tank = 0.28   (4\" x 26\")\n# • G Tank = 2.41   (8\" x 36\")\n# • H/K Tank = 3.14 (9\" x 52\")\n# • M tank = 1.56\n\npureO2TankSizes   <- c('D (4\" x 16\")', 'E (4\" x 26\")', 'G (8\" x 36\")', 'H/K (9\" x 52\")')\npureO2TankFactors <- c(0.16, 0.28, 2.41, 3.14, 1.56)\n\n# for pressure select input in o2_duration_module.R\n# 'atm', 'mm Hg (torr)', 'mbar', 'psi', 'in Hg'\n\npureO2PressureUnitsList <- c('atm', 'mm Hg (torr)', 'mbar', 'psi', 'in Hg')\n\n# see: http://www.onlineconversion.com/pressure.htm\npureO2PressureMin     <- c(rep(0, 5))\n# pureO2PressureMax     <- c(142.89650984, 108601.34062, 144789.90288, 2100, 4275.6433809)\npureO2PressureMax     <- c(142, 108600, 144790, 2100, 4275)\npureO2PressureStep    <- c(1, 100, 100,   10, 10)\npureO2PressureSet     <- c(100, 77500, 103000, 1500, 3050)\n\npureO2FlowRateUnitsList <- c('liter/min', 'liter/hr')\npureO2FlowRateMin     <- c(rep(0, 2))\npureO2FlowRateMax     <- c(20, 120)\npureO2FlowRateStep    <- c(0.1, 1)\npureO2FlowRateSet     <- c(2, 50)\n\n# now, only \"liters (L)\"\nloxVolumeUnitsList <- c('liters (L)', 'cubic feet (ft\\U00B3)')\n\nloxVolumeMin     <- c(0, 0)\nloxVolumeMax     <- c(200, 10)\nloxVolumeStep    <- c(1, 0.1)\nloxVolumeSet     <- c(120, 6)\n\nloxFlowRateUnitsList <- c('liter/min', 'liter/hr')\nloxFlowRateMin     <- c(rep(0, 2))\nloxFlowRateMax     <- c(20, 120)\nloxFlowRateStep    <- c(0.1, 1)\nloxFlowRateSet     <- c(2, 50)\n\n\n\n\n# # --- CO2 - dissolved ----\n\n# for max CO2 = 100 mg/L ...\n# > calcGasAllUnits('CO2', 100, 'mg/L', 40 + 273.15, 0)\n# vals        units\n# 1   0.0959          atm\n# 2  72.8611 mm Hg (torr)\n# 3  100.000         mg/L\n# 4  50.5866         mL/L\n# 5  2290.05      μmol/kg\n# 6  100.784        mg/kg\n# 7  50.9832        mL/kg\n# 8  97.1402         mbar\n# 9   1.4089          psi\n# 10  2.8685        in Hg\n# 11 39.0005       in H2O\n# 12 2272.24       μmol/L\n# 13  2.2901      mmol/kg\n# 14  2.2722       mmol/L\n\nco2DissolvedChoices <- c('mg/L', 'mg/kg', \n                         'mmol/L', 'mmol/kg', \n                         'μmol/L', 'μmol/kg',\n                         'mm Hg (torr)', 'atm')\n\nco2DissolvedChoices_short <- c('mg/L', 'mg/kg', \n                               'mmol/L', 'mmol/kg', \n                               'μmol/L', 'μmol/kg',\n                               'mm Hg', 'atm')\n\nco2_dissolvedMin  <- c(rep(0, 8))\nco2_dissolvedMax  <- c(100, 100, 2.3, 2.3, 2300, 2300, 75, 0.10)\n# co2_dissolvedMax  <- c(rep(100, 8))\nco2_dissolvedStep <- c(0.1, 0.1, 0.01, 0.01, 1, 1, 0.1, 0.001)\nco2_dissolvedSet  <- c(10, 10, 0.23, 0.23, 230, 230, 7.5, 0.01)\n\n\n\n# # --- CO2 - atmospheric ----\n\nco2UnitsList <- c('μatm', \"μmol/mol\", 'ppmv', '%')\n\nco2UnitsList_with_micro <- c('micro-atm', \"micro-mole/mole\", 'ppmv', '%')\n\nco2_gasChoices <- list(co2UnitsList[1],\n                       co2UnitsList[2],\n                       co2UnitsList[3],\n                       co2UnitsList[4])\n\n# co2_gasChoices <- list('Partial Pressure'=co2UnitsList[1],\n#                        'Mole Fraction'=co2UnitsList[2],\n#                        'Mixing Ratio'=co2UnitsList[3])\n\n\nco2_gasMin  <- c(rep(300, 3), 0)\nco2_gasMax  <- c(rep(1000, 3), 0.1)\nco2_gasStep <- c(rep(1, 3), 0.0001)\nco2_gasSet  <- c(rep(404, 3), 0.0404)\n\n\n\n# # --- Bunsen Coefficients ----\n# using the solubility coefficients of \n# Weiss, R. F. from \"The Solubility of N2, O2, and Ar in Water and Seawater\", \n# Deep-Sea Research, Vol. 17, pp. 721-735, 1970.\n\nbunsen_coefs <- data.frame(code = c(rep('a', 3), rep('b', 3)), \n                           O2 = c(-58.3877, 85.8079, 23.8439, -0.034892, 0.015568, -0.0019387),\n                           N2 = c(-59.6274, 85.7661, 24.3696, -0.051580, 0.026329, -0.0037252),\n                           Ar = c(-55.6578, 82.0262, 22.5929, -0.036267, 0.016241, -0.0020114),\n                           stringsAsFactors = F)\n\n",
    "created" : 1498147986528.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3174332005",
    "id" : "F5FA45AE",
    "lastKnownWriteTime" : 1507597673,
    "last_content_update" : 1507597673677,
    "path" : "~/Documents/Documents/R Projects/WQ_iQuaCalc_Lite_0.3/global.R",
    "project_path" : "global.R",
    "properties" : {
        "docOutlineVisible" : "1"
    },
    "relative_order" : 6,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}