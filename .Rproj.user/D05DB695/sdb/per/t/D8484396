{
    "collab_server" : "",
    "contents" : "# TEST to understand Ω, calcite & aragonite saturation\n\nsource(CarbCalc.R)\n\n\ntemp_in_celcius <- 28\nic_temp         <- 273.15 + temp_in_celcius\n\nic_sal          <- 35\n\ncalcium_mg_L <- 412.0\n\n# NB: check, as quick-and-dirty conversion for only one unit, moles/kg\nic_ca <- convertCaToMolesPerKg(calcium_mg_L, ic_temp, ic_sal)\n  \n# ASSUME omega_calcite = 1.0 (i.e., saturation)\nomega_calcite <- 1.0\n\n\nrun_a_test <- function(ic_temp, ic_sal, ic_ca, omega_calcite) {\n  \n  # with T, S, [Ca++], & omega constant, this computes the constant [CO3--]\n  co3_crit_in_moles_per_kg <- calcKspCa(ic_temp, ic_sal) * omega_calcite / ic_ca\n  \n  dic_start <- 0.0001\n  dic_max   <- 0.0050\n  dic_step  <- 0.0001\n  \n  # NB: No conversion from NBS here, so assume Total Scale\n  my_ph <- 7.5\n  \n  dic_vec <- c()\n  alk_vec <- c()\n  \n  for(dic in seq(dic_start, dic_max, dic_step)) { \n    \n    my_co3 <- calcCO3(dic, ic_temp, ic_sal, my_ph)\n    \n    # NB: returns GRAMS/KG-SOLN, so divide by molecular mass\n    my_co2 <- calcCo2OfDic(dic, ic_temp, ic_sal, my_ph) / 44.0096\n    \n    co3_to_crit_co3 <- my_co3 / co3_crit_in_moles_per_kg\n    \n    my_alk <- calcAlkOfDicPhTempSal(dic, my_ph, ic_temp, ic_sal)\n    \n    # the critical pH at T, S, DIC, [Ca++] when omega (calcite) = 1.0\n    # pH on TOTAL SCALE, no?? [check]\n    crit_ph  <- calc_ph_omega_ca_given_dic(dic, ic_ca, ic_temp, ic_sal)\n    \n    crit_alk <- calcAlkOfDicPhTempSal(dic, crit_ph, ic_temp, ic_sal)\n    \n    dic_vec <- c(dic_vec, dic)\n    alk_vec <- c(alk_vec, crit_alk)\n    \n    cat('DIC       = ', dic, ' mol/kg \\n')\n    cat('[Alk]     = ', crit_alk, ' mol/kg \\n')\n    cat('pH        = ', crit_ph, ' (Total Scale?) \\n')\n    cat('[CO3--]   = ', calcCO3(dic, ic_temp, ic_sal, crit_ph), ' (', co3_crit_in_moles_per_kg, ') mol/kg \\n')\n    cat('Ω-calcite = ', calcOmegaCa(dic, ic_ca, ic_temp, ic_sal, crit_ph), ' \\n\\n')\n    \n    # cat('[CO3] = ', my_co3, '(', co3_crit_in_moles_per_kg, '), [CO2] = ', \n    #     my_co2, ' mol/kg, [Alk] = ',  my_alk, 'mol/kg \\n\\n')\n    # my_co2, ' mol/kg (',  100 * my_co2 / dic, '% CO2) \\n\\n')\n    \n  }\n  \n  plot(dic_vec, alk_vec)\n  \n}  # END run_a_test()\n\n\n\n# simulate calcOmegaCa(dic, ca, t, s, ph) ----\n# to get pH that makes omega-calcite = 1.0 for range of DIC\n# then calculate corresponding [Alk]\n\n# 3. store DIC & pH\n# 4. increment DIC and repeat\n# 5. after end, use DIC & pH to calc corresponding [Alk]\n# 6. plot [Alk] vs. DIC\n# 7. check that, at each point, Omega ~= 1 AND [CO3--] is constant at\n\n\n# NB: the minimum set DIC cannot be less than the calculated [CO3--]\n# i.e., DIC = [CO2] + [HCO3-] + [CO3--], so, at most, DIC == [CO3--],\n# and that at very high, very \"un-aquaculturish\" pH.\n# How to incorporate this into this code to avoid having the 'while' loop blow up...?\n# ...[CO3--] <- calcCO3(dic, ic_temp, ic_sal, ph)\n# ...if [CO3--] == DIC, then alpha_two(t, s, ph) == 1...\n# ...so, the ph that makes alpha_two == 1 sets the lower bound for dic_min...??\n# ...TRUE, but how does that help here?\n# ...is this will be reflected in omega_test (below) as follows:\n# ...omega_test <- calcOmegaCa(dic, ic_ca, ic_temp, ic_sal, ph_test)...?\n#\n\n# PROBLEM illustrated with the output below...\n# [CO3--] is, essentially, ALL of DIC, which throws off this digital calc\n\n# > sim_omega_calcite_saturation(30 + 273.15, 40, 0.000202, omega_calcite = 1.0)\n# \n# ph_test =  9.5 \n# omega_test =  0.03975888 \n# dic =  1e-04 \n# [CO3--] =  9.983333e-05  mol/kg \n# NEW ph_min =  9.5 \n# NEW ph_max =  14 \n# \n# ph_test =  11.75 \n# omega_test =  0.03982027 \n# dic =  1e-04 \n# [CO3--] =  9.998748e-05  mol/kg \n# NEW ph_min =  11.75 \n# NEW ph_max =  14 \n# :\n# :\n# :\n# ph_test =  13.9989 \n# omega_test =  0.03982488 \n# dic =  1e-04 \n# [CO3--] =  9.999906e-05  mol/kg \n# NEW ph_min =  13.9989 \n# NEW ph_max =  14 \n# \n# ph_test =  13.99945 \n# omega_test =  0.03982488 \n# dic =  1e-04 \n# [CO3--] =  9.999906e-05  mol/kg \n# NEW ph_min =  13.99945 \n# NEW ph_max =  14 \n# \n# ph_test =  13.99973 \n# \n# EXIT!!!\n#   NULL\n\n\nsim_omega_calcite_saturation <- function(ic_temp, ic_sal, ic_ca, omega_calcite = 1.0) {\n  \n  dic_vec <- c()\n  alk_vec <- c()\n\n  dic_min  <- 0.000000\n  dic_max  <- 0.005000\n  dic_step <- 0.00005\n  \n  tol <- 10^(-6)\n  \n  # 1. choose a DIC (in mol/kg)\n  # dic <- 0.0010\n  for(dic in seq(dic_min, dic_max, dic_step)) {\n    \n    # 2. within pH range [5, 14], find pH that makes calcOmegaCa = 1.0 with tolerance 10^-5\n    ph_min <-  5.0\n    ph_max <- 14.0\n    \n    ph_test <- (ph_min + ph_max) / 2\n    \n    # NB: if calcCO3(dic, ic_temp, ic_sal, ph) ~== dic, while-loop fails ----\n    # so, calc practical minimum DIC\n    omega_test <- calcOmegaCa(dic, ic_ca, ic_temp, ic_sal, ph_test)\n    \n    \n    # while(abs(omega_test - 1.0) > tol) {\n    while(abs(omega_test - omega_calcite) > tol) {\n      \n      alk <- calcAlkOfDic(dic, ph_test, ic_temp, ic_sal)\n      # cat('   ph_test = ', ph_test, '\\n')\n      \n      if(abs(ph_max - ph_min) < 0.001) {\n        # cat('\\nEXIT!!!\\n')\n        break()\n      }\n      \n      # if last calculated Ω too high, then lower pH\n      # if(omega_test >= 1.0) {\n      if(omega_test >= omega_calcite) {\n        \n        ph_max <- ph_test\n        \n      } else {\n        \n        ph_min <- ph_test\n      }\n      \n      ph_test <- (ph_min + ph_max) / 2\n      \n      omega_test <- calcOmegaCa(dic, ic_ca, ic_temp, ic_sal, ph_test)\n      \n      # cat('omega_test = ', omega_test, '\\n')\n      # cat('       dic = ', dic, '\\n')\n      # cat('   [CO3--] = ', calcCO3(dic, ic_temp, ic_sal, ph_test), ' mol/kg \\n')\n      # cat('NEW ph_min = ', ph_min, '\\n')\n      # cat('NEW ph_max = ', ph_max, '\\n\\n')\n      \n      # cat('       alk = ', alk, '\\n')\n      \n      # cat('omega_test = ', omega_test, ' \\n')\n      # cat('   ph_test = ', ph_test, ' \\n\\n')\n    }\n    \n    alk <- calcAlkOfDic(dic, ph_test, ic_temp, ic_sal)\n    \n    # cat('      DIC = ', dic, ' mol/kg \\n')\n    # cat('    [Alk] = ', alk, ' mol/kg \\n')\n    # cat('   pH     = ', ph_test, ' \\n')\n    # cat('[CO3--]   = ', calcCO3(dic, ic_temp, ic_sal, ph_test), 'mol/kg \\n')\n    # cat('        Ω = ', omega_test, ' \\n\\n')\n    \n    dic_vec <- c(dic_vec, dic)\n    alk_vec <- c(alk_vec, alk)\n    \n  }\n  \n  dic_vec <- c(dic_vec, dic) * 10^3\n  alk_vec <- c(alk_vec, alk) * 10^3\n  \n  dic_min <- dic_min * 10^3\n  dic_max <- dic_max * 10^3\n  \n  # plot(dic_vec, alk_vec, \n  #      type = 'l', \n  #      main = 'Ω-calcite == 1.0',\n  #      xlim = c(dic_min, dic_max),\n  #      ylim = c(dic_min, dic_max),\n  #      xlab = 'DIC [mmol/kg]',\n  #      ylab = 'Alkalinity [meq/kg]') \n  \n  \n  omega_ca_tbl <- tibble(dic = dic_vec,\n                         alk = alk_vec)\n  \n  \n  # NB: to properly scale ggplot's representation of [Alk],\n  # must impose a rule that mutates computed alk so that if/when it exceeds dic_max,\n  # extremely high values (such as 6000 meq/kg) are reduced to...dic_max??\n  \n  # omega_ca_tbl_filtered <- omega_ca_tbl %>% filter(alk <= dic_max)\n  omega_ca_tbl_filtered <- omega_ca_tbl\n  # %>% mutate(alk_2 = ifelse(alk > dic_max, Inf, alk))\n  \n  # print(omega_ca_tbl_filtered %>% summarise_if(is.numeric, funs(min, max)))\n  \n  \n  # HOW TO FILL ?? ----\n  # see: http://t-redactyl.io/blog/2016/03/creating-plots-in-r-using-ggplot2-part-9-function-plots.html\n  # cubeFun <- function(x) {\n  #   x^3 * 0.5\n  # }\n  # \n  # quadFun <- function(x) {\n  #    x^2 + 20\n  # }\n  \n  # fill the whole Megillah\n  # full_fill <- tibble(x = c(-4, -4, 4, 4),\n  #                     y = c(0, Inf, Inf, 0))\n  \n  # fill a very rough \"omega = 1\" polygon\n  # rough_fill <- tibble(x = c(omega_ca_tbl$dic[1], omega_ca_tbl$dic[252], omega_ca_tbl$dic[126], omega_ca_tbl$dic[1]),\n  #                      y = c(omega_ca_tbl$alk[1], omega_ca_tbl$alk[252], omega_ca_tbl$alk[126], omega_ca_tbl$alk[1]))\n  # \n  # print(length(omega_ca_tbl$dic))\n\n  # p9 <- ggplot(data.frame(x = c(-4, 4)), aes(x = x)) + \n  #       geom_line(linetype=\"dotted\", color=\"red\", size=2) +\n  #       \n  #   # geom_polygon(data = full_fill,  aes(x = x, y = y), fill = \"lightblue\", alpha = 0.4, color = 'black') +\n  #   # geom_polygon(data = rough_fill, aes(x = x, y = y), fill = \"red\", alpha = 0.5)\n  # # + ylim(c(0, dic_max))\n  #   # stat_function(fun = quadFun, geom = \"area\", fill = \"lightgrey\", alpha = 1.0, color = 'black')\n  # p9\n  \n  \n  # ANNOTATION -- how to place it when display omega = 1...\n  #  find min [Alk]\n  min_alk     <- min(omega_ca_tbl_filtered$alk)\n  min_alk_idx <- which(omega_ca_tbl_filtered$alk == min_alk)\n  min_dic     <- omega_ca_tbl_filtered$dic[min_alk_idx]\n  delta <- dic_max - min_alk   # Use DIC_max, as alk_max set to dic_max\n  \n  min_dic_translated_idx <- min_alk_idx + 20\n  min_dic_start <- omega_ca_tbl_filtered$dic[min_dic_translated_idx]\n  min_alk_start <- omega_ca_tbl_filtered$alk[min_dic_translated_idx]\n  \n  cat('                  min_alk = ', min_alk, '\\n')\n  cat('              min_alk_idx = ', min_alk_idx, '\\n')\n  cat('                  min_dic = ', min_dic, '\\n')\n  cat('delta (min alk - max alk) = ', delta, '\\n')\n  \n  #  if length_of_annotation_text <= min(alk), then add annotation at [x_of_min_alk + something, min(alk) + ...]\n  \n  \n  print(omega_ca_tbl)\n  \n  \n  omega_ca_tbl_filtered %>% ggplot() +\n                            # geom_line(aes(x = dic, y = alk, color = 'blue'), linetype = 'dashed') +\n                            geom_line(aes(x = dic, y = alk), linetype = 'dashed', color = 'blue') +\n                            # geom_path(linetype = 'dashed', color = 'blue', size = 1) +\n    \n                            coord_cartesian(xlim = c(0, dic_max), \n                                            ylim = c(0, dic_max),\n                                            expand = F) +\n    \n                            scale_color_discrete(name = \"Ω\", labels = c(paste0('Ω = ', omega_calcite))) +\n  \n                            annotate(geom = \"text\", \n                                     x = min_dic_start, \n                                     y = min_alk_start * 1.25, \n                                     # y = min_alk_start * 1.75, \n                                     label = \"Ω > 1\", angle = 50) +\n    \n                            annotate(geom = \"text\", \n                                     x = min_dic_start, \n                                     y = min_alk_start * 0.75, \n                                     # y = min_alk_start * 1.75, \n                                     label = \"Ω < 1\", angle = 50)\n  \n                          # geom_density(aes(x = dic, y = alk, fill = 'blue'))\n                          # polygon(aes(fill = 'blue'))\n  \n  # omega_ca_tbl_filtered %>% ggplot(aes(dic, alk)) + geom_raster(aes(fill = density))\n  # # Don't know how to automatically pick scale for object of type function. Defaulting to continuous.\n  # # Error in (function (..., row.names = NULL, check.rows = FALSE, check.names = TRUE,  : \n  # # arguments imply differing number of rows: 0, 252\n  \n}\n",
    "created" : 1507340941404.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1339786030",
    "id" : "D8484396",
    "lastKnownWriteTime" : 1507649706,
    "last_content_update" : 1507649706287,
    "path" : "~/Documents/Documents/R Projects/WQ_iQuaCalc_Lite_0.3_test_code/omega_curve.R",
    "project_path" : null,
    "properties" : {
        "docOutlineVisible" : "0",
        "tempName" : "Untitled1"
    },
    "relative_order" : 10,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}