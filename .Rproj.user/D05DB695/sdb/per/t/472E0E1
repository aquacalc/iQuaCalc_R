{
    "collab_server" : "",
    "contents" : "# HYDRAULIC LOAD module functions for\n# \"iQuaCalc (Lite).R\"\n\n\nhydraulicLoadModuleInput <- function(id) {\n  \n  ns <- NS(id)\n  \n  tagList(\n    \n    tabsetPanel(\n      \n      tabPanel(title = 'Hydraulic Load ➔ Hydraulic Load',\n               \n               fluidRow(\n                 \n                 column( width = 6, offset = 3,\n                         \n                         wellPanel(style = 'padding: 5px; 0px; 5px; 25px;',\n                                   \n                                   splitLayout(cellWidths = c('25%', '50%', '25%'),\n                                               \n                                               numericInput(ns('hydraulic_load_input'), 'Hydraulic Load', \n                                                            value = 1, \n                                                            min = 0, max = 45, step = 0.01),\n                                               \n                                               selectInput(ns('hydraulic_load_ConvertUnits'), 'Hydraulic Load Units', \n                                                           \n                                                           choices=list('per SECOND' = hydraulicUnits[1:5], \n                                                                        'per MINUTE' = hydraulicUnits[6:10], \n                                                                        'per HOUR'   = hydraulicUnits[11:15], \n                                                                        'per DAY'    = hydraulicUnits[15:20])\n                                               ),\n                                               \n                                               tags$h6()\n                                   )\n                         )\n                 )\n               ),\n               \n               fluidRow(\n                 \n                 column(width = 3,\n                        \n                        h3('SECONDS', align = 'center'),\n                        datatableModuleInput(ns('hydraulic_seconds_conversion_1_dt'),\n                                             col_width = 12,\n                                             font_size = '130')\n                 ),\n                 \n                 column(width = 3,\n                        \n                        h3('MINUTES', align = 'center'),\n                        datatableModuleInput(ns('hydraulic_minutes_conversion_2_dt'),\n                                             col_width = 12,\n                                             font_size = '130')\n                 ),\n                 \n                 column(width = 3,\n                        style = 'padding: 0px',\n                        \n                        h3('HOURS', align = 'center'),\n                        datatableModuleInput(ns('hydraulic_hours_conversion_3_dt'),\n                                             col_width = 12,\n                                             font_size = '130')\n                 ),\n                 \n                 column(width = 3,\n                        \n                        h3('DAYS', align = 'center'),\n                        datatableModuleInput(ns('hydraulic_days_conversion_4_dt'),\n                                             col_width = 12,\n                                             font_size = '130')\n                 )\n               )    # END fluidRow DT\n      ),  # END tabPanel 'Conversion'\n      \n\n      tabPanel(title = '(Flow Rate) / (Area) ➔ Hydraulic Load',\n               \n               fluidRow(\n                 \n                 column( width = 6, offset = 3,\n                         \n                         wellPanel(style = 'padding: 5px; 0px; 5px; 25px;',\n                                   \n                                   # splitLayout(cellWidths = c('40%', '50%'),\n                                   splitLayout(cellWidths = c('25%', '50%', '25%'),\n                                               \n                                               numericInput(ns('hydraulic_flow_rate_input'), 'Flow Rate', \n                                                            value = 1, \n                                                            min = 0, max = 45, step = 0.01),\n                                               \n                                               selectInput(ns('hydraulic_flow_rate_ConvertUnits'), 'Flow Rate Units', \n                                                           \n                                                           choices=list('per SECOND' = flowRateUnitsList[19:24],\n                                                                        'per MINUTE' = flowRateUnitsList[13:18],\n                                                                        'per HOUR'   = flowRateUnitsList[7:12], \n                                                                        'per DAY'    = flowRateUnitsList[1:6])\n                                               ),\n                                               \n                                               tags$h6()\n                                   ),\n                                   \n                                   areaModuleInput(ns('hydraulic_area_input'))\n                         )\n                 )\n               ),\n               \n               fluidRow(\n                 \n                 column(width = 3,\n                        \n                        h3('SECONDS', align = 'center'),\n                        datatableModuleInput(ns('hydraulic_conversion_1_dt'),\n                                             col_width = 12,\n                                             font_size = '115')\n                 ),\n                 \n                 column(width = 3,\n                        \n                        h3('MINUTES', align = 'center'),\n                        datatableModuleInput(ns('hydraulic_conversion_2_dt'),\n                                             col_width = 12,\n                                             font_size = '115')\n                 ),\n                 \n                 column(width = 3,\n                        style = 'padding: 0px',\n                        \n                        h3('HOURS', align = 'center'),\n                        datatableModuleInput(ns('hydraulic_conversion_3_dt'),\n                                             col_width = 12,\n                                             font_size = '115')\n                 ),\n                 \n                 column(width = 3,\n                        \n                        h3('DAYS', align = 'center'),\n                        datatableModuleInput(ns('hydraulic_conversion_4_dt'),\n                                             col_width = 12,\n                                             font_size = '115')\n                 )\n               )    # END fluidRow DT\n      ),  # END tabPanel '(Flow Rate) / (Area)'\n      \n      tabPanel(title = 'Hydraulic Load Info'\n               \n      )  # END tabPanel 'Hydraulic Load Info'\n      \n    )  # END tabsetPanel\n    \n  )   # END tagList\n}\n\n\n\n\nhydraulicLoadModule <- function(input, output, session, st) {\n  \n  ns <- session$ns\n  \n  # \"*_init\" flags when app is (re-)launched\n  rv <- reactiveValues(\n                       select_init = -1,\n                       flow_rate_units_default = 'm³/d',\n                       flow_rate_sl_init = -1,\n                       flow_rate_default = c(rep(1, 24)),\n\n                       # select_init_turnover = -1,\n                       # turnover_flow_rate_units_default = 'm³/d',\n                       # turnover_flow_rate_sl_init = -1,\n                       # turnover_flow_rate_default = c(rep(1, 18)),\n                       \n                       select_init_hydraulic = -1,\n                       hydraulic_flow_rate_units_default = 'm³/d',\n                       hydraulic_flow_rate_sl_init = -1,\n                       hydraulic_flow_rate_default = c(rep(1, 24))\n                       )\n  \n  \n  # flow rate AUX modules ----\n  \n  # # send rows 1:5 to datatableModule\n  # flow_rate_dt_1 <- callModule(datatable_split_Module, 'dummy_flow_rate_1',\n  #                              reactive(df_flow_rate()),\n  #                              13, 18 # row numbers to send\n  # )\n  # \n  # # send rows 6:10 to datatableModule\n  # flow_rate_dt_2 <- callModule(datatable_split_Module, 'dummy_flow_rate_2',\n  #                              reactive(df_flow_rate()),\n  #                              7, 12 # row numbers to send\n  # )\n  # \n  # # send rows 11:15 to datatableModule\n  # flow_rate_dt_3 <- callModule(datatable_split_Module, 'dummy_flow_rate_3',\n  #                              reactive(df_flow_rate()),\n  #                              1, 16 # row numbers to send\n  # )\n  # \n  # # send rows 11:15 to datatableModule\n  # flow_rate_dt_4 <- callModule(datatable_split_Module, 'dummy_flow_rate_4',\n  #                              reactive(df_flow_rate()),\n  #                              1, 16 # row numbers to send\n  # )\n  # \n  # \n  # callModule(datatableModule,\n  #            'hydraulic_seconds_conversion_1_dt',\n  #            reactive(flow_rate_dt_1()),\n  #            6, 3 # nrow, ncol\n  # )\n  # \n  # callModule(datatableModule,\n  #            'hydraulic_minutes_conversion_2_dt',\n  #            reactive(flow_rate_dt_2()),\n  #            6, 3 # nrow, ncol\n  # )\n  # \n  # callModule(datatableModule,\n  #            'hydraulic_hours_conversion_3_dt',\n  #            reactive(flow_rate_dt_3()),\n  #            6, 3 # nrow, ncol\n  # )\n  # \n  # callModule(datatableModule,\n  #            'hydraulic_days_conversion_4_dt',\n  #            reactive(flow_rate_dt_3()),\n  #            6, 3 # nrow, ncol\n  # )\n  \n  \n  \n  # hydraulic AUX modules ----\n  \n  ic_area <- callModule(areaModule, 'hydraulic_area_input',\n                        reactive(st()))\n  \n  # send rows 1:5 to datatableModule\n  hydraulic_dt_1 <- callModule(datatable_split_Module, 'dummy_hydraulic_1',\n                              reactive(df_hydraulic()),\n                              1, 5 # row numbers to send\n  )\n\n  # send rows 6:10 to datatableModule\n  hydraulic_dt_2 <- callModule(datatable_split_Module, 'dummy_hydraulic_2',\n                              reactive(df_hydraulic()),\n                              6, 10 # row numbers to send\n  )\n\n  # send rows 11:15 to datatableModule\n  hydraulic_dt_3 <- callModule(datatable_split_Module, 'dummy_hydraulic_3',\n                               reactive(df_hydraulic()),\n                               11, 15 # row numbers to send\n  )\n\n  # send rows 11:15 to datatableModule\n  hydraulic_dt_4 <- callModule(datatable_split_Module, 'dummy_hydraulic_4',\n                              reactive(df_hydraulic()),\n                              16, 20 # row numbers to send\n  )\n\n\n  callModule(datatableModule,\n             'hydraulic_conversion_1_dt',\n             reactive(hydraulic_dt_1()),\n             5, 3 # nrow, ncol\n  )\n\n  callModule(datatableModule,\n             'hydraulic_conversion_2_dt',\n             reactive(hydraulic_dt_2()),\n             5, 3 # nrow, ncol\n  )\n\n  callModule(datatableModule,\n             'hydraulic_conversion_3_dt',\n             reactive(hydraulic_dt_3()),\n             5, 3 # nrow, ncol\n  )\n\n  callModule(datatableModule,\n             'hydraulic_conversion_4_dt',\n             reactive(hydraulic_dt_4()),\n             5, 3 # nrow, ncol\n  )\n\n  \n  \n  # Observe FLOW-RATE controls ----\n  \n  # # Observe SELECT_INPUT input, store when changed\n  # observeEvent(input$flow_rateConvertUnits, priority = 100, {\n  #   \n  #   if(rv$select_init < 0)  {\n  #     \n  #     x <- ns('flow_rateConvertUnits')\n  #     \n  #     rv$select_init <- 1\n  #     \n  #     # user (re-)opened app. Is store$select empty?\n  #     updateSelectInput(session, \"flow_rateConvertUnits\",\n  #                       label = 'Flow Rate Units', \n  #                       # choices = flowRateUnitsList,\n  \n  # choices=list('per SECOND' = flowRateUnitsList[19:24],\n  #              'per MINUTE' = flowRateUnitsList[13:18],\n  #              'per HOUR'   = flowRateUnitsList[7:12], \n  #              'per DAY'    = flowRateUnitsList[1:6]),\n  #                       \n  #                       selected = st()[[x]])\n  #   }\n  #   \n  #   updateStore(session, ns(\"flow_rateConvertUnits\"), input$flow_rateConvertUnits)\n  #   \n  #   \n  #   idx <- which(input$flow_rateConvertUnits == flowRateUnitsList)\n  #   \n  #   y <- paste0(ns('sl_'), input$flow_rateConvertUnits)\n  #   \n  #   \n  #   my_flow_rate_value <- st()[[y]]\n  #   \n  #   if(length(my_flow_rate_value) == 0)\n  #     my_flow_rate_value <- rv$flow_rate_default[idx]\n  #   \n  #   updateNumericInput(session, 'flow_rate_input', flowRateUnitsList[idx], \n  #                      value = my_flow_rate_value\n  #                      # min = flow_rateMin[idx], max = flow_rateMax[idx], step = flow_rateStep[idx]\n  #                      )\n  #   \n  #   # update slider value for current units ???\n  #   updateStore(session, paste0(ns('sl_'), input$flow_rateConvertUnits), my_flow_rate_value)\n  #   \n  # })\n  # \n  # \n  # # Observe NUMERIC_INPUT input, store when changed ----\n  # observeEvent(input$flow_rate_input, {\n  #   \n  #   if(rv$flow_rate_sl_init < 0) {\n  #     \n  #     rv$flow_rate_sl_init <- 1\n  #     \n  #     # return()\n  #   }\n  #   \n  #   idx <- which(input$flow_rateConvertUnits == flowRateUnitsList)  # previously: flow_rateUnitsChoices\n  #   \n  #   y <- paste0(ns('sl_'), input$flow_rateConvertUnits)\n  #   \n  #   my_flow_rate_value <- st()[[y]]\n  #   \n  #   \n  #   if(length(my_flow_rate_value) == 0)\n  #     my_flow_rate_value <- rv$flow_rate_default[idx]\n  #   else\n  #     my_flow_rate_value <- input$flow_rate_input\n  #   \n  #   # update input value for current units\n  #   updateStore(session, paste0(ns('sl_'), input$flow_rateConvertUnits), my_flow_rate_value)\n  #   \n  # })\n  # \n  # \n  # # calc FLOW-RATE conversion data ----\n  # \n  # df_flow_rate <- reactive({\n  #   \n  #   req(\n  #     input$flow_rate_input, input$flow_rateConvertUnits,\n  #     cancelOutput = T\n  #   )\n  #   \n  #   icFlowRate <- getInIcUnits(input$flow_rate_input, input$flow_rateConvertUnits, flow_rate.data)\n  #   \n  #   df <- convertAll(icFlowRate, 'm³/d', flow_rate.data)\n  #   \n  #   \n  #   \n  #   # format decimal values\n  #   df <- round_values(df)\n  #   \n  #   \n  #   idx_flow_rate <- which(input$flow_rateConvertUnits == flowRateUnitsList)\n  #   \n  #   hidden.col <- c(rep(0, nrow(df)))\n  #   hidden.col[idx_flow_rate] <- 1\n  #   \n  #   # df_x <- data.frame(vals = c(rep(3, 9)), units = c(rep('w', 9)), stringsAsFactors = F)\n  #      \n  #   df <- cbind(df, h = hidden.col)\n  #   \n  #   flow_rate_list <- list(df = df, \n  #                     ic = icFlowRate,\n  #                     val = input$flow_rate_input,\n  #                     units = input$flow_rateConvertUnits)\n  #   \n  #   flow_rate_list\n  #   \n  # })\n  # \n  # \n  # # Observe TURNOVER controls ----\n  # \n  # # Observe SELECT_INPUT input, store when changed\n  # observeEvent(input$turnover_flow_rate_ConvertUnits, priority = 100, {\n  #   \n  #   if(rv$select_init_turnover < 0)  {\n  #     \n  #     x <- ns('turnover_flow_rate_ConvertUnits')\n  #     \n  #     rv$select_init_turnover <- 1\n  #     \n  #     # user (re-)opened app. Is store$select empty?\n  #     updateSelectInput(session, \"turnover_flow_rate_ConvertUnits\",\n  #                       label = 'Flow Rate Units', \n  \n  # choices=list('per SECOND' = flowRateUnitsList[19:24],\n  #              'per MINUTE' = flowRateUnitsList[13:18],\n  #              'per HOUR'   = flowRateUnitsList[7:12], \n  #              'per DAY'    = flowRateUnitsList[1:6]),\n  #                       \n  #                       selected = st()[[x]])\n  #   }\n  #   \n  #   updateStore(session, ns(\"turnover_flow_rate_ConvertUnits\"), input$turnover_flow_rate_ConvertUnits)\n  #   \n  #   \n  #   idx <- which(input$turnover_flow_rate_ConvertUnits == flowRateUnitsList)\n  #   \n  #   y <- paste0(ns('sl_turnover_'), input$turnover_flow_rate_ConvertUnits)\n  #   \n  #   \n  #   my_flow_rate_value <- st()[[y]]\n  #   \n  #   if(length(my_flow_rate_value) == 0)\n  #     my_flow_rate_value <- rv$turnover_flow_rate_default[idx]\n  #   \n  #   updateNumericInput(session, 'turnover_flow_rate_input', flowRateUnitsList[idx], \n  #                      value = my_flow_rate_value\n  #                      # min = flow_rateMin[idx], max = flow_rateMax[idx], step = flow_rateStep[idx]\n  #   )\n  #   \n  #   # update slider value for current units ???\n  #   updateStore(session, paste0(ns('sl_turnover_'), input$turnover_flow_rate_ConvertUnits), my_flow_rate_value)\n  #   \n  # })\n  # \n  # \n  # # Observe NUMERIC_INPUT input, store when changed ----\n  # observeEvent(input$turnover_flow_rate_input, {\n  #   \n  #   if(rv$turnover_flow_rate_sl_init < 0) {\n  #     \n  #     rv$turnover_flow_rate_sl_init <- 1\n  #     \n  #     # return()\n  #   }\n  #   \n  #   idx <- which(input$turnover_flow_rate_ConvertUnits == flowRateUnitsList)  # previously: flow_rateUnitsChoices\n  #   \n  #   y <- paste0(ns('sl_turnover_'), input$turnover_flow_rate_ConvertUnits)\n  #   \n  #   my_flow_rate_value <- st()[[y]]\n  #   \n  #   \n  #   if(length(my_flow_rate_value) == 0)\n  #     my_flow_rate_value <- rv$turnover_flow_rate_default[idx]\n  #   else\n  #     my_flow_rate_value <- input$turnover_flow_rate_input\n  #   \n  #   # update input value for current units\n  #   updateStore(session, paste0(ns('sl_turnover_'), input$turnover_flow_rate_ConvertUnits), my_flow_rate_value)\n  #   \n  # })\n  # \n  # \n  # \n  # # calc TURNoVER conversion data ----\n  # \n  # df_turnover <- reactive({\n  #   \n  #   req(\n  #     input$turnover_flow_rate_input, input$turnover_flow_rate_ConvertUnits,\n  #     \n  #     cancelOutput = T\n  #   )\n  #   \n  #   icFlowRate <- getInIcUnits(input$turnover_flow_rate_input, input$turnover_flow_rate_ConvertUnits, flow_rate.data)\n  #   \n  #   df <- convertAll(icFlowRate, 'm³/d', flow_rate.data)\n  #   \n  #   \n  #   \n  #   # format decimal values\n  #   df <- round_values(df)\n  #   \n  #   \n  #   idx_flow_rate <- which(input$turnover_flow_rate_ConvertUnits == flowRateUnitsList)\n  #   \n  #   hidden.col <- c(rep(0, nrow(df)))\n  #   hidden.col[idx_flow_rate] <- 1\n  #   \n  #   # df_x <- data.frame(vals = c(rep(3, 9)), units = c(rep('w', 9)), stringsAsFactors = F)\n  #   \n  #   df <- cbind(df, h = hidden.col)\n  #   \n  #   days    <- (ic_volume()$ic / 1000.0) / icFlowRate\n  #   hours   <- days * 24\n  #   minutes <- hours * 60\n  #   \n  #   turnover_list <- list(df      = df, \n  #                         ic      = icFlowRate,\n  #                         val     = input$turnover_flow_rate_input,\n  #                         units   = input$turnover_flow_rate_ConvertUnits,\n  #                         days    = days,\n  #                         hours   = hours,\n  #                         minutes = minutes)\n  #   \n  #   turnover_list\n  #   \n  # })\n  \n  \n  # Observe HYDRAULIC controls ----\n  \n  # Observe SELECT_INPUT input, store when changed\n  observeEvent(input$hydraulic_flow_rate_ConvertUnits, priority = 100, {\n    \n    if(rv$select_init_hydraulic < 0)  {\n      \n      x <- ns('hydraulic_flow_rate_ConvertUnits')\n      \n      rv$select_init_hydraulic <- 1\n      \n      # user (re-)opened app. Is store$select empty?\n      updateSelectInput(session, \"hydraulic_flow_rate_ConvertUnits\",\n                        label = 'Flow Rate Units', \n                        \n                        choices=list('per SECOND' = flowRateUnitsList[19:24],\n                                     'per MINUTE' = flowRateUnitsList[13:18],\n                                     'per HOUR'   = flowRateUnitsList[7:12], \n                                     'per DAY'    = flowRateUnitsList[1:6]),\n                        \n                        selected = st()[[x]])\n    }\n    \n    updateStore(session, ns(\"hydraulic_flow_rate_ConvertUnits\"), input$hydraulic_flow_rate_ConvertUnits)\n    \n    \n    idx <- which(input$hydraulic_flow_rate_ConvertUnits == flowRateUnitsList)\n    \n    y <- paste0(ns('sl_hydraulic_'), input$hydraulic_flow_rate_ConvertUnits)\n    \n    \n    my_flow_rate_value <- st()[[y]]\n    \n    if(length(my_flow_rate_value) == 0)\n      my_flow_rate_value <- rv$hydraulic_flow_rate_default[idx]\n    \n    updateNumericInput(session, 'hydraulic_flow_rate_input', flowRateUnitsList[idx], \n                       value = my_flow_rate_value\n                       # min = flow_rateMin[idx], max = flow_rateMax[idx], step = flow_rateStep[idx]\n    )\n    \n    # update slider value for current units ???\n    updateStore(session, paste0(ns('sl_hydraulic_'), input$hydraulic_flow_rate_ConvertUnits), my_flow_rate_value)\n    \n  })\n  \n  \n  # Observe NUMERIC_INPUT input, store when changed ----\n  observeEvent(input$hydraulic_flow_rate_input, {\n    \n    if(rv$hydraulic_flow_rate_sl_init < 0) {\n      \n      rv$hydraulic_flow_rate_sl_init <- 1\n      \n      # return()\n    }\n    \n    idx <- which(input$hydraulic_flow_rate_ConvertUnits == flowRateUnitsList)  # previously: flow_rateUnitsChoices\n    \n    y <- paste0(ns('sl_hydraulic_'), input$hydraulic_flow_rate_ConvertUnits)\n    \n    my_flow_rate_value <- st()[[y]]\n    \n    \n    if(length(my_flow_rate_value) == 0)\n      my_flow_rate_value <- rv$hydraulic_flow_rate_default[idx]\n    else\n      my_flow_rate_value <- input$hydraulic_flow_rate_input\n    \n    # update input value for current units\n    updateStore(session, paste0(ns('sl_hydraulic_'), input$hydraulic_flow_rate_ConvertUnits), my_flow_rate_value)\n    \n  })\n  \n  \n  \n  # calc TURNoVER conversion data ----\n  \n  df_hydraulic <- reactive({\n    \n    req(\n      input$hydraulic_flow_rate_input, input$hydraulic_flow_rate_ConvertUnits,\n      \n      cancelOutput = T\n    )\n    \n    icFlowRate <- getInIcUnits(input$hydraulic_flow_rate_input, input$hydraulic_flow_rate_ConvertUnits, flow_rate.data)\n    \n    df <- convertAll(icFlowRate, 'm³/d', flow_rate.data)\n    \n    # cat('Flow Rate Data...\\n')\n    # cat('       input$hydraulic_flow_rate_input = ', input$hydraulic_flow_rate_input, ' \\n')\n    # cat('input$hydraulic_flow_rate_ConvertUnits = ', input$hydraulic_flow_rate_ConvertUnits, ' \\n')\n    # print(df)\n    # cat('-------------------\\n\\n')\n    # cat('AREA = ', ic_area()$df$vals[2], ' m\\n')\n    # cat('AREA = ', ic_area()$df$vals[7], ' ft\\n')\n    \n    \n    # FLOW RATE UNITS\n    # icUnits = 'm³/d'\n    # c(\"m³/d\", \"liter/d\", \"gal/d (US)\", \"gal/d (UK)\", \"ft³/d\", \"acre-ft/d\",\n    #   \"m³/hr\", \"liter/hr\", \"gal/hr (US)\", \"gal/hr (UK)\", \"ft³/hr\", \"acre-ft/hr\", \n    #   \"m³/min\", \"liter/min\", \"gal/min (US)\", \"gal/min (UK)\", \"ft³/min\", \"acre-ft/min\")\n    \n    # icUnits = 'ha'\n    # c(\"ha\",\"m²\",\"cm²\",\"mm²\",\n    #   \"acre\",\"yd²\",\"ft²\",\"in²\")\n    \n    # Want... (m³/d) / m² , (gal/min (US)) / ft² , \n    \n    my_square_meters <- as.numeric(ic_area()$df$vals[2])\n    my_square_feet   <- as.numeric(ic_area()$df$vals[7])\n    \n    # HYDRAULIC -- per DAY\n    # NB: for now, NOT USING acre-ft / [day, hour, minute, sec]\n    # c(\"m³/d/m²\", \"liter/d/m²\")\n    df_hydraulic_per_day_metric  <- tibble(vals  = df$vals[1:2] / my_square_meters, \n                                           units = c('(m³/d) / m²', '(L/d) / m²'))\n    \n    # c(\"gal/d (US)/ft²\", \"gal/d (UK)/ft²\", \"ft³/d/ft²\")\n    df_hydraulic_per_day_english <- tibble(vals = df$vals[3:5] / my_square_feet, \n                                           units = c('(gal (US)/d) / ft²', '(gal (UK)/d) / ft²', '(ft³/d) / ft²'))\n  \n    \n    \n    # HYDRAULIC -- per HOUR\n    # c(\"m³/hr/m²\", \"liter/hr/m²\")\n    df_hydraulic_per_hour_metric  <- tibble(vals  = df$vals[7:8] / my_square_meters,\n                                            units = c('(m³/hr) / m²', '(L/hr) / m²'))\n    \n    # c(\"gal/hr (US)/ft²\", \"gal/hr (UK)/ft²\", \"ft³/hr/ft²\")\n    df_hydraulic_per_hour_english <- tibble(vals  = df$vals[9:11] / my_square_feet,\n                                            units = c('(gal (US)/hr / ft²', '(gal (UK)/hr) / ft²', '(ft³/hr) / ft²'))\n    \n    \n    # HYDRAULIC -- per MINUTE\n    # c(\"m³/min/m²\", \"liter/min/m²\")\n    df_hydraulic_per_minute_metric  <- tibble(vals  = df$vals[13:14] / my_square_meters,\n                                              units = c('(m³/min) / m²', '(L/min) / m²'))\n    \n    # c(\"gal/min (US)/ft²\", \"gal/min (UK)/ft²\", \"ft³/min/ft²\")\n    df_hydraulic_per_minute_english <- tibble(vals  = df$vals[15:17] / my_square_feet,\n                                              units = c('(gal (US)/min) / ft²', \"(gal (UK)/min) / ft²\", \"(ft³/min) / ft²\"))\n    \n    \n    # HYDRAULIC -- per SECOND\n    # c(\"m³/s/m²\", \"liter/s/m²\")\n    df_hydraulic_per_second_metric  <- tibble(vals  = df$vals[19:20] / my_square_meters,\n                                              units = c('(m³/sec) / m²', '(L/sec) / m²'))\n    \n    # c(\"gal/s (US)/ft²\", \"gal/s (UK)/ft²\", \"ft³/s/ft²\")\n    df_hydraulic_per_second_english <- tibble(vals  = df$vals[21:23] / my_square_feet,\n                                              units = c('(gal (US)/sec) / ft²', \"(gal (UK)/sec) / ft²\", \"(ft³/sec) / ft²\"))\n    \n    \n    \n    hydraulic_tibble <- bind_rows(df_hydraulic_per_second_metric, df_hydraulic_per_second_english, \n                                  df_hydraulic_per_minute_metric, df_hydraulic_per_minute_english,\n                                  df_hydraulic_per_hour_metric,   df_hydraulic_per_hour_english,\n                                  df_hydraulic_per_day_metric,    df_hydraulic_per_day_english)\n    \n    \n    # format decimal values\n    hydraulic_tibble <- round_values(hydraulic_tibble)\n    \n    \n    idx_flow_rate <- which(input$hydraulic_flow_rate_ConvertUnits == flowRateUnitsList)\n    \n    hidden.col <- c(rep(0, nrow(hydraulic_tibble)))\n    # [KLUDGE] set df hidden.col to '0', ----\n    # as displayed units different from either input units (area & flow rate)\n    # hidden.col[idx_flow_rate] <- 1\n    \n    \n    hydraulic_tibble <- cbind(hydraulic_tibble, h = hidden.col)\n    \n    # print(hydraulic_tibble)\n    # cat('=======================\\n\\n\\n')\n    \n    \n    hydraulic_list <- list(df    = hydraulic_tibble, \n                           ic    = icFlowRate,\n                           val   = input$hydraulic_flow_rate_input,\n                           units = input$hydraulic_flow_rate_ConvertUnits)\n    \n    hydraulic_list\n    \n  })\n  \n  \n  # NB: ORIGINAL module returned df for flow-rate (only) calc\n  # return(df_flow_rate)\n}\n",
    "created" : 1506786639582.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2905109423",
    "id" : "472E0E1",
    "lastKnownWriteTime" : 1506794292,
    "last_content_update" : 1506794292994,
    "path" : "~/Documents/Documents/R Projects/WQ_iQuaCalc_Lite_0.3/modules/hydraulic_load_module.R",
    "project_path" : "modules/hydraulic_load_module.R",
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}