{
    "collab_server" : "",
    "contents" : "# gas conversion module functions for\n# \"iQuaCalc (Lite)\" dashboard\n\n\ngasConversionModuleInput <- function(id) {\n  \n  ns <- NS(id)\n  \n  tagList(\n    \n    tabsetPanel(\n      \n      tabPanel(title = 'Oxygen, Nitrogen, & Argon',\n               \n               fluidRow(\n                 \n                 column( width = 1\n                         \n                 ),\n                 \n                 column( width = 5,\n                         \n                         br(),\n                         \n                         wellPanel(style = 'padding-bottom: 0px;',\n                           \n                           # splitLayout(cellWidths = c('50%', '50%'),\n                                       \n                                       radioButtons(ns('rb_for_gas_convert'), label = 'Gasses',\n                                                    choices = c('O2', 'N2', 'Ar'),\n                                                    # choices = c('O2', 'N2', 'Ar', 'CO2'), \n                                                    selected = 'O2', inline = T),\n                                       \n                                       # tags$div(style='background-color: azure; border-style: solid;',\n                                       #   htmlOutput(ns('my_sat_po_sto'))\n                                       # )\n                           # ),\n                             \n                             splitLayout(cellWidths = c('25%', '50%', '25%'),\n                                         \n                                         numericInput(ns('gas_convert'), 'Gas', \n                                                      min = 0, max = 45, value = 33, step = 0.1),\n                                         \n                                         selectInput(ns('gasConvertUnits'), 'Gas Units', \n                                                     choices = gasUnitsListPref),\n                                         \n                                         tags$h6()\n                             )\n                           \n                         ),\n                         \n                         tabsetPanel(id = 'water_or_atmosphere_o2_n2_ar',\n                                     \n                                     tabPanel(title = 'water',\n                                              \n                                              wellPanel(style = 'padding-bottom: 0px;',\n                                                        \n                                                        temperatureModuleInput(ns('temp_for_gas_convert'), 0),\n                                                        \n                                                        salinityModuleInput(ns('sal_for_gas_convert'), 0),\n                                                        \n                                                        depth_ModuleInput(ns('depth_for_gas_convert'))\n                                              )\n                                     ),\n                                     \n                                     tabPanel(title = 'atmosphere',\n                                              \n                                              wellPanel(style = 'padding-bottom: 20px;',\n                                                        \n                                                        barometricNumericModuleInput(ns('barometric_for_gas_convert'))\n                                                        \n                                                        # co2_gasModuleInput(ns('co2_atm_for_gas_convert_co2'))\n                                              )\n                                     )\n                         )  # END CO2 'water_or_atmosphere' tabsetPanel\n                         \n                 ),   # END column 1 of 2\n                 \n                 column( width = 5,\n                         \n                         br(), br(), br(),\n                         \n                         fluidRow(\n                           \n                           column(width = 2\n                                  \n                           ),\n                           \n                           column(width = 8,\n                                  \n                                  tags$div(style='background-color: azure; border-style: solid;',\n                                           htmlOutput(ns('my_sat_po_sto')))\n                                  # conversionDisplayModuleInput(ns('gas_conversion_result'))\n                           ),\n                           \n                           column(width = 2\n                                  \n                           )\n                           \n                         ),\n                         \n                         br(), br(),\n                         \n                         fluidRow(\n                           \n                           column(width = 6,\n                                  \n                                  h4('CONCENTRATION', align = 'center'),\n                                  datatableModuleInput(ns('gas_conversion_1_dt'),\n                                                       col_width = 12,\n                                                       font_size = '115')\n                           ),\n                           \n                           column(width = 6,\n                                  \n                                  h4('PRESSURE', align = 'center'),\n                                  datatableModuleInput(ns('gas_conversion_2_dt'),\n                                                       col_width = 12,\n                                                       font_size = '115')\n                           )\n                           \n                           # column(width = 12,\n                           #        div(DT::dataTableOutput(ns('gas_convert_dt')), \n                           #            style = 'font-size:100%')\n                           # )\n                         )\n                         \n                 )  # END column 2 of 2\n                 \n               )  # END fluidRow\n               \n      ),  # END tabPanel, O2, N2, & Ar\n      \n      \n      tabPanel(title = 'Carbon dioxide',\n               \n               fluidRow(\n                 \n                 column( width = 1\n                         \n                 ),\n                 \n                 column( width = 5,\n                         \n                         # CO2 entry options... ----\n\n                         tabsetPanel(id = ns('co2_tabset_panel'),\n                                     \n                                     tabPanel(title = 'CO2 by measurement', style = 'padding-top: 8px',\n                                              \n                                              wellPanel(style = 'padding-bottom: 0px;',\n                                                        \n                                                        co2MeasuredNumericModuleInput(ns('co2_measured_for_gas_convert_co2'))\n                                              )\n                                     ),\n                                     \n                                     tabPanel(title = 'CO2 by pH & [Alk]', style = 'padding-top: 5px',\n                                              \n                                              wellPanel(style = 'padding-bottom: 0px;',\n                                                        \n                                                        phModuleInput(ns('ph_for_gas_convert_co2')),\n                                                        \n                                                        alkModuleInput(ns('alk_for_gas_convert_co2'), 0)\n                                              )\n                                     )\n                         ),\n                         \n                         tabsetPanel(id = 'water_or_atmosphere',\n                                     \n                                     tabPanel(title = 'water',\n                                              \n                                              wellPanel(style = 'padding-bottom: 0px;',\n                                                        \n                                                        temperatureModuleInput(ns('temp_for_gas_convert_co2'), 0),\n                                                        \n                                                        salinityModuleInput(ns('sal_for_gas_convert_co2'), 0),\n                                                        \n                                                        depth_ModuleInput(ns('depth_for_gas_convert_co2'))\n                                              )\n                                     ),\n                                     \n                                     tabPanel(title = 'atmosphere',\n                                              \n                                              wellPanel(style = 'padding-bottom: 20px;',\n                                                        \n                                                        barometricNumericModuleInput(ns('barometric_for_gas_convert_co2')),\n                                                        \n                                                        co2_gasModuleInput(ns('co2_atm_for_gas_convert_co2'))\n                                              )\n                                     )\n                         )  # END CO2 'water_or_atmosphere' tabsetPanel\n                         \n                 ),   # END column 1 of 2\n                 \n                 column( width = 5,\n                         \n                         br(), br(), br(),\n                         \n                         fluidRow(\n                           \n                           column(width = 2\n                                  \n                           ),\n                           \n                           column(width = 8,\n                                  \n                                  tags$div(style='background-color: azure; border-style: solid;',\n                                           htmlOutput(ns('my_sat_po_sto_co2')))\n                                  # conversionDisplayModuleInput(ns('gas_conversion_result_co2'))\n                           ),\n                           \n                           column(width = 2\n                             \n                           )\n                           \n                         ),\n                         \n                         br(), br(),\n                         \n                         fluidRow(\n                           \n                           column(width = 6,\n                                  \n                                  h4('CONCENTRATION', align = 'center'),\n                                  datatableModuleInput(ns('co2_conversion_1_dt'),\n                                                       col_width = 12,\n                                                       font_size = '115')\n                           ),\n                           \n                           column(width = 6,\n                                  \n                                  h4('PRESSURE', align = 'center'),\n                                  datatableModuleInput(ns('co2_conversion_2_dt'),\n                                                       col_width = 12,\n                                                       font_size = '115')\n                           )\n                           \n                           # column(width = 12,\n                           #        div(DT::dataTableOutput(ns('gas_convert_dt_co2')), \n                           #            style = 'font-size:110%')\n                           # )\n                         )\n                         \n                 )  # END column 2 of 2\n                 \n               )  # END fluidRow\n        \n      )  # END tabPanel, CO2\n      \n    )  # END tabSetPanel\n    \n  )\n}\n\n\n\ngasConversionModule <- function(input, output, session, st) {\n  \n  \n  # ---- callModules for O2, N2, Ar ----\n  icTemp       <- callModule(temperatureModule, 'temp_for_gas_convert', \n                             reactive(st()))\n  icSal        <- callModule(salinityModule, 'sal_for_gas_convert', reactive(icTemp()), \n                             reactive(st()))\n  icPh         <- callModule(phModule, 'ph_for_gas_convert', reactive(icTemp()), reactive(icSal()), \n                             reactive(st()))\n  icBarometric <- callModule(barometricNumericModule, 'barometric_for_gas_convert', \n                             reactive(st()))\n  \n  icDepth      <- callModule(depth_Module, 'depth_for_gas_convert',\n                             reactive(st()))\n  \n  \n  # ---- O2, N2, Ar: display single conversion from cell click\n  callModule(conversionDisplayModule, 'gas_conversion_result',\n             reactive(input$gas_convert), \n             reactive(input$gasConvertUnits),\n             reactive(df_gas()), \n             reactive(input$gas_convert_dt_cell_clicked), # table id + \"_cell_clicked'\n             reactive(input$gas_convert_dt_cells_selected),\n             reactive(additional_conversion_info()),\n             reactive(st()))\n  \n  \n  \n  # send rows 19:24 to datatableModule\n  gas_dt_1 <- callModule(datatable_split_Module, 'dummy_co2_1', \n                         reactive(df_gas()),\n                         1, 6 # row numbers to send\n  )\n  \n  # send rows 13:18 to datatableModule\n  gas_dt_2 <- callModule(datatable_split_Module, 'dummy_co2_2', \n                         reactive(df_gas()),\n                         7, 12 # row numbers to send\n  )\n  \n  \n  callModule(datatableModule,\n             'gas_conversion_1_dt',\n             reactive(gas_dt_1()),\n             6, 3 # nrow, ncol\n  )\n  \n  callModule(datatableModule,\n             'gas_conversion_2_dt',\n             reactive(gas_dt_2()),\n             6, 3 # nrow, ncol\n  )\n  \n  \n  \n  \n  \n  # ---- callModules for CO2 ----\n  icTemp_co2       <- callModule(temperatureModule, 'temp_for_gas_convert_co2', \n                                 reactive(st()))\n  icSal_co2        <- callModule(salinityModule, 'sal_for_gas_convert_co2', reactive(icTemp_co2()), \n                                 reactive(st()))\n  icPh_co2         <- callModule(phModule, 'ph_for_gas_convert_co2', \n                                 reactive(icTemp_co2()), reactive(icSal_co2()), \n                                 reactive(st()))\n  icAlk_co2        <- callModule(alkModule, 'alk_for_gas_convert_co2', \n                                 reactive(icTemp_co2()), \n                                 reactive(icSal_co2()),\n                                 reactive(st()))\n  \n  icBarometric_co2 <- callModule(barometricNumericModule, 'barometric_for_gas_convert_co2', \n                                 reactive(st()))\n  \n  icDepth_co2      <- callModule(depth_Module, 'depth_for_gas_convert_co2',\n                                 reactive(st()))\n  \n  icCo2_atm        <- callModule(co2_gasModule, 'co2_atm_for_gas_convert_co2',\n                                 reactive(st()))\n  \n  icCo2            <- callModule(co2MeasuredNumericModule, 'co2_measured_for_gas_convert_co2', \n                                 reactive(icTemp_co2()), \n                                 reactive(icSal_co2()),\n                                 reactive(icPh_co2()),\n                                 reactive(st()))\n  \n  \n  # ---- CO2: display single conversion from cell click\n  callModule(conversionDisplayModule, 'gas_conversion_result_co2',\n             reactive(co2_val_units_from_ph_alk()$val), \n             reactive(co2_val_units_from_ph_alk()$units),\n             reactive(df_co2()), \n             reactive(input$gas_convert_dt_co2_cell_clicked), # table id + \"_cell_clicked'\n             reactive(input$gas_convert_dt_co2_cells_selected),\n             reactive(additional_conversion_info_co2()),\n             reactive(st()))\n  \n  \n  # *********************************************************\n  \n  # send rows 19:24 to datatableModule\n  co2_dt_1 <- callModule(datatable_split_Module, 'dummy_co2_1', \n                         reactive(df_co2()),\n                         1, 6 # row numbers to send\n  )\n  \n  # send rows 13:18 to datatableModule\n  co2_dt_2 <- callModule(datatable_split_Module, 'dummy_co2_2', \n                         reactive(df_co2()),\n                         7, 12 # row numbers to send\n  )\n  \n  \n  callModule(datatableModule,\n             'co2_conversion_1_dt',\n             reactive(co2_dt_1()),\n             6, 3 # nrow, ncol\n  )\n  \n  callModule(datatableModule,\n             'co2_conversion_2_dt',\n             reactive(co2_dt_2()),\n             6, 3 # nrow, ncol\n  )\n  \n  # *********************************************************\n  \n  \n  # CO2 val-units for directly entered or pH-Alk calculated ----\n  co2_val_units_from_ph_alk <- reactive({\n    \n    if('CO2 by measurement' == input$co2_tabset_panel) {\n      \n      co2_val   <- icCo2()$val\n      co2_units <- icCo2()$units\n      \n    } else {\n      \n      my_icTemp       <- icTemp_co2()$ic\n      my_icSal        <- icSal_co2()$ic\n      my_icPh         <- icPh_co2()$ic\n      my_icAlk        <- icAlk_co2()$ic / 1000.0\n      \n      co2_actual_mol_kg <- alphaZero(my_icTemp, my_icSal, my_icPh) * calcDicOfAlk(my_icAlk, my_icPh, my_icTemp, my_icSal)\n      \n      co2_in_mg_per_L <- 1000.0 * co2_actual_mol_kg * MW_CO2 * (calcRho(my_icTemp, my_icSal) / 1000.0)\n      \n      \n      co2_val   <- formatC(co2_in_mg_per_L, format = 'f', digits = 4)\n      co2_units <- 'mg/L'\n    }\n    \n    my_co2_data <- tibble(  val = co2_val,\n                          units = co2_units)\n  })\n  \n  \n  # \"*_init\" flags when app is (re-)launched ----\n  rv <- reactiveValues(select_init = -1,\n                       gas_units_default = 'mg/L',\n                       gas_sl_init = -1,\n                       duct_tape_2 = -1,\n                       gas_default = gasSet\n                       )\n  \n  \n  # # massage O2 & N2 to sub-scripts ----\n  # if('O2' == input$rb_for_gas_convert)\n  #   my_gas <- HTML(paste0('O', tags$sub('2')))\n  # else if('N2' == input$rb_for_gas_convert)\n  #   my_gas <- HTML(paste0('N', tags$sub('2')))\n  # else\n  #   my_gas <- 'Ar'\n  \n  \n  # Observe SELECT_INPUT input, store when changed\n  observeEvent(input$gasConvertUnits, priority = 50, {\n    \n    if(rv$select_init < 0)  {\n      \n      x <- session$ns('gasConvertUnits')\n      \n      rv$select_init <- 1\n      \n      gas_units_init <- st()[[x]]\n      \n      if(length(gas_units_init) == 0)\n        gas_units_init <- rv$gas_units_default\n      \n      # user (re-)opened app. Is store$select empty?\n      updateSelectInput(session, 'gasConvertUnits', \n                        label = paste0(input$rb_for_gas_convert, ' Units'), \n                        choices = gasChoices,\n                        gas_units_init)\n    }\n    \n    updateStore(session, session$ns(\"gasConvertUnits\"), input$gasConvertUnits)\n    \n    idx <- which(input$gasConvertUnits == gasUnitsListPref)\n    \n    # y <- paste0(session$ns('sl_'), input$gasConvertUnits)\n    y <- paste0(session$ns('sl_'), input$gasConvertUnits, '_', input$rb_for_gas_convert)\n    \n    my_gas_value <- st()[[y]]\n    \n    if(length(my_gas_value) == 0)\n      my_gas_value <- rv$gas_default[idx]\n    \n    updateNumericInput(session, \"gas_convert\", \n                       label = paste0(gasUnitsListPref_short[idx], ' ', input$rb_for_gas_convert),\n                       value = my_gas_value,\n                       min = gasMin[idx], max = gasMax[idx], step = gasStep[idx])\n    \n    # update slider value for current units ???\n    # updateStore(session, paste0(session$ns('sl_'), input$gasConvertUnits), my_gas_value)\n    updateStore(session, paste0(session$ns('sl_'), \n                                input$gasConvertUnits, \n                                '_', \n                                input$rb_for_gas_convert), my_gas_value)\n    \n  })\n  \n  \n  # Observe SLIDER_INPUT input, store when changed\n  observeEvent(input$gas_convert, {\n    \n    if(rv$gas_sl_init < 0) {\n      \n      rv$gas_sl_init <- 1\n      \n      return()\n    }\n    \n    idx <- which(input$gasConvertUnits == gasUnitsListPref)\n    \n    # y <- paste0(session$ns('sl_'), input$gasConvertUnits)\n    y <- paste0(session$ns('sl_'), input$gasConvertUnits, '_', input$rb_for_gas_convert)\n    \n    my_gas_value <- st()[[y]]\n    \n    \n    if(length(my_gas_value) == 0)\n      my_gas_value <- rv$gas_default[idx]\n    else\n      my_gas_value <- input$gas_convert\n    \n    \n    # update slider value for current units\n    # updateStore(session, paste0(session$ns('sl_'), input$gasConvertUnits), my_gas_value)\n    updateStore(session, paste0(session$ns('sl_'), \n                                input$gasConvertUnits, \n                                '_', \n                                input$rb_for_gas_convert), my_gas_value)\n    \n  })\n  \n  \n  # observeEvent -- radiobuttons ----\n  observeEvent(input$rb_for_gas_convert, {\n    \n    idx <- which(input$gasConvertUnits == gasUnitsListPref)\n    \n    # ******************************************\n    # y <- paste0(session$ns('sl_'), input$gasConvertUnits)\n    y <- paste0(session$ns('sl_'), input$gasConvertUnits, '_', input$rb_for_gas_convert)\n    \n    my_gas_value <- st()[[y]]\n    \n    if(length(my_gas_value) == 0)\n      my_gas_value <- rv$gas_default[idx]\n    # ******************************************\n    \n    updateNumericInput(session, \"gas_convert\", \n                       label = paste0(gasUnitsListPref_short[idx], ' ', input$rb_for_gas_convert),\n                       value = my_gas_value,\n                       min = gasMin[idx], max = gasMax[idx], step = gasStep[idx])\n    \n    updateSelectInput(session, 'gasConvertUnits', \n                      label = paste0(input$rb_for_gas_convert, ' Units')) \n                      # choices = gasChoices,\n                      # gas_units_init)\n  })\n  \n  \n  # * * PERCENT SATURATION ----\n  calcPoStoSaturation <- function() {\n    \n    # in I.C. units, μmol/kg\n    gas_sat_for_this_temp_sal_bp <- calcGasSat(gas_type, temp, sal, bp_atm)\n    \n    # cat('gas_sat_for_this_temp_sal_bp = ', gas_sat_for_this_temp_sal_bp, 'μmol/kg \\n')\n    # print(df_gas()$df[5])\n    # cat('-----\\n')\n    # cat(100.0 * df_gas()$df[5] / gas_sat_for_this_temp_sal_bp, '% \\n')\n    # cat('=====\\n\\n\\n')\n    \n    # divide entered concentration (as μmol/k) by gas_sat_for_this_temp_sal_bp, then * 100\n    \n  }\n  \n  \n  # -- DF_CO2() ----\n  \n  df_co2 <- reactive({\n    \n    my_icTemp       <- icTemp_co2()$ic\n    my_icSal        <- icSal_co2()$ic\n    my_icPh         <- icPh_co2()$ic\n    my_icAlk        <- icAlk_co2()$ic / 1000.0\n    my_icBarometric <- icBarometric_co2()$ic\n    \n    req(icCo2()$val,\n        icCo2()$units)\n    \n    \n    if('CO2 by measurement' == input$co2_tabset_panel) {\n      \n      # co2_in_mg_per_L <- icCo2()$co2_mg_per_L\n      \n      co2_measured_df <- calcGasAllUnits('CO2', icCo2()$val, icCo2()$units, my_icTemp, my_icSal)\n\n    } else {\n\n      co2_actual_mol_kg <- alphaZero(my_icTemp, my_icSal, my_icPh) * calcDicOfAlk(my_icAlk, my_icPh, my_icTemp, my_icSal)\n\n      co2_in_mg_per_L <- 1000.0 * co2_actual_mol_kg * MW_CO2 * (calcRho(my_icTemp, my_icSal) / 1000.0)\n      \n      co2_measured_df <- calcGasAllUnits('CO2', co2_in_mg_per_L, 'mg/L', my_icTemp, my_icSal)\n    }\n\n    \n    # +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n    \n    hydrostatic_rate     <- getPressureIncreaseWithDepth(my_icTemp, my_icSal)\n    hydrostatic_pressure <- hydrostatic_rate * icDepth_co2()\n    \n    barometric_plus_hydrostatic_atm <- my_icBarometric + hydrostatic_pressure / 759.999952\n    \n    \n    # NB: icCo2_atm() only returns atmospheric mole fraction of CO2 in μatm\n    my_co2_mole_fraction <- icCo2_atm()$val\n    \n    co2_sat <- calc_CO2_gasSat_microMol_kg(my_icTemp, my_icSal, \n                                           barometric_plus_hydrostatic_atm, \n                                           my_co2_mole_fraction)\n    \n    co2_sat_df      <- calcGasAllUnits('CO2', co2_sat, 'μmol/kg', my_icTemp, my_icSal)\n    \n    # print(co2_sat_df)\n    # co2_measured_df <- calcGasAllUnits('CO2', icCo2()$val, icCo2()$units, my_icTemp, my_icSal)\n    \n    \n    # RE-ARRANGE rows, 1:7 for concentration, 8:14 for pressure\n    # Why? Instead of one table, splitting into two, side-by-side:\n    # one for conc, one for pressure\n    \n    # re-order rows to separate concentrations from pressures\n    # co2_measured_df <- co2_measured_df[c(3, 6, 4, 7, 12, 5, 14, 13, 2:1, 8:11), ]\n    co2_measured_df <- co2_measured_df[c(3, 6, 4, 7, 12, 5, 2:1, 8:11), ]\n    \n    co2_measured_df$units[7] <- 'mm Hg'\n    \n    hidden.col <- c(rep(0, nrow(co2_measured_df)))\n    # hidden.col[idx_gas] <- 0\n    \n    # cat('----------------\\n')\n    # print(co2_measured_df)\n    \n    co2_po_sto <- round(100.0 * as.numeric(co2_measured_df$val[1]) / as.numeric(co2_sat_df$val[3]), 1)\n    \n    # cat('CO2 saturation: ', as.numeric(co2_measured_df$val[1]), ' / ', as.numeric(co2_sat_df$val[3]), \n    #     ' = ', co2_po_sto, '% \\n')\n    # cat('----------------\\n')\n    \n    co2_measured_df <- cbind(co2_measured_df, h = hidden.col)\n    \n    co2_list <- list(df         = co2_measured_df,\n                     ic         = 'nema',\n                     val        = icCo2()$val,\n                     units      = icCo2()$units,\n                     sat_po_sto = co2_po_sto)\n    \n    co2_list\n    \n  })\n  \n  \n  # -- DF_GAS() ----\n  \n  df_gas <- reactive({\n    \n    # cat('in gas_conversion_module.R, input$rb_for_gas_convert = ', input$rb_for_gas_convert, '\\n\\n')\n    \n    if(-1 == rv$duct_tape_2) {\n      \n      progress <- shiny::Progress$new()\n      \n      on.exit(progress$close())\n      \n      progress$set(message = 'Initializing Gas Conversion Data', value = 0)\n      \n    }\n    \n    \n    my_icTemp <- icTemp()$ic\n    my_icSal  <- icSal()$ic\n    my_icPh   <- icPh()$ic\n    \n    # if(!is.null(my_icSal) && my_icSal != '' &&\n    #    !is.null(my_icTemp) && my_icTemp != '') {\n      \n      idx_gas <- which(input$gasConvertUnits == gasUnitsListPref)\n      \n      ic_rho <- calcRho(my_icTemp, my_icSal)\n      \n      # uia_posto_free <- percentNh3ForTemp(my_icTemp, my_icSal, my_icPh)  # on FREE scale\n      # \n      # uia_posto <- uia_posto_free - \n      #   log10(ahFreeToSwsFactor(my_icSal, my_icTemp, 0)) - \n      #   log10(ahSwsToNbsFactor(my_icSal, my_icTemp, 0))                  # on NBS scale\n      \n      \n      icGas <- calcGasToIcUnits(input$rb_for_gas_convert, \n                                input$gas_convert, \n                                input$gasConvertUnits, \n                                my_icTemp, my_icSal)\n      \n      df <- calcGasAllUnits(input$rb_for_gas_convert, \n                            icGas, \n                            'μmol/kg', \n                            my_icTemp, my_icSal)\n      \n      # ----------*\n      \n      hydrostatic_rate     <- getPressureIncreaseWithDepth(my_icTemp, my_icSal)\n      hydrostatic_pressure <- hydrostatic_rate * icDepth()\n      \n      barometric_plus_hydrostatic_atm <- icBarometric()$ic + hydrostatic_pressure / 759.999952\n      \n      # in I.C. units, μmol/kg\n      gas_sat_for_this_temp_sal_bp <- calcGasSat(input$rb_for_gas_convert, \n                                                 my_icTemp, \n                                                 my_icSal, \n                                                 barometric_plus_hydrostatic_atm)\n      \n      \n      gas_sat_po_sto <- round(100.0 * as.numeric(df$vals[5]) / gas_sat_for_this_temp_sal_bp, 1)\n      \n      # cat('gas_sat_for_this_temp_sal_bp = ', gas_sat_for_this_temp_sal_bp, 'μmol/kg \\n')\n      # cat('icGas = ', icGas, 'μmol/kg \\n\\n')\n      # print(df)\n      # cat('-----\\n\\n')\n      # cat(gas_sat_po_sto, '% \\n')\n      # cat('=====\\n\\n\\n')\n      \n      # ----------*\n      \n      df <- df[c(3, 6, 4, 7, 12, 5, 2:1, 8:11), ]\n      \n      df$units[7] <- 'mm Hg'\n      \n      \n      hidden.col <- c(rep(0, nrow(df)))\n      # hidden.col[idx_gas] <- 1\n      \n      df <- cbind(df, h = hidden.col)\n      \n      # as in \"salinity_module.R,\" not just \"as.data.frame(df)\"\n      gas_list <- list(df         = df,\n                       ic         = icGas,\n                       val        = input$gas_convert,\n                       units      = input$gasConvertUnits,\n                       sat_po_sto = gas_sat_po_sto)\n      \n      # 2/2 \"duct tape\" solution ... ----\n      # rv$duct_tape_2 <- 2\n      \n      gas_list\n    \n  })\n  \n  \n  # ---- additional conversion output ----\n  \n  output$my_sat_po_sto <- renderUI({\n    \n    req(df_gas())\n    \n    if('O2' == input$rb_for_gas_convert)\n      gas <- HTML(paste0('O', tags$sub('2')))\n    else if('N2' == input$rb_for_gas_convert)\n      gas <- HTML(paste0('N', tags$sub('2')))\n    else\n      gas <- 'Ar'\n    \n    HTML(paste(tags$h3(gas, ': ', df_gas()$sat_po_sto, '% saturation', style = \"text-align: center;\")))\n    \n  })\n  \n  \n  output$my_sat_po_sto_co2 <- renderUI({\n    \n    req(df_co2())\n    \n    gas <- HTML(paste0('CO', tags$sub('2')))\n    \n    HTML(paste(tags$h3(gas, ': ', df_co2()$sat_po_sto, '% saturation', style = \"text-align: center;\")))\n    \n  })\n  \n  \n  # -- additional conversion info ----\n  \n  additional_conversion_info <- reactive({\n    \n    str_temp <- paste0(icTemp()$val, ' ', icTemp()$units)\n    str_sal  <- paste0(icSal()$val, ' ', icSal()$units)\n    str_bar  <- paste0(icBarometric()$val, ' ', icBarometric()$units)\n    \n    HTML(paste(tags$h5('(at ', str_temp, ', ', str_sal, ', & ', str_bar, ')',\n                       style = \"text-align: center;\")\n    )\n    )\n  })\n  \n    \n  additional_conversion_info_co2 <- reactive({\n    \n    str_temp <- paste0(icTemp_co2()$val, ' ', icTemp_co2()$units)\n    str_sal  <- paste0(icSal_co2()$val, ' ', icSal_co2()$units)\n    str_bar  <- paste0(icBarometric_co2()$val, ' ', icBarometric_co2()$units)\n    \n    HTML(paste(tags$h5('(at ', str_temp, ', ', str_sal, ', & ', str_bar, ')',\n                       style = \"text-align: center;\")\n               )\n         )\n  })\n  \n  \n  \n  # ---- O2, N2, Ar DT clicks ----\n  \n  # see: tgp_module_WITH_MODULES.R for similar implementation of DT\n  \n  proxy_gas_convert_dt <- dataTableProxy(session$ns('gas_convert_dt'))\n\n  #   # see: http://www.datatables.net/reference/option/dom\n  #   # dom = 'tp' option for table + pagination only\n  #   options = list(dom = 'tp', 'bSort' = F, pageLength = 5)\n\n  # *** NB: replaceData doesn't work in module namespace ***\n  # see: https://github.com/rstudio/DT/issues/359 for workaround\n  observe({\n    \n    # replaceData(proxy_dt_data, my_df()$df, rownames = F, resetPaging = FALSE)\n    dataTableAjax(session, df_gas()$df, rownames = F, outputId = 'gas_convert_dt')\n    reloadData(proxy_gas_convert_dt, resetPaging = FALSE)\n\n  })\n\n\n  output$gas_convert_dt <- DT::renderDataTable({\n    \n    datatable( isolate(df_gas()$df),\n               \n               colnames = c('', '', 'hidden.col'),\n\n               rownames = F,\n               \n               # see: https://yihui.shinyapps.io/DT-selection/\n               selection = list(mode = 'single', target = 'cell'),\n\n               options = list(dom = 't',\n                              'bSort' = F,\n                              'bInfo' = F,\n                              \n                              # pageLength = 5,\n                              pageLength = nrow(isolate(df_gas()$df)),\n\n                              columnDefs = list(list(targets = 2, visible = F),\n                                                list(className = 'dt-right', targets = 0)),\n                              # columnDefs = list(list(targets = 6 - 1, visible = F),\n                              #                   list(className = 'dt-right', targets = 0:3)),\n\n                              initComplete = JS(\n                                \"function(settings, json) {\",\n                                \"$(this.api().table().header()).css({'background-color': 'lightblue', 'color': '#000'});\",\n                                \"}\")\n               )\n               \n               # see: https://stackoverflow.com/questions/42099418/how-can-i-reduce-row-height-in-dt-datatables\n               # %>% formatStyle('h', target = 'row', lineHeight = '70%')\n    )\n\n  }\n  \n    # %>% formatStyle('h', target = 'row',\n                  # # backgroundColor = styleEqual(c(0, 1), c('#6699FF', '#FFFF66')),\n                  #   fontWeight = styleEqual(c(0, 1), c('normal', 'bold')))\n  )\n  \n  \n  \n  # ---- CO2 DT clicks ----\n  \n  # see: tgp_module_WITH_MODULES.R for similar implementation of DT\n  \n  proxy_gas_convert_dt_co2 <- dataTableProxy(session$ns('gas_convert_dt_co2'))\n  \n  #   # see: http://www.datatables.net/reference/option/dom\n  #   # dom = 'tp' option for table + pagination only\n  #   options = list(dom = 'tp', 'bSort' = F, pageLength = 5)\n  \n  # *** NB: replaceData doesn't work in module namespace ***\n  # see: https://github.com/rstudio/DT/issues/359 for workaround\n  observe({\n    \n    # replaceData(proxy_dt_data, my_df()$df, rownames = F, resetPaging = FALSE)\n    dataTableAjax(session, df_co2()$df, rownames = F, outputId = 'gas_convert_dt_co2')\n    reloadData(proxy_gas_convert_dt_co2, resetPaging = FALSE)\n    \n  })\n  \n  \n  output$gas_convert_dt_co2 <- DT::renderDataTable({\n    \n    datatable( isolate(df_co2()$df),\n               \n               colnames = c('', '', 'hidden.col'),\n               \n               rownames = F,\n               \n               # see: https://yihui.shinyapps.io/DT-selection/\n               selection = list(mode = 'single', target = 'cell'),\n               \n               options = list(dom = 't',\n                              'bSort' = F,\n                              'bInfo' = F,\n                              \n                              # pageLength = 5,\n                              pageLength = nrow(isolate(df_gas()$df)),\n                              \n                              columnDefs = list(list(targets = 2, visible = F),\n                                                list(className = 'dt-right', targets = 0)),\n                              # columnDefs = list(list(targets = 6 - 1, visible = F),\n                              #                   list(className = 'dt-right', targets = 0:3)),\n                              \n                              initComplete = JS(\n                                \"function(settings, json) {\",\n                                \"$(this.api().table().header()).css({'background-color': 'lightblue', 'color': '#000'});\",\n                                \"}\")\n               )\n               \n               # see: https://stackoverflow.com/questions/42099418/how-can-i-reduce-row-height-in-dt-datatables\n               # %>% formatStyle('h', target = 'row', lineHeight = '70%')\n    )\n    \n  }\n  \n  # %>% formatStyle('h', target = 'row',\n  # # backgroundColor = styleEqual(c(0, 1), c('#6699FF', '#FFFF66')),\n  #   fontWeight = styleEqual(c(0, 1), c('normal', 'bold')))\n  )\n  \n}",
    "created" : 1507073921543.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1209280311",
    "id" : "6D5B1815",
    "lastKnownWriteTime" : 1507253911,
    "last_content_update" : 1507253911049,
    "path" : "~/Documents/Documents/R Projects/WQ_iQuaCalc_Lite_0.3/modules/gas_conversion_module.R",
    "project_path" : "modules/gas_conversion_module.R",
    "properties" : {
        "docOutlineVisible" : "0"
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}