{
    "collab_server" : "",
    "contents" : " # server script for iQuaCalc (Lite)\n\n\nfunction(input, output, session) {\n  \n  \n  # The WQ Map ----\n  \n  callModule(wqMapModule, 'wq_map', reactive(input$store_iQlite_dash))\n  \n  \n  # TEMPERATURE converter ----\n  \n  icTemp <- callModule(temperatureModule, 'temp_convert',\n                       reactive(input$store_iQlite_dash))\n  \n  \n  # SALINITY converter ----\n  \n  icSal <- callModule(salinityModule, 'sal_convert', \n                          reactive(icTemp()), \n                          reactive(input$store_iQlite_dash))\n  \n  \n  # ALK converter ----\n  \n  icAlk <- callModule(alkModule, 'alk_convert', \n                      reactive(icTemp()), reactive(icSal()),\n                      reactive(input$store_iQlite_dash))\n  \n  \n  # >>LENGTH converter(s) ----\n  \n  icLength_convert_1 <- callModule(lengthModule_uioutput_TWO, \n                                   'length_convert_1',\n                                   reactive(input$store_iQlite_dash))\n  \n  \n  # ** Length - uioutput ----\n  icLength_convert_2 <- callModule(lengthModule_uioutput_TWO, \n                                   'length_convert_2',\n                                   reactive(input$store_iQlite_dash))\n  \n  \n  # >>AREA converter(s) ----\n  \n  # OPTIONS: for AREA & VOLUME calcs----\n  #          for AREA   ... 'area_l_by_w', \n  #                         'area_radius_by_pi_r2'\n  #\n  #          for VOLUME ... 'volume_l_by_w_by_d', \n  #                         'volume_height_by_radius_by_pi_r2', \n  #                         'volume_height_by_area' \n  \n  # ---- ** Area -> Area ----\n  \n  icArea_convert_1 <- callModule(areaModule, 'area_convert_1', \n                                 reactive(input$store_iQlite_dash))\n  \n  callModule(datatableModule,\n             'area_convert_dt_1',\n             reactive(icArea_convert_1()),\n             8, 3     # nrow, ncol\n  )\n  \n  \n  icArea_convert_2 <- callModule(areaModule, 'area_convert_2', \n                                 reactive(input$store_iQlite_dash))\n  \n  callModule(datatableModule,\n             'area_convert_dt_2',\n             reactive(icArea_convert_2()),\n             8, 3     # nrow, ncol\n  )\n  \n  \n  # ---- ** Area, L x W ----\n  \n  icLength_for_Area <- callModule(lengthModule_uioutput_TWO, \n                                   'l_by_w_length',\n                                   reactive(input$store_iQlite_dash))\n  \n  icWidth_for_Area <- callModule(lengthModule_uioutput_TWO, \n                                  'l_by_w_width',\n                                  reactive(input$store_iQlite_dash))\n  \n  \n  icL_by_W_Area <- callModule(multiplierModule, 'dummy_area_l_by_w',\n                              reactive(icLength_for_Area()),\n                              reactive(icWidth_for_Area()),\n                              1,\n                              'area_l_by_w')\n  \n  callModule(datatableModule,\n             'l_by_w_to_area_dt',\n             reactive(icL_by_W_Area()),\n             8, 3     # nrow, ncol\n  )\n  \n  \n  \n  # ---- ** Area, pi x radius^2 ----\n  \n  icRadius_for_Area <- callModule(lengthModule, 'radius_or_diameter', \n                                  'RADIUS',\n                                  reactive(input$store_iQlite_dash))\n  \n  icL_by_pi_r2_Area <- callModule(multiplierModule, 'dummy_area_radius_by_pi_r^2',\n                              reactive(icRadius_for_Area()),\n                              1,\n                              1,\n                              'area_radius_by_pi_r2')\n  \n  callModule(datatableModule,\n             'pi_r2_to_area_dt',\n             reactive(icL_by_pi_r2_Area()),\n             8, 3     # nrow, ncol\n  )\n  \n  \n  # >>VOLUME converter(s) ----\n  \n  # ---- ** Volume -> Volume ----\n  \n  icVolume_convert_1 <- callModule(volumeModule, 'volume_convert_1', \n                                 reactive(input$store_iQlite_dash))\n  \n  callModule(datatableModule,\n             'volume_convert_dt_1',\n             reactive(icVolume_convert_1()),\n             7, 3     # nrow, ncol\n  )\n  \n  \n  icVolume_convert_2 <- callModule(volumeModule, 'volume_convert_2', \n                                 reactive(input$store_iQlite_dash))\n  \n  callModule(datatableModule,\n             'volume_convert_dt_2',\n             reactive(icVolume_convert_2()),\n             7, 3     # nrow, ncol\n  )\n\n  \n  \n  # ---- ** Volume, L x W x D ----\n  \n  icLength_for_Volume <- callModule(lengthModule_uioutput_TWO, \n                                    'l_by_w_by_d_length',\n                                    reactive(input$store_iQlite_dash))\n  \n  icWidth_for_Volume <- callModule(lengthModule_uioutput_TWO, \n                                    'l_by_w_by_d_width',\n                                    reactive(input$store_iQlite_dash))\n  \n  icDepth_for_Volume <- callModule(lengthModule_uioutput_TWO, \n                                    'l_by_w_by_d_depth',\n                                    reactive(input$store_iQlite_dash))\n  \n  icL_by_W_by_D_Volume <- callModule(multiplierModule, 'dummy_volume_l_by_w_by_d',\n                                     reactive(icLength_for_Volume()),\n                                     reactive(icWidth_for_Volume()),\n                                     reactive(icDepth_for_Volume()),\n                                     'volume_l_by_w_by_d')\n  \n  callModule(datatableModule,\n             'l_by_w_by_d_to_volume_dt',\n             reactive(icL_by_W_by_D_Volume()),\n             7, 3     # nrow, ncol\n  )\n  \n  \n  \n  # ---- ** Volume, D x πr^2 ----\n  \n  icDepth_by_pi_r2_for_Volume <- callModule(lengthModule_uioutput_TWO, \n                                   'd_by_pi_r2_to_volume_depth',\n                                   reactive(input$store_iQlite_dash))\n  \n  icRadius_by_pi_r2_for_Volume <- callModule(lengthModule_uioutput_TWO, \n                                   'd_by_pi_r2_to_volume_radius',\n                                   reactive(input$store_iQlite_dash))\n  \n  icD_by_pi_r2_Volume <- callModule(multiplierModule, 'dummy_d_by_pi_r2_to_volume_dt',\n                                     reactive(icDepth_by_pi_r2_for_Volume()),\n                                     reactive(icRadius_by_pi_r2_for_Volume()),\n                                     1.0,\n                                     'volume_height_by_radius_by_pi_r2')\n  \n  callModule(datatableModule,\n             'd_by_pi_r2_to_volume_dt',\n             reactive(icD_by_pi_r2_Volume()),\n             7, 3     # nrow, ncol\n  )\n  \n  \n  \n  # ---- ** Volume, D x Area ----\n  \n  # icDepth_by_area_for_Volume <- callModule(lengthModule, 'd_by_area_to_volume_depth',\n  #                                           'DEPTH',\n  #                                           reactive(input$store_iQlite_dash))\n  \n  icDepth_by_area_for_Volume <- callModule(lengthModule_uioutput_TWO,\n                                           'd_by_area_to_volume_depth',\n                                           reactive(input$store_iQlite_dash))\n  \n  icArea_by_depth_for_Volume <- callModule(areaModule, 'd_by_area_to_volume_area',\n                                             reactive(input$store_iQlite_dash))\n  \n  icD_by_area_Volume <- callModule(multiplierModule, 'dummy_d_by_area_to_volume_dt',\n                                    reactive(icDepth_by_area_for_Volume()),\n                                    reactive(icArea_by_depth_for_Volume()),\n                                    1.0,\n                                    'volume_height_by_area')\n  \n  callModule(datatableModule,\n             'd_by_area_to_volume_dt',\n             reactive(icD_by_area_Volume()),\n             7, 3     # nrow, ncol\n  )\n  \n  \n  \n  \n  # ---- I.C. Units as reactive expressions ----\n  \n  volDisinfectantToAdd_Without_Module <- reactive({\n    # volume to add in ml/L\n    volInMlPerL <- input$ppmSlider / (10 * input$poStoSlider)\n    \n    # cat('*********************\\n')\n    # total volume of tank in liters\n    #     totalToDisinfectInLiters <- convertVol(input$totVolToDisinfect,\n    #                                            input$disinfectUnitsTot,\n    #                                            'liters (L)')\n    # #     \n    #     totDisinfectantToAdd <- convertVol(totalToDisinfectInLiters * volInMlPerL,\n    #                                        'milliliters (ml)',\n    #                                        input$disinfectUnitsToAdd)\n    \n    # converted <- convertAll(my.liters, my.input.volume, vol.data)\n    \n    # ---\n    \n    # calculate L (I.C. units) to add\n    totalToDisinfectInLiters <- convert(input$totVolToDisinfect,\n                                        input$disinfectUnitsTot,\n                                        'liters (L)', vol.data)\n\n    # convert total mL to add to selected volume units to add\n    totDisinfectantToAdd <- convert(totalToDisinfectInLiters * volInMlPerL,\n                                    'milliliters (ml)',\n                                    input$disinfectUnitsToAdd, vol.data)\n    \n    # cat('             volInMlPerL: ',volInMlPerL, '\\n')\n    # cat(' new convert (volume US): ',convert(1.0, 'gallons (US)', 'liters (L)', vol.data), '\\n')\n    # cat(' new convert (volume UK): ',convert(1.0, 'gallons (UK)', 'liters (L)', vol.data), '\\n')\n    # cat('   new convert (flow):',convert(1.0, 'm³/d', 'acre-ft/d', flow), '\\n')\n    # cat('   new convert (area):',convert(1.0, 'ha', 'm²', area.data), '\\n')\n    # cat('   new convert (area):',convert(1.0, 'ha', 'acre', area.data), '\\n')\n    \n    # x <- convertAll(1.0, 'acre-ft/d', flow)\n    # print(x)\n    \n    #     cat('totalToDisinfectInLiters:',totalToDisinfectInLiters,'\\n')\n    #     cat('    totDisinfectantToAdd:',totDisinfectantToAdd,input$disinfectUnitsToAdd,'\\n')\n    \n    # convertedFlowRate <- convertFlowRate(1.0, 'm³/d', 'liter/d')\n    \n    # cat('*********************\\n')\n    totDisinfectantToAdd\n  })\n  \n  \n  \n  # ---- >>FLOW RATE converter ----\n  \n  icFlowRateConversion <- callModule(flowRateModule, 'flow_rate_conversion',\n                                     reactive(input$store_iQlite_dash))\n  \n  \n  # ---- >>HYDRAULIC LOAD converter ----\n  \n  icHydraulicLoadConversion <- callModule(hydraulicLoadModule, 'hydraulic_load_conversion',\n                                          reactive(input$store_iQlite_dash))\n  \n  \n  # ---- >>BIOMASS converter ----\n  \n  icBiomassConversion <- callModule(biomassModule, 'biomass_convert',\n                                    reactive(input$store_iQlite_dash))\n  \n  \n  # send rows 1:5 to datatableModule\n  biomass_dt_1 <- callModule(datatable_split_Module, 'dummy_biomass_1', \n                             reactive(icBiomassConversion()),\n                             1, 8     # start_row, end_row\n  )\n  \n  # send rows 6:10 to datatableModule\n  biomass_dt_2 <- callModule(datatable_split_Module, 'dummy_biomass_2', \n                             reactive(icBiomassConversion()),\n                             9, 15    # start_row, end_row\n  )\n  \n  callModule(datatableModule,\n             'biomass_convert_1_dt',\n             reactive(biomass_dt_1()),\n             8, 3     # nrow, ncol\n  )\n  \n  callModule(datatableModule,\n             'biomass_convert_2_dt',\n             reactive(biomass_dt_2()),\n             7, 3     # nrow, ncol\n  )\n  \n  \n  # ---- >>ABUNDANCE converter ----\n  \n  icAbundanceConversion <- callModule(abundanceModule, 'abundance_convert',\n                                      reactive(input$store_iQlite_dash))\n  \n  \n  # send rows 1:5 to datatableModule\n  abundance_dt_1 <- callModule(datatable_split_Module, 'dummy_abundance_1', \n                               reactive(icAbundanceConversion()),\n                               1, 4     # start_row, end_row\n  )\n  \n  # send rows 6:10 to datatableModule\n  abundance_dt_2 <- callModule(datatable_split_Module, 'dummy_abundance_2', \n                               reactive(icAbundanceConversion()),\n                               5, 10    # start_row, end_row\n  )\n  \n  callModule(datatableModule,\n             'abundance_convert_1_dt',\n             reactive(abundance_dt_1()),\n             4, 3     # nrow, ncol\n  )\n  \n  callModule(datatableModule,\n             'abundance_convert_2_dt',\n             reactive(abundance_dt_2()),\n             6, 3     # nrow, ncol\n  )\n  \n  \n  \n  # ---- >>GASSES 'converter' ----\n  \n  # convert, e.g., O2 from one unit to others as f(T, S, barometric)\n  callModule(gasConversionModule, 'gas_convert', \n             reactive(input$store_iQlite_dash))\n  \n  # callModule(gasConversionModule, 'gas_convert_2', \n  #            reactive(input$store_iQlite_dash))\n  \n  \n  # ---- ** TGP & Saturation calc ----\n  callModule(tgpModule, 'tgp_input_tgp', \n             reactive(input$store_iQlite_dash))\n  \n  \n  # ---- ** TGP calc ----\n  callModule(gasTgpModule, 'tgp_calc', \n             reactive(input$store_iQlite_dash))\n  \n  \n  # ---- ** O2 Tank Duration ----\n  callModule(o2DurationModule, 'o2_tank_duration', \n             reactive(input$store_iQlite_dash))\n  \n  \n  # ---- >>CRIT UIA ----\n  callModule(uiaModule, 'uia', \n             reactive(input$store_iQlite_dash))\n  \n  \n  # ---- >>AMMONIA Conversion ----\n  ammonia_convert_1 <- callModule(tanConversionModule, 'ammonia_convert', \n                                  reactive(input$store_iQlite_dash))\n  \n  \n  # ---- >>DISINFECTION ----\n  callModule(disinfectionModule, 'disinfect')\n  \n  \n  # ---- >>DATA UPLOAD ----\n  callModule(lwUploadModule, 'lw_analysis', \n             reactive(input$store_iQlite_dash))\n  \n}\n",
    "created" : 1496088392683.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "147185236",
    "id" : "C13E3327",
    "lastKnownWriteTime" : 1506544272,
    "last_content_update" : 1506544272166,
    "path" : "~/Documents/Documents/R Projects/WQ_iQuaCalc_Lite_0.3/server.R",
    "project_path" : "server.R",
    "properties" : {
        "docOutlineVisible" : "1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}