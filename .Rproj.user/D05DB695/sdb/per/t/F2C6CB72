{
    "collab_server" : "",
    "contents" : "# Total Gas Pressure module functions for\n# \"iQuaCalc (Lite).R\"\n\n\ngasTgpModuleInput <- function(id) {\n  \n  ns <- NS(id)\n  \n  tagList(\n    \n    fluidRow(\n      \n      column(width = 5,\n             \n             tabsetPanel(id = ns('my_tabset_tgp_controls'), type = 'pills', selected = NULL,\n                         \n                         tabPanel('Input Summary', value = 'tgp_input_summary',\n                                  \n                                  fluidRow(\n                                    \n                                    column(width = 12,\n                                           wellPanel(style = 'padding-bottom: 0px; margin-top: 35px; \n                                                     margin-left: 10px;',\n                                             \n                                             htmlOutput(ns('gas_input_echo'))\n                                           )\n                                    )\n                                  )\n                         ),\n                         \n                         tabPanel('Water', value = 'tgp_enter_t_and_s',\n                                  \n                                  fluidRow(\n                                    \n                                    # T, S, pH, & Alk column\n                                    column(width = 12,\n                                           \n                                           fluidRow(\n                                             column(width = 12,\n                                                    \n                                                    wellPanel(style = 'padding-bottom: 0px; margin-top: 15px;\n                                                     margin-left: 10px;',\n                                                              \n                                                              temperatureModuleInput(ns('temp_for_tgp'), 0),\n                                                              \n                                                              salinityModuleInput(ns('sal_for_tgp'), 0)\n                                                    ),\n                                                    \n                                                    wellPanel(style = 'padding-bottom: 0px;\n                                                     margin-left: 10px;',\n                                                              \n                                                              gasModuleInput(ns('o2_for_tgp'), 'Oxygen', 1, 'Pure O2')\n                                                    ),\n                                                    \n                                                    wellPanel(style = 'padding-bottom: 0px;\n                                                     margin-left: 10px;',\n                                                              \n                                                              tabsetPanel(id = ns('co2_tabset_panel'),\n                                                                \n                                                                          tabPanel(title = 'CO2 by measurement',\n                                                                                   style = 'padding-top: 8px',\n                                                                         \n                                                                                   co2MeasuredNumericModuleInput(ns('co2_measured_for_tgp'))\n                                                                          ),\n                                                                \n                                                                          tabPanel(title = 'CO2 by pH & [Alk]',\n                                                                                   style = 'padding-top: 5px',\n                                                                                   \n                                                                                   phModuleInput(ns('ph_for_tgp')),\n                                                                                   \n                                                                                   alkModuleInput(ns('alk_for_tgp'), 0)\n                                                                          )\n                                                              )\n                                                    )\n                                             )\n                                           ) # END fluidRow with wellPanel()s\n                                    )  # END column\n                                  )  # END TOP fluidRow\n                         ),   # END tabPanel 'T & S'\n                         \n                         tabPanel('Atmosphere', value = 'tgp_enter_bar_and_co2_atm',\n                                  \n                                  fluidRow(\n                                    \n                                    # barometric & CO2 (atm) column\n                                    column(width = 12,\n                                           \n                                           fluidRow(\n                                             column(width = 12,\n                                                    \n                                                    wellPanel(style = 'padding-bottom: 0px; margin-top: 20px;\n                                                     margin-left: 10px;',\n                                                      \n                                                              barometricNumericModuleInput(ns('barometric_for_tgp'))\n                                                    ),\n                                                    \n                                                    wellPanel(style = 'padding-bottom: 0px;\n                                                     margin-left: 10px;',\n                                                              \n                                                              co2_gasModuleInput(ns('co2_atm_tgp'))\n                                                    )\n                                             )\n                                           )\n                                    )\n                                  )  # END TOP fluidRow\n                                  \n                         )    # END tabPanel Atmos\n                         \n             ) # END tabsetPanel\n             \n      ), # END column for left-side input data\n      \n      column(width = 7,\n             \n             # fluidRow(\n             #   h4('Enter Total Gas Pressure & DO measurements', align = 'center')\n             # ),\n             \n             # Enter TGP & DO\n             fluidRow(\n               column(width = 12,\n                      \n                      wellPanel(style = 'padding-bottom: 0px;\n                                                     margin-rightt: 20px;',\n                                \n                        splitLayout(cellWidths = c('25%', '45%', '30%'),\n                                    \n                                    numericInput(ns('tgpSlider_convert'), 'TGP',\n                                                 min = 0, max = 45, value = 33, step = 0.01),\n                                    \n                                    selectInput(ns('tgpConvertUnits'), 'TGP Units',\n                                                choices = tgpChoices),\n                                    \n                                    tags$h6()\n                        )\n                      )\n               )\n               \n             ),   # END fluidRow 'TGP & DO'\n             \n             # DT (& other output)\n             fluidRow(\n               \n               column(width = 11,\n                      \n                      div(DT::dataTableOutput(ns('tgp_dt')), \n                          style = 'font-size: 115%')\n               )\n             ),  # END fluidRow DT\n             \n             br(), br(),\n             \n             fluidRow(\n                      \n               splitLayout(cellWidths = c('40%', '60%'),\n                           \n                           box(style = \"text-align: center;\",\n                               width = NULL,\n                               # title = 'Pure O2 Tank Duration',\n                               # solidHeader = T,\n                               status = 'primary',\n                               background = 'light-blue',\n                               \n                               tags$h3('Compensation Depth', align = 'center'),\n                               htmlOutput(ns('comp_depth'))\n                           ),\n                           \n                           plotOutput(ns('tgp_plot'), height = '210px', width = '315px')\n               )\n               \n             ) # END fluidRow 'compensation depth'\n        \n      ) # END column for right-side display\n      \n    ) # END top-most fluidRow\n  )\n}\n\n\n\ngasTgpModule <- function(input, output, session, st) {\n  \n  # \"*_init\" flags when app is (re-)launched\n  rv <- reactiveValues(select_init = -1,\n                       tgp_units_default = 'Î” mm Hg (torr)',\n                       tgp_sl_init = -1,\n                       tgp_default = tgpSet,\n                       duct_tape_2 = -1)\n  \n  \n  \n  icTemp <- callModule(temperatureModule, 'temp_for_tgp', reactive(st()))\n\n  icSal <- callModule(salinityModule, 'sal_for_tgp',\n                      reactive(icTemp()),\n                      reactive(st()))\n\n  icPh <- callModule(phModule, 'ph_for_tgp',\n                     reactive(icTemp()), \n                     reactive(icSal()),\n                     reactive(st()))\n\n  icAlk <- callModule(alkModule, 'alk_for_tgp',\n                      reactive(icTemp()), \n                      reactive(icSal()),\n                      reactive(st()))\n  \n  icBarometric <- callModule(barometricNumericModule, 'barometric_for_tgp',\n                             reactive(st()))\n\n  # co2_data <- callModule(co2_gas_atm_Module, 'co2_atm_tgp',\n  #                         reactive(st()))\n\n  # module for ATMOSPHERIC CO2 ----\n  co2_data <- callModule(co2_gasModule, 'co2_atm_tgp',\n                         # reactive(icTemp()), reactive(icSal()),\n                         # reactive(icPh()), reactive(icAlk()),\n                         # reactive(icBarometric()),\n                         reactive(st()))\n  \n  icO2 <- callModule(gasModule, 'o2_for_tgp',\n                     reactive(icTemp()), reactive(icSal()),\n                     # 'Oxygen', 1, 'Pure O2',  # NB: 'O2', **NOT** 'Oxygen'\n                     'O2', 1, 'Pure O2',  # NB: 'O2', **NOT** 'Oxygen'\n                     reactive(st()))\n  \n  # module, DISSOLVED & MEASURED CO2 ----\n  # accepts entered concentration and returns...only mg/L, for now??\n  co2_dissolved_measured <- callModule(co2MeasuredNumericModule, 'co2_measured_for_tgp',\n                                       reactive(icTemp()), reactive(icSal()),\n                                       reactive(icPh()), \n                                       reactive(st()))\n                           \n  # icGasSatCalc <- callModule(gasSatModule, 'dummy_gas_sat',\n  #                            reactive(icTemp()), reactive(icSal()),\n  #                            reactive(icPh()), reactive(icAlk()),\n  #                            reactive(icBarometric()), reactive(co2_data()),\n  #                            reactive(st()))\n  \n  \n  \n  # ---- TGP ----\n  \n  # Observe SELECT_INPUT input, store when changed\n  observeEvent(input$tgpConvertUnits, priority = 50, {\n    \n    if(rv$select_init < 0)  {\n      \n      x <- session$ns('tgpConvertUnits')\n      \n      rv$select_init <- 1\n      \n      tgp_units_init <- st()[[x]]\n      \n      if(length(tgp_units_init) == 0)\n        tgp_units_init <- rv$tgp_units_default\n      \n      # user (re-)opened app. Is store$select empty?\n      updateSelectInput(session, 'tgpConvertUnits', 'TGP Units', \n                        choices  = tgpChoices,\n                        selected = tgp_units_init)\n      \n      freezeReactiveValue(input, \"tgpConvertUnits\")\n    }\n    \n    updateStore(session, session$ns(\"tgpConvertUnits\"), input$tgpConvertUnits)\n    \n    idx <- which(input$tgpConvertUnits == tgpUnitsList)\n    \n    y <- paste0(session$ns('sl_'), input$tgpConvertUnits)\n    \n    my_tgp_value <- st()[[y]]\n    \n    if(length(my_tgp_value) == 0)\n      my_tgp_value <- rv$tgp_default[idx]\n    \n    \n    updateNumericInput(session, \"tgpSlider_convert\", label = paste0(tgpUnitsList_short[idx], ' TGP'),\n                       value = my_tgp_value,\n                       min = tgpMin[idx], max = tgpMax[idx], step = tgpStep[idx])\n    \n    # updateSliderInput(session, \"tgpSlider_convert\", label = paste0(tgpUnitsList_short[idx], ' TGP'),\n    #                   value = my_tgp_value,\n    #                   min = tgpMin[idx], max = tgpMax[idx], step = tgpStep[idx])\n    \n    freezeReactiveValue(input, \"tgpSlider_convert\")\n    \n    # update slider value for current units ???\n    updateStore(session, paste0(session$ns('sl_'), input$tgpConvertUnits), my_tgp_value)\n    \n  })\n  \n  \n  # Observe SLIDER_INPUT input, store when changed\n  # observeEvent(c(input$gasSlider_convert, icTemp(), icSal()), {\n  observeEvent(input$tgpSlider_convert, {\n    \n    if(rv$tgp_sl_init < 0) {\n      \n      rv$tgp_sl_init <- 1\n      \n      return()\n    }\n    \n    idx <- which(input$tgpConvertUnits == tgpUnitsList)\n    \n    y <- paste0(session$ns('sl_'), input$tgpConvertUnits)\n    \n    my_tgp_value <- st()[[y]]\n    \n    \n    if(length(my_tgp_value) == 0)\n      my_tgp_value <- rv$tgp_default[idx]\n    else\n      my_tgp_value <- input$tgpSlider_convert\n    \n    # update slider value for current units\n    updateStore(session, paste0(session$ns('sl_'), input$tgpConvertUnits), my_tgp_value)\n    \n  })\n  \n  \n  \n  # ---- ECHO INPUT ----\n  \n  # ECHO gas inputs\n  output$gas_input_echo <- renderUI({\n    \n    req(icBarometric())\n    \n    str1 <- tags$strong(paste0('Temperature: ', icTemp()$val,' ', icTemp()$units))\n    str2 <- tags$strong(paste0('   Salinity: ', icSal()$val,' ', icSal()$units))\n    str3 <- tags$strong(paste0('         pH: ', icPh()$val,' ', icPh()$units))\n    str4 <- tags$strong(paste0(' Alkalinity: ', icAlk()$val,' ', icAlk()$units))\n    \n    # if units of 'altitude', then display estimated pressure in mm Hg\n    if(icBarometric()$units %in% c('km', 'm', 'ft')) {\n      \n      # returns ic barometric in atm, convert to mm Hg\n      barometric_in_mmHg <- calcBarometricToIcUnits(icBarometric()$val, icBarometric()$units) * 759.999952\n      barometric_in_mmHg <- round(barometric_in_mmHg, 1)\n      \n      str5 <- tags$strong(paste0(icBarometric()$val,' ', icBarometric()$units, \n                                 ' (~ ', barometric_in_mmHg, ' mm Hg)'))\n    } else {\n      \n      str5 <- tags$strong(paste0(' Barometric: ', icBarometric()$val,' ', icBarometric()$units))\n    }\n    \n    str6 <- tags$strong(paste0('  COâ‚‚ (atm): ', co2_data()$val,' ', co2_data()$units))\n    # str6 <- paste0('CO', tags$sub(2), ' (atm): ', icCO2_tgp()$val,' ', icCO2_tgp()$units)\n    \n    HTML(paste(tags$h4(str1), tags$h4(str2), tags$hr(),\n               tags$h4(str3), tags$h4(str4), tags$hr(),\n               tags$h4(str5), tags$h4(str6)))\n    # sep = '<br/>'))\n    # HTML(paste(tags$h4(str1)))\n    \n  })\n  \n  \n  # Compensation Depth ----\n  \n  output$comp_depth <- renderUI({\n    \n    if(df_tgp()$comp_depth < 0) {\n      \n      str1 <- tags$h4('The water column is')\n      str2 <- tags$h4('under-saturated')\n      str3 <- ''\n      \n    } else {\n      \n      my_comp_depth <- as.numeric(formatC(round(df_tgp()$comp_depth, 5), format='f', digits=4))\n      \n      # ad hoc change m to m & cm...\n      meters <- floor(my_comp_depth)\n      cm     <- round((my_comp_depth - meters) * 100, 2)\n      \n      meters_centimeters <- paste0(meters, ' m ', cm, ' cm')\n      \n      str1 <- tags$h3(paste0(round(my_comp_depth, 2), ' m'))\n      str2 <- tags$h4(paste0('(', meters_centimeters, ')'))\n      str3 <- tags$h4(paste0('(', convertMetersToFtAndInches(my_comp_depth)[1]), ')')\n    }\n    \n    # see: https://stackoverflow.com/questions/26368192/how-to-insert-new-line-in-r-shiny-string\n    # HTML(paste(\"hello\", \"world\", sep=\"<br/>\"))\n    \n    HTML(paste0(str1, str2, str3, sep = \"<br/>\"))\n    \n  })\n  \n  \n  # PLOT TGP vs. depth ----\n  \n  tgp_depth_df <- reactive({\n    \n    z_comp <- df_tgp()$comp_depth\n    \n    req(z_comp >= 0)\n    \n    z_seq  <- seq(z_comp * 1.5, 0, -0.1)\n    \n    \n    # # convert BP from IC atm to mm Hg\n    # bp_mmHg <- bp_ic * 759.999952\n    mmHg_per_meter   <- getPressureIncreaseWithDepth(icTemp()$ic, icSal()$ic)\n    \n    # calc pressure with depth like thie...? ----\n    # tgp_mmHg <- z_comp_in_meters * mmHg_per_meter + bp_mmHg\n    # Î”P <- z_seq * mmHg_per_meter\n    \n    tgp_seq <- seq(100, 0, -0.1)\n    \n    # cat('in gas_tgp_module.R/tgp_depth_df...\\n')\n    delta_P_in_mmHg <- as.numeric(df_tgp()$delta_P)\n    # cat('delta_P_in_mmHg = ', delta_P_in_mmHg, ' mm Hg \\n')\n    x <- delta_P_in_mmHg - (mmHg_per_meter * z_seq)\n    # print(x)\n    # print(z_seq)\n    # cat('======================== \\n\\n')\n    \n    df <- data.frame(z = z_seq, delta_P = x,\n                     stringsAsFactors = F)\n    \n    df\n    \n  })\n  \n  \n  output$tgp_plot <- renderPlot({\n    \n    # geom_blank() + \n    \n    z_comp <- df_tgp()$comp_depth\n    \n    req(z_comp >= 0)\n    \n    z_comp_zone <- tibble(x = c(-Inf,   Inf,    Inf, -Inf), \n                          y = c(z_comp, z_comp, Inf,  Inf))\n                              # stringsAsFactors = F)\n    \n    z_comp_no <- tibble(x = c(-Inf,   Inf,    Inf, -Inf), \n                        y = c(z_comp, z_comp, 0,    0))\n                            # stringsAsFactors = F)\n    \n    \n    # NB: remove \"geom_path: Each group consists of only one observation. Do you need to adjust the group aesthetic?\"\n    # see: https://stackoverflow.com/questions/27082601/ggplot2-line-chart-gives-geom-path-each-group-consist-of-only-one-observation\n    # , group = 1\n    p <- tgp_depth_df() %>% ggplot(aes(delta_P, z, group = 1)) + \n      scale_y_reverse() +\n      geom_line(color = 'blue') +\n      geom_hline(yintercept = z_comp, linetype = \"dashed\") +\n      xlab('Î”P (mm Hg)') +\n      ylab('depth (m)') +\n      \n      geom_polygon(data = z_comp_zone,\n                   aes(x = x,\n                       y = y\n                   ),\n                   alpha = 0.4,\n                   fill = \"darkgreen\"\n      ) +\n      \n      geom_polygon(data = z_comp_no,\n                   aes(x = x,\n                       y = y\n                   ),\n                   alpha = 0.2,\n                   fill = \"red\"\n      )\n      \n      # coord_cartesian(xlim = c(-6, as.numeric(df_tgp()$delta_P)),\n      #                 ylim = c(0, 5),\n      #                 expand = F)\n    \n    p <- p + scale_x_continuous(position = 'top')\n    \n    p\n    \n  })\n  \n  \n  # ---- DF_CO2() ----\n  \n  df_co2 <- reactive({\n    \n    my_icTemp       <- icTemp()$ic\n    my_icSal        <- icSal()$ic\n    my_icPh         <- icPh()$ic\n    \n    my_icAlk        <- icAlk()$ic / 1000.0\n    \n    my_icBarometric <- icBarometric()$ic\n    \n    \n    if('CO2 by measurement' == input$co2_tabset_panel) {\n      \n      co2_in_mg_per_L <- co2_dissolved_measured()$co2_mg_per_L\n      \n    } else {\n      \n      co2_actual_mol_kg <- alphaZero(my_icTemp, my_icSal, my_icPh) * calcDicOfAlk(my_icAlk, my_icPh, my_icTemp, my_icSal)\n      \n      co2_in_mg_per_L <- 1000.0 * co2_actual_mol_kg * MW_CO2 * (calcRho(my_icTemp, my_icSal) / 1000.0)\n      \n    }\n    \n    co2_for_tgp <- tgp_calc_co2(my_icTemp, my_icSal,\n                                icPh()$ic, icAlk()$ic,    # NB: [Alk] in meq/kg (e.g., \"2.4\")\n                                co2_data()$co2_mole_frac,\n                                my_icBarometric,\n                                co2_in_mg_per_L)\n    \n    \n    co2_for_tgp$'%'       <- formatC(co2_for_tgp$'%',       format='f', digits=2)\n    co2_for_tgp$'Î” mm Hg' <- formatC(co2_for_tgp$'Î” mm Hg', format='f', digits=2)\n    co2_for_tgp$'mm Hg'   <- formatC(co2_for_tgp$'mm Hg',   format='f', digits=2)\n    \n    co2_for_tgp\n    \n  })\n  \n  \n  # ---- DF_TGP() ----\n  \n  df_tgp <- reactive({\n    \n    # ----------------------------------------*\n    # NB: MUST 'flatten' named gasChoices to gasUnitsListPref ----\n    idx_g <- which(input$tgpConvertUnits == tgpUnitsList)\n    \n    tgp.LL    <- tgpMin[idx_g]\n    tgp.UU    <- tgpMax[idx_g]\n    tgp.units <- tgpUnitsList[idx_g]\n    \n    str_message <- paste0('Please enter a TGP value between ', \n                          tgp.LL, ' & ', tgp.UU, ' ', tgp.units)\n    \n    validate(\n      \n      need(\n        \n        try(\n          \n          input$tgpSlider_convert >= tgp.LL && \n            input$tgpSlider_convert <= tgp.UU\n        ),\n        \n        str_message\n      )\n    )\n    # ----------------------------------------*\n    \n    req(\n      input$tgpSlider_convert, input$tgpConvertUnits,\n      icTemp(), icSal(),\n      icO2(),\n      co2_data(),\n      df_co2(),\n      icBarometric(),\n      cancelOutput = T\n    )\n    \n    my_icTemp       <- icTemp()$ic\n    my_icSal        <- icSal()$ic\n    my_icO2         <- icO2()$ic\n    my_icBarometric <- icBarometric()$ic\n    my_icPh         <- icPh()$ic\n    my_icAlk        <- icAlk()$ic\n    \n    \n    # TGP I.C. units -- NOT atm, but (inconveniently) \"%\"\n    icTgp <- calcTgpToIcUnits(input$tgpSlider_convert, input$tgpConvertUnits, my_icBarometric)\n    \n    df <- calcTgpToAllUnits(input$tgpSlider_convert, input$tgpConvertUnits, my_icBarometric)\n    \n    # --------------------------*\n    ic_delta_p <- calc_delta_p_to_ic_units(input$tgpSlider_convert, \n                                           input$tgpConvertUnits, \n                                           my_icBarometric)\n    \n    # my_df <- calc_delta_p_to_all_units(input$tgpSlider_convert, \n    #                                    input$tgpConvertUnits, \n    #                                    my_icBarometric)\n    \n    # cat('\\n in gas_tgp_module.R: ...\\n')\n    # cat('ic_delta_p => ', ic_delta_p, '\\n\\n')\n    # # print(df %>% spread(units, vals))\n    # cat('----------------\\n')\n    # print(my_df %>% spread(units, vals))\n    # print(co2_dissolved_measured()$co2_mg_per_L)\n    # cat('----------------\\n')\n    \n    \n    is_co2_by_measurement <- ifelse(('CO2 by measurement' == input$co2_tabset_panel),\n                                    TRUE,\n                                    FALSE)\n    \n    tgp_df <- calc_tgp_n2ar_o2_co2(my_icTemp, my_icSal,\n                                   my_icPh,   my_icAlk,    # NB: [Alk] in meq/kg (e.g., \"2.4\")\n                                   my_icBarometric,\n                                   ic_delta_p,\n                                   my_icO2,\n                                   is_co2_by_measurement,\n                                   co2_data()$co2_mole_frac,\n                                   co2_dissolved_measured()$co2_mg_per_L)\n    \n    # cat('\\n********************\\n')\n    # print(tgp_df)\n    # cat('********************\\n\\n')\n    # --------------------------*\n    \n    # tgp_mmHg   <- df$vals[2]\n    # tgp_mmHg_2 <- my_df$vals[2]\n    \n    tgp_mmHg_3 <- as.numeric(tgp_df$'Total Gas'[1])\n    \n    # cat(tgp_df$'Total Gas'[1], '\\n')\n    # cat(class(tgp_df$'Total Gas'[1]), '\\n')\n    \n    # cat(df$'Î” mm Hg'[1], ' vs. ', ic_delta_p, ' vs ', tgp_mmHg_3, '\\n')\n    \n    comp_depth <- tgpCalcCompDepth(tgp_mmHg_3, \n                                   my_icBarometric, \n                                   my_icTemp, \n                                   my_icSal,\n                                   'm')\n    \n    # df <- df %>% spread(units, vals)\n    \n    # get O2 and N2 data for TGP -- alraedy spread\n    # df_o2_n2 <- tgpCalcN2ArFromTgp_po_sto(icTgp,\n    #                                       my_icO2,\n    #                                       my_icTemp, my_icSal,\n    #                                       my_icBarometric)\n    \n    # Have to format here -- but why?!\n    \n    # df$'%'[1]       <- formatC(round(df$'%'[1], 3),       format='f', digits=2)\n    # df$'Î” mm Hg'[1] <- formatC(round(df$'Î” mm Hg'[1], 3), format='f', digits=2)\n    # df$'mm Hg'[1]   <- formatC(round(df$'mm Hg'[1], 3),   format='f', digits=2)\n    # \n    # df_o2_n2$'Î” mm Hg'[1] <- formatC(round(df_o2_n2$'Î” mm Hg'[1], 3), format='f', digits=2)\n    # # [????] WHY must explicitly cast 'numeric' to as.numeric() ??\n    # df_o2_n2$'Î” mm Hg'[2] <- formatC(round(as.numeric(df_o2_n2$'Î” mm Hg'[2]), 3), format='f', digits=2)\n    # \n    # df_o2_n2$'mm Hg'[1] <- formatC(round(df_o2_n2$'mm Hg'[1], 3),             format='f', digits=2)\n    # df_o2_n2$'mm Hg'[2] <- formatC(round(as.numeric(df_o2_n2$'mm Hg'[2]), 3), format='f', digits=2)\n    # \n    # df_o2_n2$'%'[1] <- formatC(round(df_o2_n2$'%'[1], 3),             format='f', digits=2)\n    # df_o2_n2$'%'[2] <- formatC(round(as.numeric(df_o2_n2$'%'[2]), 3), format='f', digits=2)\n    \n    \n    # Vapor Pressure ----\n    # vp_in_atm  <- calcVP(my_icTemp, my_icSal) # in atm\n    # vp_in_mmHg <- vp_in_atm * 759.99999\n    \n    # vapor pressure df\n    # df_vp <- data.frame(gas = c(rep('VP', 3)), \n    #                     vals = c('--', formatC(vp_in_mmHg, format='f', digits=2), '--'),\n    #                     units = c('%', 'mm Hg', 'Î” mm Hg'),\n    #                     \n    #                     stringsAsFactors = F\n    #                     )\n    \n    # df_vp <- df_vp %>% spread(units, vals)\n    \n    \n    # x <- bind_rows(df, df_o2_n2, df_co2(), df_vp)\n    \n    # tgp_list <- list(df = df, ic = icTgp)\n    tgp_list <- list(df         = tgp_df, \n                     ic         = icTgp,\n                     delta_P    = ic_delta_p,   # in mm Hg\n                     # delta_P    = df$'Î” mm Hg'[1],   # in mm Hg\n                     comp_depth = comp_depth)\n    \n    # 1/2 \"duct tape\" solution ... ----\n    rv$tgp_sl_init <- 5\n    \n    tgp_list\n    \n  })\n  \n  \n  proxy_dt_data = dataTableProxy(session$ns('tgp_dt'))\n  # proxy_dt_data = dataTableProxy('tgp_dt')\n  \n  # NB: replaceData doesn't work in module namespace\n  # see: https://github.com/rstudio/DT/issues/359 for workaround \n  # observeEvent(df_tgp(), {\n  observe({\n    \n    # replaceData(proxy_dt_data, dummy(), rownames = F, resetPaging = FALSE)\n    \n    dataTableAjax(session, df_tgp()$df, rownames = F, outputId = 'tgp_dt')\n    reloadData(proxy_dt_data, resetPaging = F)\n    \n  })\n  \n  \n  output$tgp_dt <- DT::renderDataTable({\n    \n    rv$tgp_sl_init\n    # icTemp()$ic\n    # req(df_tgp(), cancelOutput = T)\n    \n    datatable( isolate(df_tgp()$df),\n               # datatable( df_tgp()$df,\n               \n               rownames = F,\n               \n               options = list(dom = 't',\n                              'bSort' = F,\n                              'bInfo' = F,\n                              pageLength = 3,\n                              \n                              # columnDefs = list(list(targets = 2, visible = F)),\n                              columnDefs = list(list(className = 'dt-right', targets = 0:5)),\n                              \n                              initComplete = JS(\n                                \"function(settings, json) {\",\n                                \"$(this.api().table().header()).css({'background-color': 'lightblue', 'color': '#000'});\",\n                                \"}\")\n               ) \n    )\n    \n  })\n  \n  \n}",
    "created" : 1507117922181.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1909138907",
    "id" : "F2C6CB72",
    "lastKnownWriteTime" : 1507073895,
    "last_content_update" : 1507073895,
    "path" : "~/Documents/Documents/R Projects/WQ_iQuaCalc_Lite_0.3/modules/gas_tgp_module.R",
    "project_path" : "modules/gas_tgp_module.R",
    "properties" : {
        "docOutlineVisible" : "1"
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}