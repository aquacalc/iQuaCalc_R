{
    "collab_server" : "",
    "contents" : "# Total Gas Pressure module functions for\n# \"iQuaCalc (Lite).R\"\n\n# see: http://blog.fastforwardlabs.com/2017/06/30/Places-Journal-Mississippi-Basin.html?imm_mid=0f42d5&cmp=em-data-na-na-newsltr_20170712\n# \"...reducing the complexity of the real world to the most important, \n# salient features that affect a problem, and by bringing disconnected, \n# distant phenomena into view from a single perspective\"\n\n# The point we take from Borges (and from Cheramie) is that no model can be a \n# complete recapitulation of the real world. Instead, we bracket off parts of \n# the world, model those parts, and use the insights it gives us to make \n# interventions in the world. \n\n\n\n# for extendedShinyjs()\n# see: http://deanattali.com/2015/05/31/shinyjs-extend/\n# and: x_test-code/test_extendedShinyjs.R\njsCode <- '\nshinyjs.backgroundCol = function(params) {\n\nvar defaultParams = {\nid : null,\ncol : \"green\",\ncol2 : \"white\"\n};\n\nparams = shinyjs.getParams(params, defaultParams);\n\nvar el = $(\"#\" + params.id);\n\nel.css(\"background-color\", params.col);\n\nel.css(\"color\", params.col2);\n\n}'\n\n\n\nwqMapModuleInput <- function(id) {\n  \n  ns <- NS(id)\n  \n  tagList(\n    \n    fluidRow(\n      \n      extendShinyjs(text = jsCode),\n      \n      \n      # COL #1/3 Input ----\n      \n      column(width = 4,\n             \n             tabsetPanel(id = 'my_tabset_wq_map_controls', type = 'pills', selected = NULL,\n                         \n                         tabPanel('V, T, & S', value = 'wq_map_enter_t_and_s',\n                                  \n                                  fluidRow(\n                                    column(width = 12,\n                                           wellPanel(style = \"padding: 5px 2px 1px 5px;\",\n                                                     \n                                                     volumeNumericModuleInput(ns('volume_for_wq_map'))\n                                           )\n                                    )\n                                  ),\n                                  \n                                  fluidRow(\n                                    # T, S, pH, & Alk column\n                                    column(width = 12,\n                                                    \n                                           wellPanel(style = \"padding: 5px 2px 1px 5px;\",\n                                                     \n                                                     fluidRow(\n                                                       column(width = 12,\n                                                              temperatureNumericModuleInput(ns('temp_for_wq_map'))\n                                                       )\n                                                     ),\n                                                     \n                                                     fluidRow(\n                                                       column(width = 12,\n                                                              salinityNumericModuleInput(ns('sal_for_wq_map'))\n                                                       )\n                                                     )\n                                           )\n                                    )\n                                  )  # END TOP fluidRow\n                         ),   # END tabPanel 'T & S'\n                         \n                         tabPanel('Waypoints', value = 'wq_map_enter_ph_and_alk',\n                                  \n                                  fluidRow(\n                                    \n                                    column(width = 12,\n                                           \n                                           tags$div(\n                                             style=\"padding: 2px 8px 5px 8px; \n                                             background-color: #F5F5F5;\n                                             border-style: solid;\n                                             border-color: #E8E8E8;\n                                             border-width: 2px;\n                                             margin-bottom: 7px\",\n                                             \n                                             tags$strong(tags$h5('INITIAL pH & Alkalinity')),\n                                             \n                                             splitLayout(cellWidths = c('22%', '78%'),\n                                                         \n                                                         phNumericModuleInput(ns('ph_initial_for_wq_map')),\n                                                         \n                                                         alkInitialWpModuleInput(ns('alk_initial_for_wq_map'))\n                                             )\n                                           )\n                                    )\n                                  ),\n                                  \n                                  fluidRow(\n                                    \n                                    column(width = 12,\n                                           # padding: 5px 2px 1px 5px;\n                                           # padding: 2px 8px 5px 8px;\n                                           tags$div(\n                                             style=\"padding: 2px 8px 5px 8px; \n                                             background-color: whitesmoke;\n                                             border-style: solid;\n                                             border-color: #E8E8E8;\n                                             border-width: 2px;\",\n                                             \n                                             tags$strong(tags$h5('TARGET pH & Alkalinity')),\n                                             \n                                             splitLayout(cellWidths = c('22%', '78%'),\n                                                         \n                                                         phNumericModuleInput(ns('ph_final_for_wq_map')),\n                                                         \n                                                         alkTargetWpModuleInput(ns('alk_final_for_wq_map'))\n                                             )\n                                           )\n                                    )\n                                  ),  # END FINAL pH & Alk fluidRow\n                                  \n                                  hr()\n                                  \n                         ),   # tabPanel pH & Alk\n                         \n                         \n                         tabPanel(HTML(paste0('TAN & CO', tags$sub('2'))), value = 'wq_map_enter_tan_and_co2',\n                                  \n                                  fluidRow(\n                                    \n                                    column(width = 12,\n                                           \n                                           wellPanel(style = \"padding: 5px 2px 1px 5px;\",\n                                                     \n                                                     fluidRow(\n                                                       column(width = 12,\n                                                              tanNumericModuleInput(ns('tan_for_wq_map'))\n                                                       )\n                                                     ),\n                                                     \n                                                     fluidRow(\n                                                       column(width = 12,\n                                                              uiaNumericModuleInput(ns('uia_for_wq_map'))\n                                                       )\n                                                     )\n                                           )\n                                      \n                                    )\n                                    \n                                    #        # INSTEAD of a \"tanModule/Input\" module ----\n                                    #        # ...TAN input for the WQ Map only is used to draw the critical pH region within which \n                                    #        # UIA exceeds the UIA safe-level\n                                    #        # i.e., there is no need to calc and display a full conversion table, as in tan_conversion_module.R\n                                    #        # S0 -- at least for now -- hard-code the TAN input UI here and use in the server.R\n                                    #        # to perform the necessary calcs: conversion (as needed) to I.C. units & calc of UIA-crit pH\n                                    \n                                  ),  # END TOP fluidRow\n                                  \n                                  fluidRow(\n                                    \n                                    column(width = 12,\n                                           \n                                           wellPanel(style = \"padding: 5px 2px 1px 5px;\",\n                                                              \n                                                     co2DissolvedNumericModuleInput(ns('co2_dissolved_for_wq_map'))\n                                           )\n                                    )\n                                  )\n                                  \n                         ),    # END tabPanel TAN & Ca\n                         \n                         tabPanel(HTML(paste0('Ca', tags$sup('++'), ' & \\u03A9')), value = 'wq_map_input_calcium',\n                                  \n                                  fluidRow(\n                                    \n                                    box(width = 12, title = 'Calcium',\n                                        \n                                        caNumericModuleInput(ns('ca_for_wq_map'))\n                                    )\n                                  )\n                         )\n                         \n             ), # END tabsetPanel\n             \n             \n             fluidRow(\n               \n               column(width = 12,\n                      \n                      tabsetPanel(type = 'pills',\n                                  \n                                  tabPanel('Summary', value = 'wq_map_input_summary',\n                                           \n                                           fluidRow(\n                                             \n                                             column(width = 12,\n                                                    wellPanel(\n                                                      htmlOutput(ns('wq_map_input_echo'))\n                                                    )\n                                             )\n                                           )\n                                  ),\n                                  \n                                  tabPanel(title = 'Green Zone',\n                                           \n                                           alkGreenZoneModuleInput(ns('green_zone_alk')),\n                                           \n                                           splitLayout(cellWidths = c('80%', '20%'),\n                                                       \n                                                       sliderInput(ns('green_zone_ph'), 'pH Range',\n                                                                   min = 6.0, max = 9.0, step = 0.1,\n                                                                   value = c(6.8, 7.5)),\n                                                       \n                                                       checkboxInput(ns('tc_show_green_zone'), 'Show', value = F)\n                                           )\n                                  ),\n                                  \n                                  tabPanel(title = 'Axis Scales',\n                                           \n                                           sliderInput(ns('scale_x_axis'), 'x-Axis Scale',\n                                                       min = 0, max = 8, step = 0.1,\n                                                       value = c(0, 4)),\n                                           \n                                           sliderInput(ns('scale_y_axis'), 'y-Axis Scale',\n                                                       min = 0, max = 8, step = 0.1,\n                                                       value = c(0, 4))\n                                  )\n                                  \n                      ) # END tabsetPanel for axis scales & Green Zone\n               )\n             ) # END fluidRow for Axes sliders, Green Zone...\n             \n      ), # END column for left-side input data\n      \n      \n      # COL #2/3 WQ Map ----\n      \n      column(width = 5,\n             \n             fluidRow(\n               \n               column(width = 12, \n                      \n                      htmlOutput(ns('wq_map_title_t_and_s')),\n                      \n                      plotOutput(ns('wq_map'), width = '100%', height = '345px')\n               )\n             ),\n               \n             fluidRow(\n               \n               column(width = 12,\n                      \n                      box(\n                        title = 'WQ Adjustment Recipe',\n                        width = '400px',\n                        solidHeader = T,\n                        background = 'light-blue',\n                        \n                        htmlOutput(ns('wq_adjustment_result'))\n                      )\n               )\n             )\n      ),  # END middle column\n      \n      \n      # COL #3/3 Reagents ----\n      \n      column(width = 3,\n             \n             fluidRow(\n               \n               column(width = 12,\n                      \n                      tabsetPanel(type = 'pills',\n                                  \n                                  tabPanel(title = 'Reagents',\n                                           \n                                           br(),\n                                           \n                                           tags$div(\n                                             radioButtons(ns('rb_adjustment'), label = 'Adjustment Calculation',\n                                                          choices = c('By Target', 'By Amount'), selected = 'By Target',\n                                                          inline = T),\n                                             \n                                             align = 'center'\n                                           ),\n                                           \n                                           uiOutput(ns('ui_reagents')),\n                                           \n                                           includeScript(\"www/cbToggleAntics.js\"),\n                                           \n                                           tags$div(actionButton(ns('calculate_adjustment'), \n                                                                 label = 'Calculate the Adjustment!'),\n                                                    align = 'center')\n                                           \n                                  ),\n                                  \n                                  tabPanel(title = 'Processes',\n                                           \n                                           tags$h4('Other WQ processes...', align = 'center'),\n                                           \n                                           tags$div(align = 'center',\n                                                    \n                                                    actionButton(ns('modal_feed'), \"Feed Dialog\", width = '200px'), br(),\n                                                    \n                                                    actionButton(ns('modal_mixing'), \"Mixing Dialog\", width = '200px'), br(),\n                                                    \n                                                    actionButton(ns('modal_photosynthesis'), \"Photosynthesis Dialog\", width = '200px')\n                                           )\n                                  ),\n                                  \n                                  tabPanel(title = 'WQ State',\n                                           \n                                           tags$h4('Waypoint table...', align = 'center')\n                                           \n                                  )  \n                      )  # END tabsetPanel for Reagent Menu & Processes\n                      \n               )\n             ),   # END top fluidRow of last column\n             \n             fluidRow(\n               \n               column(width = 12,\n                      \n                      htmlOutput(ns('wq_state'))\n               )\n             )\n             \n      )  # END last column -- tabsetPanel with Reagents & Processes\n      \n    ) # END 'master' fluidRow\n  \n  )  # END tagList\n}\n\n\n\nwqMapModule <- function(input, output, session, st) {\n  \n  \n  # \"*_init\" flags when app is (re-)launched ----\n  rv <- reactiveValues(select_init = -1,\n                       tan_units_default = 'mg/L TA-N',\n                       tan_sl_init = -1,\n                       duct_tape_2 = -1,\n                       tan_default = c(2, 2, 20, 20, 0.2, 0.2,\n                                       1, 1, 10, 10, 0.1, 0.1,\n                                       \n                                       2, 2, 20, 20, 0.2, 0.2,\n                                       1, 1, 10, 10, 0.1, 0.1\n                       )\n                       \n                       # duct_tape_for_plot = -1   # progress for ggplot change?\n  )\n  \n  \n  # see: https://stackoverflow.com/questions/43641103/change-color-actionbutton-shiny-r\n  rv_recalc_adjustment <- reactiveValues(\n    clicked = F\n  )\n  \n  \n  # [TEST] DIS-ABLE rb ----\n  \n  observe({\n    \n    # [KLUDGE] \n    shinyjs::disable('rb_adjustment')\n    \n    # shinyjs::disable(session$ns('alk_final_for_wq_map'))\n    \n    # if(input$rb_adjustment == 'By Target') {\n    #   cat('PROCEED with point-to-point calculation...\\n')\n    # }\n    # else{\n    #   cat('RUN -By Amount- calculation...\\n')\n    # }\n    \n  })\n  \n  \n  icTemp      <- callModule(temperatureNumericModule, 'temp_for_wq_map', \n                           reactive(st()))\n  # NB: THIS has potential to avoid the annoyingly 'immediate' validation message when first enter, \n  #     say, \"1\" (an invalid temperature) quickly followed by \"8\" (\"18\" is a valid temperature)\n  # see: https://shiny.rstudio.com/reference/shiny/latest/debounce.html\n  # icTemp <- debounce(icTemp, 500, priority = 100, domain = getDefaultReactiveDomain())\n  \n  icSal       <- callModule(salinityNumericModule, 'sal_for_wq_map',\n                           reactive(icTemp()),\n                           reactive(st()))\n  \n  icPh_init   <- callModule(phNumericModule, 'ph_initial_for_wq_map',\n                           reactive(icTemp()),\n                           reactive(icSal()),\n                           reactive(st()))\n  \n  icPh_final  <- callModule(phNumericModule, 'ph_final_for_wq_map',\n                            reactive(icTemp()),\n                            reactive(icSal()),\n                            reactive(st()))\n  \n  icAlk_init  <- callModule(alkInitialWpModule, 'alk_initial_for_wq_map',\n                            reactive(icTemp()),\n                            reactive(icSal()),\n                            reactive(st()))\n\n  icAlk_final <- callModule(alkTargetWpModule, 'alk_final_for_wq_map',\n                            reactive(icAlk_init()), # provides alk units to echo by target alk\n                            reactive(icTemp()),\n                            reactive(icSal()),\n                            reactive(st()))\n  \n  icVol       <- callModule(volumeNumericModule, 'volume_for_wq_map',\n                            reactive(st()))\n  \n  # NB: Used here ONLY to return mg / L TA-N (converted to that ic value, if needed)\n  #     that value is used to calc critPh_Nbs, which then is used to define the UIA 'danger zone\"\n  # so, use icTan()$ic\n  icTan       <- callModule(tanNumericModule, 'tan_for_wq_map',\n                            reactive(icTemp()),\n                            reactive(icSal()),\n                            reactive(icPh_init()), # NB: need pH for this implementation -- critPh line??\n                            reactive(st()))\n  \n  # NB: Used here ONLY to return mg/L UIA-N (converted to that ic value, if needed)\n  #     that value is used to calc critPh_Nbs, which then is used to define the UIA 'danger zone\"\n  # so, use icUia()$df[9]\n  icUia       <- callModule(uiaNumericModule, 'uia_for_wq_map',\n                            reactive(icTemp()),\n                            reactive(icSal()),\n                            reactive(icPh_init()), # NB: need pH for this implementation -- critPh line??\n                            1,                     # show_tc_flag == 1\n                            reactive(st()))\n  \n  \n  icCo2_dissolved  <- callModule(co2DissolvedNumericModule, 'co2_dissolved_for_wq_map',\n                                 reactive(icTemp()),\n                                 reactive(icSal()),\n                                 reactive(icPh_init()), \n                                 reactive(st()))\n  \n  \n  icCa             <- callModule(caNumericModule, 'ca_for_wq_map',\n                                 reactive(icTemp()),\n                                 reactive(icSal()), \n                                 reactive(st()))\n  \n  icAlk_green_zone <- callModule(alkGreenZoneModule, 'green_zone_alk',\n                                 reactive(icTemp()),\n                                 reactive(icSal()),\n                                 reactive(st()))\n  \n  \n  # GREEN ZONE coords ----\n  green_zone_coords <- reactive({\n    \n    ph.low.nbs  <- input$green_zone_ph[1]\n    ph.high.nbs <- input$green_zone_ph[2]\n    \n    alk.low  <- icAlk_green_zone()$alk_low\n    alk.high <- icAlk_green_zone()$alk_high\n    \n    # change current ph from NBS to FREE\n    ph.low.free  <- phNbsToPhFree(ph.low.nbs,  icSal()$ic, icTemp()$ic, 0)\n    ph.high.free <- phNbsToPhFree(ph.high.nbs, icSal()$ic, icTemp()$ic, 0)\n\n    dic.1 <- 1000 * calcDicOfAlk(alk.low / 1000,  ph.high.free, icTemp()$ic, icSal()$ic)\n    dic.2 <- 1000 * calcDicOfAlk(alk.low / 1000,  ph.low.free,  icTemp()$ic, icSal()$ic)\n    dic.3 <- 1000 * calcDicOfAlk(alk.high / 1000, ph.low.free,  icTemp()$ic, icSal()$ic)\n    dic.4 <- 1000 * calcDicOfAlk(alk.high / 1000, ph.high.free, icTemp()$ic, icSal()$ic)\n\n    # # Green Zone\n    # polygon(c(dic.1,dic.2,dic.3,dic.4),c(alk.low,alk.low,alk.high,alk.high),\n    #         density=c(30, 20),col=rgb(0,1.0,0,0.7),border='darkgreen')\n    \n    gz_points <- tibble(x = c(dic.1,   dic.2,   dic.3,    dic.4,    dic.1),\n                        y = c(alk.low, alk.low, alk.high, alk.high, alk.low))\n    \n    gz_points\n    \n  })\n  \n  # observe({\n  # \n  #   print(green_zone_coords())\n  # \n  # })\n  \n  \n# REAGENTS MODE ----\n  \n  # see: https://shiny.rstudio.com/gallery/dynamic-ui.html\n  output$ui_reagents <- renderUI({\n      \n    # Depending on input$rb_adjustment, generate a different\n    # UI and send it to the client.\n    \n    # if('By Target' == input$rb_adjustment) {\n      \n      # cat('in wq_map_module.R/output$ui_reagents, cbChecked() ...\\n')\n      # print(cbChecked())\n      # reset(session$ns(\"Reagents\"))\n      # reset(\"Reagents\")\n      # cat('===========================\\n\\n')\n      \n      # NB: prefixed id with \"wq_map-\", the session$ns module id...\n      tags$form(id = session$ns(\"Reagents\"),\n      # tags$form(id = \"Reagents\",\n                # <center><h4>Reagent Menu</h4></center>\n                HTML(\"\n                     <input type=checkbox name='reagent[]' value='nahco3' id='nahco3' title='aka: baking soda or bicarbonate of soda' onClick='toggleCbs(this)'> NaHCO<sub>3</sub> (Sodium bicarbonate)<br>\n                     <INPUT TYPE=checkbox name='reagent[]' value='na2co3' id='na2co3' title='aka: soda ash or washing soda' onClick='toggleCbs(this)'> Na<sub>2</sub>CO<sub>3</sub> (Sodium carbonate)<br>\n                     <INPUT TYPE=checkbox name='reagent[]' value='naoh'   id='naoh'   title='aka: lye or caustic soda' onClick='toggleCbs(this)'> NaOH (Sodium hydroxide)<br>\n                     <br>\n                     <INPUT TYPE=checkbox name='reagent[]' value='caco3' id='caco3' onClick='toggleCbs(this)'> CaCO<sub>3</sub> (Calcium carbonate)<br>\n                     <INPUT TYPE=checkbox name='reagent[]' value='caoh2' id='caoh2' title='aka: slaked lime or hydrated lime' onClick='toggleCbs(this)'> Ca(OH)<sub>2</sub> (Calcium hydroxide)<br>\n                     <INPUT TYPE=checkbox name='reagent[]' value='cao'   id='cao'   title='aka: quicklime [sic]' onClick='toggleCbs(this)'> CaO (Calcium oxide)<br>\n                     <br>\n                     <INPUT TYPE=checkbox name='reagent[]' value='plusCo2'  id='plusCo2'  onClick='toggleCbs(this)'> +CO<sub>2</sub> (add Carbon dioxide)<br>\n                     <INPUT TYPE=checkbox name='reagent[]' value='minusCo2' id='minusCo2' onClick='toggleCbs(this)'> -CO<sub>2</sub> (de-gas Carbon dioxide)<br>\n                     <INPUT TYPE=checkbox name='reagent[]' value='hcl'      id='hcl'      onClick='toggleCbs(this)'> HCl (Muriatic acid, 31.45%w)<br>\n\n\n                     \"), style = 'background-color: lightblue; padding: 5px 0px 5px 5px;'\n                # <br>\n                # <center><INPUT type=button name='adjustment' id='adjustment' value='Calculate Adjustment' onClick='fireAdjustmentCalc()'/></center>\n                )\n      \n    # } \n    \n    # else {\n    #   \n    #   radioButtons(session$ns(\"dynamic\"), \"Dynamic\",\n    #                choices = c(\"Option 1\" = \"option1\",\n    #                            \"Option 2\" = \"option2\"),\n    #                selected = \"option2\"\n    #   )\n    # }\n    \n  })\n  \n\n# display WQ Map TITLE ----\n  \n  output$wq_map_title_t_and_s <- renderUI({\n    \n    str <- tags$strong(paste0('WQ Map for ', icTemp()$val, ' ', icTemp()$units, ' & ', \n                              icSal()$val, ' ', icSal()$units))\n    \n    HTML(paste0(tags$h4(str, align = 'center')))\n    \n  })\n  \n  \n  # display input SUMMARY ----\n  \n  output$wq_map_input_echo <- renderUI({\n    \n    str_vol  <- tags$strong(paste0('Volume: ', icVol()$val, ' ', icVol()$units))\n    str_temp <- tags$strong(paste0('Temperature: ', icTemp()$val, ' ', icTemp()$units))\n    str_sal  <- tags$strong(paste0('Salinity: ', icSal()$val, ' ', icSal()$units))\n    str_tan  <- tags$strong(paste0('TAN: ', icTan()$val, ' ', icTan()$units))\n    \n    # HTML(paste0(tags$h4(str, align = 'center')))\n    HTML(paste0(tags$h4(str_vol), tags$h4(str_temp), tags$h4(str_sal), tags$h4(str_tan)))\n    \n  })\n  \n  \n  \n# display WQ STATE ----\n  \n  output$wq_state <- renderUI({\n    \n    if(!is.na(crit_uia_ph_line()$crit_ph_nbs))\n      str_1 <- tags$strong(paste0('critical pH for UIA: ', round(crit_uia_ph_line()$crit_ph_nbs, 2)))\n    else\n      str_1 <- tags$strong(paste0('NO critical pH for UIA: either TAN < UIA or TAN == 0'))\n    \n    HTML(paste0(tags$h4(str_1, align = 'center')))\n    \n  })\n  \n  \n# display RESULTS ----\n  \n# NB: cover case where grams much more appropriate than kg\n# NB: cover case where outside of adjustment zone -- add message\n  output$wq_adjustment_result <- renderUI({\n    \n    req(\n      adjustment_results(),\n      cancelOutput = T\n    )\n    \n    add_or_de_gas_1 <- ifelse('-CO\\u2082' == adjustment_results()$cmpd[1],\n                              'De-gas ', 'Add ')\n    \n    add_or_de_gas_2 <- ifelse('-CO\\u2082' == adjustment_results()$cmpd[2],\n                              'De-gas ', 'Add ')\n    \n    # convert kg to lb on-the-fly...\n    amt_1 <- adjustment_results()$amt[1]\n    amt_2 <- adjustment_results()$amt[2]\n    \n    if(amt_1 > 0 && amt_1 < 0.1) {\n      \n      # cat('amt_1 is > 0 but < 0.1\\n')\n      # cat('1. in wq_adjustment_result, amt_1 = ', amt_1, '\\n')\n      # cat('   so, multiply by 10^3 and report as grams...\\n')\n      \n      amt_1 <- 1000.0 * amt_1\n      amt_2 <- 1000.0 * amt_2\n      \n      mass_in_lbs_1 <- round(0.0022046226 * amt_1, 2)\n      mass_in_lbs_2 <- round(0.0022046226 * amt_2, 2)\n      \n      str1 <- paste0(add_or_de_gas_1, round(amt_1, 2), \n                     ' g (', mass_in_lbs_1,' lbs) of ', \n                     adjustment_results()$cmpd[1])\n      \n      str2 <- paste0(add_or_de_gas_2, round(amt_2, 2), \n                     ' g (', mass_in_lbs_2,' lbs) of ', \n                     adjustment_results()$cmpd[2])\n      \n    } else if(amt_1 > 0 && amt_1 >= 0.1) {\n      \n      # cat('2. amt_1 is > 0 but !< 1.0 \\n')\n      \n      mass_in_lbs_1 <- round(2.2046226 * amt_1, 2)\n      mass_in_lbs_2 <- round(2.2046226 * amt_2, 2)\n      \n      str1 <- paste0(add_or_de_gas_1, round(amt_1, 2), \n                     ' kg (', mass_in_lbs_1,' lbs) of ', \n                     adjustment_results()$cmpd[1])\n      \n      str2 <- paste0(add_or_de_gas_2, round(amt_2, 2), \n                     ' kg (', mass_in_lbs_2,' lbs) of ', \n                     adjustment_results()$cmpd[2])\n      \n    } else {\n      \n      # cat('3. amt_1 is !> 0... out of adjustment region...\\n')\n      \n      str1 <- 'The target point is outside of the adjustment zone'\n      str2 <- 'Please change the choice of reagents to those that include the target'\n    }\n    \n\n    HTML(paste(tags$h4(str1, align = 'center'),\n               tags$h4(str2, align = 'center')))\n    \n  })\n  \n  \n# adjustment region coords ----\n  \n  adjustmentRegionCoords <- reactive({\n    \n    cbs <- cbChecked()\n    \n    # way_points() holds waypoint coords\n    initDic <- way_points()$dic_init\n    initAlk <- way_points()$alk_init\n    maxDIC  <- input$scale_x_axis[2]\n    maxALK  <- input$scale_y_axis[2]\n    \n    counter <- 0\n    \n    for(x in cbs) {\n      \n      counter <- counter + 1    # flag to limit filling Adjustment Region\n      \n      # ---- Adjustment Region ----\n      if(2 == counter) {\n        \n        myP1 <- reagent_data %>% filter(name == cbs[1]) \n        myP2 <- reagent_data %>% filter(name == cbs[2])\n        \n        # which is DIC of 'lower' adjustment vector? (to avoid cutting off filled region)\n        p1Dic <- initDic + maxDIC * myP1$sin\n        p2Dic <- initDic + maxDIC * myP2$sin\n        \n        lowerDic <- ifelse(p1Dic < p2Dic, p1Dic, p2Dic)\n        \n        higherAlk <- ifelse(((lowerDic == initDic) && \n                               (myP1$mRad == 3 * pi / 2 || myP2$mRad == 3 * pi / 2)),\n                            -maxALK, maxALK)\n        \n        higherRad <- max(myP1$mRad, myP2$mRad)\n        lowerRad  <- min(myP1$mRad, myP2$mRad)\n        \n        # ---- Corner-points for Adjustment Region ----\n        \n        cornerPtX <- maxDIC\n        cornerPtY <- maxALK\n        \n        if(3 * pi / 2 == higherRad && lowerRad >= pi) {\n          \n          cornerPtX <- -maxDIC\n          cornerPtY <- -maxALK\n        }\n        \n        if(pi == higherRad)\n          \n          if(lowerRad < pi) {\n            \n            cornerPtX <- -maxDIC\n            cornerPtY <-  maxALK\n          }\n        \n        \n        if(3 * pi / 2 == higherRad && lowerRad < pi) {\n          \n          cornerPtX <-  maxDIC\n          cornerPtY <- -maxALK\n        } else {\n          \n          # ADD 4-point Adjustment Region\n          #          polygon(c(initDic, initDic+maxDIC*myP1$sin, cornerPtX, initDic+maxDIC*myP2$sin),\n          #                  c(initAlk, initAlk+maxDIC*myP1$cos, cornerPtY, initAlk+maxDIC*myP2$cos),\n          #                  density=c(80, 20),\n          #                  col=rgb(255/255,255/255,153/255,0.4),\n          #                  border='yellow')\n        } \n        \n        # temp DUMMY coords...\n        coords_x <- c(0, 0, 0, 0)\n        coords_y <- c(0, 0, 0, 0)\n      } else {\n        \n        coords_x <- c(0, 0, 0, 0)\n        coords_y <- c(0, 0, 0, 0)\n      }\n      \n      # NB: 'x' is the current reagent name in the loop\n      # myP <- reagent.df[reagent.df$name == x,]\n      # myP <- reagent_data %>% filter(name == x)\n    }\n    \n  })\n\n  \n  \n  # collect cbChecked from js script ----\n  \n  cbChecked <- reactive({\n    \n    input$checkedReagents\n  })\n  \n  \n  # adjustmentCalcs ----\n  \n  # CASE: both WQ points identical -- do not calculate adjustment\n  same_wq_points <- reactive({\n    \n    same = F\n    \n    if(way_points()$dic_init == way_points()$dic_final &&\n       way_points()$alk_init == way_points()$alk_final) {\n      \n      same = T\n    } \n    \n    same\n    \n  })\n  \n  \n  observeEvent(c(cbChecked(), way_points(), icVol()), {\n    \n    if(same_wq_points()) {\n      \n      updateActionButton(session, 'calculate_adjustment', \n                         label = 'WQ points are identical')\n      \n      \n      shinyjs::disable('calculate_adjustment')\n      \n      js$backgroundCol(session$ns('calculate_adjustment'), '#d3d3d3', 'black')\n      \n      return()\n    }\n    \n    \n    if(length(cbChecked()) == 2) {\n      \n      updateActionButton(session, 'calculate_adjustment', \n                         label = 'Re-calculate the Adjustment!')\n      \n      \n      shinyjs::enable('calculate_adjustment')\n      \n      js$backgroundCol(session$ns('calculate_adjustment'), 'green', 'white')\n      \n    } else {\n      \n      updateActionButton(session, 'calculate_adjustment', \n                         label = 'Need 2 Reagents')\n      \n      \n      shinyjs::disable('calculate_adjustment')\n      \n      js$backgroundCol(session$ns('calculate_adjustment'), '#d3d3d3', 'black')\n    }\n    \n  })\n  \n  \n  \n  # observeEvent(input$calculate_adjustment, {\n  \n  # NB: Case where pH_init == pH_final && alk_init == alk_final...\n  adjustment_results <- eventReactive(input$calculate_adjustment, {\n    \n    adjustmentRegionCoords()\n    \n    \n    my_reagent_1 <- cbChecked()[1]\n    my_reagent_2 <- cbChecked()[2]\n    \n    my_adjustment_result <- calcAdjustment(way_points()$dic_init / 1000.0,  \n                                           way_points()$alk_init / 1000.0,\n                                           \n                                           way_points()$dic_final / 1000.0, \n                                           way_points()$alk_final / 1000.0,\n                                           \n                                           icVol()$ic,\n                                           \n                                           my_reagent_1, my_reagent_2)\n    \n    \n    # change button label, color, and disable\n    updateActionButton(session, 'calculate_adjustment', \n                       label = 'Adjustment Calculated')\n    \n    shinyjs::disable('calculate_adjustment')\n    \n    js$backgroundCol(session$ns('calculate_adjustment'), '#d3d3d3', 'black')\n    \n    my_adjustment_result\n    \n  })\n  \n  \n  # fireAdjustmentCalculation <- reactive({\n  #   \n  #   cbChecked()\n  #   \n  #   x <- input$adjustment\n  #   y <- input$adjustmentCalculation\n  #   \n  #   cat('x = ', x, '\\n')\n  #   cat('y = ', y, '\\n')\n  #   \n  #   x\n  # })\n  \n  \n# echo [Alk] units for target ----\n  output$echo_alk_units <- renderUI({\n    \n    cat('Evo...output$echo_alk_units \\n')\n    \n    str <- paste0(input$alk_initial_units)\n    tags$h5(str, \n            style=\"padding: 35px 0px 0px 5px; \n            margin: 0px 0px 0px 5px;\")\n  })\n\n  \n# calc waypoint coords ----\n  \n  way_points <- reactive({\n    \n    # cat('icPh_init()$val = ', icPh_init()$val, ' --> icPh_init()$ic = ', icPh_init()$ic, ' (FREE) \\n')\n    \n    myDics <- getInitAndFinalDic(icTemp()$ic, icSal()$ic,\n                                 icPh_init()$ic, icAlk_init()$ic,\n                                 icPh_final()$ic, icAlk_final()$ic)\n    \n    my_way_points <- tibble(dic_init  = myDics[1],\n                            alk_init  = icAlk_init()$ic,\n                            \n                            dic_final = myDics[2],\n                            alk_final = icAlk_final()$ic)\n    \n  })\n  \n  \n  \n  # calc pH isopleths ----\n  \n  ph_family <- reactive({\n    \n    temp <- icTemp()$ic\n    sal  <- icSal()$ic\n    \n    cond         <- NULL\n    ph_slope     <- NULL\n    ph_intercept <- NULL\n    \n    # NB: base low- and high-pH range, and step on axes scales...\n    for(ph in seq(5, 12, 0.25)) {\n      \n      # change current ph from NBS to FREE\n      ph_free <- phNbsToPhFree(ph, sal, temp, 0)\n      \n      ph_intercept <- c(ph_intercept, 1000 * phLineIntercept(temp, sal, ph_free))\n      \n      ph_slope <- c(ph_slope, phLineSlope(temp, sal, ph_free))\n      \n      cond         <- c(cond, ifelse(ph/as.integer(ph) == 1, 'whole', 'quarter'))\n    }\n    \n    \n    ph_isopleths <- tibble(cond         = cond, \n                           ph_slope     = ph_slope, \n                           ph_intercept = ph_intercept\n    )\n    \n    ph_isopleths\n    \n  })\n  \n  \n  \n  # Ω CALCULATION ----\n  # NB: pH TOTAL here?? ----\n  # see this function in omega_curve.R in file \"WQ_iQuaCalc_Lite_0.3_test_code\"\n  sim_omega_calcite_saturation <- function(ic_temp, ic_sal, \n                                           ic_ca, omega_calcite = 1.0,\n                                           dic_min, dic_max) {\n    \n    dic_vec <- c()\n    alk_vec <- c()\n    \n    # dic_min  <- 0.000000\n    # dic_max  <- 0.005000\n    dic_step <- 0.00005\n    \n    tol <- 10^(-6)\n    \n    for(dic in seq(dic_min, dic_max, dic_step)) {\n      \n      ph_min <-  5.0\n      ph_max <- 14.0\n      \n      ph_test <- (ph_min + ph_max) / 2\n      \n      omega_test <- calcOmegaCa(dic, ic_ca, ic_temp, ic_sal, ph_test)\n      \n      \n      while(abs(omega_test - omega_calcite) > tol) {\n        \n        alk <- calcAlkOfDic(dic, ph_test, ic_temp, ic_sal)\n        \n        if(abs(ph_max - ph_min) < 0.001) {\n          \n          break()\n        }\n        \n        # if last calculated Ω too high, then lower pH\n        if(omega_test >= omega_calcite) {\n          \n          ph_max <- ph_test\n          \n        } else {\n          \n          ph_min <- ph_test\n        }\n        \n        ph_test <- (ph_min + ph_max) / 2\n        \n        omega_test <- calcOmegaCa(dic, ic_ca, ic_temp, ic_sal, ph_test)\n        \n      }\n      \n      alk <- calcAlkOfDic(dic, ph_test, ic_temp, ic_sal)\n      \n      dic_vec <- c(dic_vec, dic)\n      alk_vec <- c(alk_vec, alk)\n      \n    }\n    \n    dic_vec <- c(dic_vec, dic) * 10^3\n    alk_vec <- c(alk_vec, alk) * 10^3\n    \n    dic_min <- dic_min * 10^3\n    dic_max <- dic_max * 10^3\n    \n    \n    omega_ca_tbl <- tibble(dic = dic_vec,\n                           alk = alk_vec)\n    \n    \n    # ANNOTATION -- how to place it when display omega = 1...\n    min_alk     <- min(omega_ca_tbl$alk)\n    min_alk_idx <- which(omega_ca_tbl$alk == min_alk)\n    min_dic     <- omega_ca_tbl$dic[min_alk_idx]\n    delta <- dic_max - min_alk   # Use DIC_max, as alk_max set to dic_max\n    \n    min_dic_translated_idx <- min_alk_idx + 20\n    min_dic_start <- omega_ca_tbl$dic[min_dic_translated_idx]\n    min_alk_start <- omega_ca_tbl$alk[min_dic_translated_idx]\n    \n    angle <- 50  # now just a guess...\n    \n    # print(omega_ca_tbl)\n    # cat('============================ \\n')\n    \n    omega_list <- list(df            = omega_ca_tbl,\n                       min_dic_start = min_dic_start,\n                       min_alk_start = min_alk_start,\n                       angle         = angle)\n    \n    \n    return(omega_list)\n    \n    # omega_ca_tbl %>% ggplot() +\n    #   \n    #   geom_line(aes(x = dic, y = alk), linetype = 'dashed', color = 'blue') +\n    #   \n    #   coord_cartesian(xlim = c(0, dic_max), \n    #                   ylim = c(0, dic_max),\n    #                   expand = F) +\n    #   \n    #   scale_color_discrete(name = \"Ω\", labels = c(paste0('Ω = ', omega_calcite))) +\n    #   \n    #   annotate(geom = \"text\", \n    #            x = min_dic_start, \n    #            y = min_alk_start * 1.25, \n    #            label = \"Ω > 1\", angle = 50) +\n    #   \n    #   annotate(geom = \"text\", \n    #            x = min_dic_start, \n    #            y = min_alk_start * 0.75, \n    #            label = \"Ω < 1\", angle = 50)\n    \n  }\n  \n  \n  \n  \n# ---- ** RENDER WQ Map ** ----\n  \n  output$wq_map <- renderPlot({\n    \n    crit_uia_ph_line()\n    \n    # if(-1 == rv$duct_tape_for_plot) {\n    #   \n    #   progress <- shiny::Progress$new()\n    #   \n    #   on.exit(progress$close())\n    #   \n    #   progress$set(message = 'Preparing WQ Map...', value = 0)\n    #   \n    # }\n    # \n    # rv$duct_tape_for_plot <- 2\n    \n    req(\n      icTemp()$ic >= 277.15 && icTemp()$ic <= 315\n    #   icSal(),\n    #   icPh_init(), icPh_final(),\n    #   icAlk_init(), icAlk_final()\n    )\n    \n    # define domain and range of WQ Map\n    dic_units <- 'mmol/kg'\n    dic_label <- paste0('DIC (', dic_units, ')')\n    dic_min <- input$scale_x_axis[1]\n    dic_max <- input$scale_x_axis[2]\n    \n    alk_units <- 'meq/kg'    # [TRIPLE-CHECK] 'meq/kg' or 'meq/L'\n    alk_label <- paste0('Alkalinity (', alk_units, ')')\n    alk_min <- input$scale_y_axis[1]\n    alk_max <- input$scale_y_axis[2]\n    \n    \n    wq <- tibble(dic = c(dic_min, dic_max), \n                 alk = c(alk_min, alk_max))\n    \n    \n    # NB: FORCE origin at [0, 0]\n    # see: https://stackoverflow.com/questions/13701347/force-the-origin-to-start-at-0-in-ggplot2-r\n    # scale_x_continuous(expand = c(0, 0)) + scale_y_continuous(expand = c(0, 0))\n    p <- wq %>% \n      \n      ggplot(mapping = aes(x = dic, y = alk)) + \n      \n      geom_blank() + \n      \n      coord_cartesian(xlim = c(dic_min, dic_max), \n                      ylim = c(alk_min, alk_max),\n                      expand = F) +\n      \n      scale_x_continuous(breaks = seq(dic_min, dic_max, 0.5)) +\n      xlab(dic_label) +\n      \n      # coord_cartesian(ylim = c(alk_min, alk_max), expand = F) +\n      # SEC.AXIS ----\n    scale_y_continuous(breaks = seq(alk_min, alk_max, 0.5), \n                       sec.axis = sec_axis(~.* icAlk_init()$scale_factor, \n                                           name = icAlk_init()$label)) +\n      ylab(alk_label) +\n      \n      theme(legend.position = \"none\")\n    \n    \n    p <- p + theme(axis.title.y = element_text(size = rel(1.2), face = 'bold'),\n                   axis.title.x = element_text(size = rel(1.2), face = 'bold'))\n    \n    \n    temp <- icTemp()$ic\n    sal  <- icSal()$ic\n    \n    \n    # add pH isopleths ----\n    # see: https://stackoverflow.com/questions/17453789/change-the-colour-of-ablines-on-ggplot\n    p <- p +\n      \n      geom_abline(data = ph_family(), \n                  aes(colour    = cond,\n                      slope     = ph_slope, \n                      intercept = ph_intercept)) + \n      \n      scale_colour_manual(values = c(\"gray\", \"black\"))\n    \n    \n    \n    # DISPLAY GREEN ZONE ----\n    \n    if(input$tc_show_green_zone) {\n      \n      p <- p +\n        geom_polygon(data = green_zone_coords(),\n                     aes(x = x,\n                         y = y\n                     ),\n                     alpha = 0.4,\n                     fill = \"darkgreen\"\n        )\n      \n      # \"geom_path() will join points in the original order\"\n      # see: https://stackoverflow.com/questions/19020532/ggplot2-line-plot-order\n      p <- p +\n        geom_path(data = green_zone_coords(),\n                  aes(\n                    x = x,\n                    y = y\n                  ),\n                  colour = 'darkgreen'\n        )\n    }\n    \n    \n    # prep waypoints ----\n    \n    # wq_waypoints <- tibble(pt_fill    = c(\"green\", 'yellow'),\n    wq_waypoints <- tibble(pt_fill    = c(0.13, 0.75),\n                           # wq_waypoints <- tibble(pt_fill    = c(\"#FFFF00\", \"#FFFF00\"),\n                           pt_size    = c(5, 4),\n                           dic_vals   = c(way_points()$dic_init,  way_points()$dic_final),\n                           alk_vals   = c(way_points()$alk_init,  way_points()$alk_final))\n    \n    # NB: NO NEEED of following mishigas when use coord_cartesian...\n    #     see: http://rstudio-pubs-static.s3.amazonaws.com/209392_437ec4da7fa2432d831320f3591e7491.html\n    #     and  https://stackoverflow.com/questions/15494466/breaks-without-scale-y-continuous-in-ggplot2\n    \n    # to draw line segment/arrow when one of the two waypoints is beyond the WQ Map's scale...\n    # NB: are [Alk] and DIC units in I.C. or 'actual'??\n    \n    # way_point_slope <- (way_pt_alk_final - way_pt_alk_init) / (way_pt_dic_final - way_pt_dic_init)\n    # way_point_y_int <- way_pt_alk_init - way_point_slope * way_pt_dic_init\n    \n    \n    # add waypoints ----\n    # see: https://stackoverflow.com/questions/10437442/place-a-border-around-points\n    # see: https://stackoverflow.com/questions/19506630/control-point-border-thickness-in-ggplot\n    p <- p +\n      \n      geom_point(data = wq_waypoints,\n                 aes(x       = dic_vals,\n                     y       = alk_vals,\n                     # fill    = c('black', 'yellow')),\n                     fill    = pt_fill),\n                 colour      = c('yellow', 'black'),\n                 size        = wq_waypoints$pt_size,\n                 pch         = 21,\n                 stroke      = 2)\n    \n    # + scale_fill_manual(values=c(\"#CC6666\", \"#9999CC\"))\n    # + scale_fill_manual(values = c(\"gray\", \"black\"))\n    \n    \n    # connect waypoints ----\n    \n    p <- p +\n      geom_path(data = wq_waypoints,\n                aes(x       = dic_vals,\n                    y       = alk_vals\n                ), \n                arrow=arrow(length = unit(0.15, \"cm\")),\n                colour = \"black\", size = 1)\n    \n    \n    # DISPLAY UIA region ----\n    \n    # NB: if crit_ph_nbs == NA, then either TAN = 0 or TAN < UIA...\n    #     SHOW A MESSAGE IN LOWER RIGHT PANEL ??\n    if(icUia()$show_uia_zone && !is.na(crit_uia_ph_line()$crit_ph_nbs)) {\n      \n      # rs <- data.frame(x = -Inf, y = Inf)\n      # # my_data <- rbind(rs, c(-Inf, -Inf), c(1, -Inf))\n      # my_data <- rbind(rs, c(0, icTemp()$val / 8), c(2.2, Inf))\n      \n      uia_region_coords <- tibble(\n        \n        x = c(0, \n              0,  \n              (alk_max - crit_uia_ph_line()$ph_intercept) / crit_uia_ph_line()$ph_slope),\n        \n        y = c(crit_uia_ph_line()$ph_intercept, \n              alk_max, \n              alk_max)\n      )\n      \n      \n      p <- p + \n        geom_polygon(data = uia_region_coords, \n                     aes(x = x, y = y), \n                     alpha = 0.1, \n                     fill = \"red\")\n      \n      \n      p <- p +\n        \n        geom_abline(data        = crit_uia_ph_line(), \n                    aes(\n                      slope     = ph_slope, \n                      intercept = ph_intercept\n                    ),\n                    \n                    colour    = 'red'\n                    # alpha     = 0.3\n        )\n      \n    }\n    \n    \n    # DISPLAY CO2 region----\n    \n    if(icCo2_dissolved()$show_co2_zone) {\n      \n      p <- p + \n        geom_polygon(data = icCo2_dissolved()$df, \n                     aes(x = x, \n                         y = y\n                     ), \n                     alpha = 0.1, \n                     fill = \"red\"\n        )\n      \n      p <- p + \n        geom_line(data = icCo2_dissolved()$df,\n                  aes(\n                    x = x,\n                    y = y\n                  ),\n                  colour = 'red'\n        )\n    }\n    \n    \n    # DISPLAY OMEGA region(s)----\n    \n    if(icCa()$show_omega_ca_zone) {\n      \n        # cat('State of Omega Checkbos = ...\\n')\n        # \n        # print(icCa())\n        \n        omega_data <- sim_omega_calcite_saturation(icTemp()$ic, icSal()$ic, \n                                                   icCa()$ic, omega_calcite = 1.0,\n                                                   0.00000, 0.00800)\n      \n        \n        p <- p + \n          \n          geom_line(data  = omega_data$df, \n                    aes(x = dic, \n                        y = alk), \n                    linetype = 'dashed', \n                    color    = 'blue',\n                    size     = 1.15) +\n          \n          # scale_color_discrete(name = \"Ω\", labels = c(paste0('Ω = ', omega_calcite))) +\n\n          annotate(geom = \"text\",\n                   x = omega_data$min_dic_start,\n                   y = omega_data$min_alk_start * 1.25,\n                   label = \"Ω > 1\", fontface = 2, size = 4,\n                   angle = omega_data$angle) +\n\n          annotate(geom = \"text\",\n                   x = omega_data$min_dic_start,\n                   y = omega_data$min_alk_start * 0.75,\n                   label = \"Ω < 1\", fontface = 2, size = 4,\n                   angle = omega_data$angle)\n\n    }\n\n\n    # if(icCa()$show_omega_ar_zone) {\n    # \n    # }\n    \n    \n    \n    # DISPLAY adjustments ----\n    \n    my_reagents <- cbChecked()\n    \n    myP <- reagent_data %>% filter(name %in% my_reagents)\n    \n    # when choose HCl and a first-quadrant reagent, extend this fill-region coord\n    dic_max_plus <- dic_max * 10\n    \n    # my_reagent_coords <- tibble(dic_vals = c(way_points()$dic_init, \n    #                                          way_points()$dic_init + dic_max * myP$sin),\n    #                             alk_vals = c(way_points()$alk_init, \n    #                                          way_points()$alk_init + dic_max * myP$cos)\n    # )\n    \n    \n    if(2 == length(cbChecked())) {\n      \n      third_dic_coord <- ifelse('minusCo2' %in% my_reagents, -Inf, Inf)\n      \n      third_alk_coord <- ifelse('hcl' %in% my_reagents, -Inf, Inf)\n      \n      adjustment_region_coords <- tibble(\n        \n        x = c(way_points()$dic_init, \n              way_points()$dic_init + dic_max_plus * myP$sin[2], \n              third_dic_coord, \n              way_points()$dic_init + dic_max_plus * myP$sin[1]),\n        \n        y = c(way_points()$alk_init, \n              way_points()$alk_init + dic_max_plus * myP$cos[2], \n              third_alk_coord, \n              way_points()$alk_init + dic_max_plus * myP$cos[1])\n      )\n      \n      p <- p + \n        geom_polygon(data = adjustment_region_coords, \n                     aes(x = x, y = y), \n                     alpha = 0.2, \n                     fill = \"yellow\")\n      \n      \n      p <- p +\n        geom_path(aes(x       = c(way_points()$dic_init, \n                                  way_points()$dic_init + dic_max_plus * myP$sin[2]),\n                      y       = c(way_points()$alk_init, \n                                  way_points()$alk_init + dic_max_plus * myP$cos[2])\n        ), \n        \n        colour = \"#9b870c\", size = 1)\n    }\n    \n    \n    if(length(cbChecked() != 0)) {\n      \n      p <- p +\n        geom_path(aes(x       = c(way_points()$dic_init, \n                                  way_points()$dic_init + dic_max_plus * myP$sin[1]),\n                      y       = c(way_points()$alk_init, \n                                  way_points()$alk_init + dic_max_plus * myP$cos[1])\n        ), \n        \n        colour = \"#9b870c\", size = 1)\n    }\n    \n    p\n    \n  })\n  \n  \n  # ---- Critical TAN Zone ----\n  \n  # percentNh3 <- percentNh3ForTemp(icTemp(), icSal(), initPhFREE)\n  # \n  # # if cbNh3 checked, display critical NH3 region\n  # if(input$cbNh3) {\n  #   \n  #   # user's measured TAN\n  #   myTan <- input$tan\n  #   \n  #   # user's critical (not-to-exceed) UN-ionized ammonia (UIA*)\n  #   myUia <- input$unIonAmm / 1000.0\n  #   \n  #   # critical pH (FREE), not to be exceeded for given TAN, UIA*, temp, & sal\n  #   z2 <- critPhFreeForTanMillero(input$tan, input$unIonAmm / 1000, icTemp(), icSal())\n  #   \n  #   #critPhNh3TOT <- z2 - log10(ahFreeToTotFactor(input$salInPpt, temp, 0))\n  #   # critical pH (NBS)\n  #   critPhNh3SWS <- z2 - log10(ahFreeToSwsFactor(icSal(), icTemp(), 0))\n  #   critPhNh3NBS <- critPhNh3SWS - log10(ahSwsToNbsFactor(icSal(), icTemp(), 0))\n  #   \n  #   # crit [Alk] for LL DI & crit pH (FREE) for UIA*\n  #   \n  #   # adjust LL & UL to fill UIA* region\n  #   justATad <- 0.2\n  #   uia.LL <- dic.LL - justATad\n  #   uia.UL <- dic.UL + justATad\n  #   \n  #   critAlkMilleroLL <- calcAlkOfDicPhTempSal(uia.LL / 1000.0, z2, icTemp(), icSal())\n  #   \n  #   critAlkMilleroUL <- calcAlkOfDicPhTempSal(uia.UL / 1000.0, z2, icTemp(), icSal())\n  #   \n  #   segments(uia.LL, \n  #            1000 * critAlkMilleroLL,\n  #            uia.UL, \n  #            1000 * critAlkMilleroUL,\n  #            col = 'red', \n  #            lwd = 1)\n  #   \n  #   polygon(\n  #     c(uia.LL,                uia.UL,                uia.UL,      uia.LL),\n  #     c(1000 * critAlkMilleroLL, 1000 * critAlkMilleroUL, maxALK,      maxALK),\n  #     density = c(80, 20),\n  #     col = rgb(255/255, 0/255, 0/255, 0.4), \n  #     border = 'red')\n  #   \n  # }\n  \n  \n  # CRIT UIA pH, m, & b ----\n  \n  crit_uia_ph_line <- reactive({\n    \n    # crit_ic <- tanToIcUnits(input$critTanVal, input$critTanUnits, ic_rho, uia_posto)\n    # crit_df <- tanToAllUnits(crit_ic, ic_rho, uia_posto, 6, 6) # NB: '6' dec_places, '6' num_digits\n    \n    \n    # cat('        icTemp()$ic = ', icTemp()$ic, ' K \\n')\n    # cat('         icSal()$ic = ', icSal()$ic, ' ppt \\n\\n')\n    # \n    # cat('            icTan()$ic = ', icTan()$ic, ' mg/L TA-N \\n')\n    # cat('           entered TAN = ', icTan()$val, ' ', icTan()$units, ' \\n')\n    \n    tan_in_mg_kg <- as.numeric(icTan()$df$TAN[2])\n    # cat('       tan_in_mg_kg = ', tan_in_mg_kg, ' mg/kg TA-N \\n\\n')\n    \n    uia_crit_in_mg_liter <- as.numeric(icUia()$df$UIAN[1])\n    uia_crit_in_mg_kg    <- as.numeric(icUia()$df$UIAN[2])\n    \n    # cat(' uia_crit_in_mg_liter = ', uia_crit_in_mg_liter, ' mg/L UIA-N\\n')\n    # cat('    uia_crit_in_mg_kg = ', uia_crit_in_mg_kg, ' mg/kg UIA-N\\\\nn')\n    # \n    # cat('(entered UIA --> ', icUia()$val, ' ', icUia()$units, ') \\n\\n')\n    # \n    # cat('calculate critical pH (NBS) for T, S, TAN, & UIA-crit...\\n')\n    \n    if(tan_in_mg_kg > uia_crit_in_mg_kg) {\n      \n      critPh_FREE <- critPhFreeForTanMillero(tan_in_mg_kg, uia_crit_in_mg_kg, \n                                             icTemp()$ic, icSal()$ic)\n      \n      # critPh_FREE <- critPhFreeForTanMillero(tan_mg_kg, crit_mg_kg_uia_N, temp, sal)\n      # cat('Does critPh_FREE have correct tan & crit_tan units (mg/kg *-N)??', critPh_FREE, '\\n')\n      \n      critPh_NBS <- critPh_FREE - log10(ahFreeToSwsFactor(icSal()$ic, icTemp()$ic, 0)) -\n        log10(ahSwsToNbsFactor(icSal()$ic, icTemp()$ic, 0))\n      \n      \n      ph_free <- phNbsToPhFree(critPh_NBS, icSal()$ic, icTemp()$ic, 0)\n      \n      # cat('critPh_FREE = ', critPh_FREE, '\\n')\n      # cat(' critPh_NBS = ', critPh_NBS, '\\n')\n      # cat('    ph_free = ', ph_free, '\\n')\n      \n      ph_intercept <- 1000 * phLineIntercept(icTemp()$ic, icSal()$ic, ph_free)\n      \n      ph_slope <- phLineSlope(icTemp()$ic, icSal()$ic, ph_free)\n      \n      \n      critPh_NBS <- round(critPh_NBS, 6)\n      \n      # cat('\\n==============================\\n')\n      # cat(' ph_intercept = ', ph_intercept, '...\\n')\n      # cat('     ph_slope = ', ph_slope, '...\\n')\n      # cat('...critPh_NBS = ', critPh_NBS, '...\\n\\n')\n      # \n      # cat('----------------------------\\n\\n')\n      \n      crit_ph_uia_data <- tibble(crit_ph_nbs  = critPh_NBS,\n                                 ph_slope     = ph_slope, \n                                 ph_intercept = ph_intercept)\n      \n    } else {\n      \n      # if TAN = 0 or TAN <= UIA, then SHOW NOT UIA REGION\n      cat('*****VALIDATION: TAN measurement must be > critical UIA, eh?')\n      \n      # NB: MUST show message...\n      # req(tan_in_mg_kg > uia_crit_in_mg_kg,\n      #     cancelOutput = T)\n      \n      crit_ph_uia_data <- tibble(crit_ph_nbs  = NA,   # flag to show message?\n                                 ph_slope     = 0, \n                                 ph_intercept = 0)\n      \n    }\n    \n    \n  })\n  \n  \n  \n  \n  # [TEST] MODAL DIALOGUEs ----\n\n  # feed ----\n  # see: modal_dlgs/modal_dlg_feed.R\n  \n  \n  observeEvent(input$modal_feed, {\n    \n    showModal(modal_feed_ui())\n  })\n  \n  observeEvent(input$modal_mixing, {\n    \n    showModal(modalDialog(\n      \n      title = 'Mixing Dialogue',\n      \n      '...Under Construction...'\n    ))\n    \n  })\n  \n  observeEvent(input$modal_photosynthesis, {\n    \n    showModal(modalDialog(\n      \n      title = 'Photosynthesis Dialogue',\n      \n      '...Under Construction...'\n    ))\n    \n  })\n  \n}",
    "created" : 1507294978826.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3580943380",
    "id" : "DB180B6B",
    "lastKnownWriteTime" : 1507654636,
    "last_content_update" : 1507654636769,
    "path" : "~/Documents/Documents/R Projects/WQ_iQuaCalc_Lite_0.3/modules/wq_map_module.R",
    "project_path" : "modules/wq_map_module.R",
    "properties" : {
        "docOutlineVisible" : "1"
    },
    "relative_order" : 7,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}